// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trippath.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "valhalla/proto/trippath.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace valhalla {
namespace odin {

namespace {

const ::google::protobuf::Descriptor* TripPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripPath_LatLng_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripPath_LatLng_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripPath_BoundingBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripPath_BoundingBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripPath_Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripPath_Location_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_Location_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_Location_SideOfStreet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TripPath_Sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripPath_Sign_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripPath_TransitRouteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripPath_TransitRouteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripPath_Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripPath_Edge_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripPath_IntersectingEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripPath_IntersectingEdge_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripPath_TransitStopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripPath_TransitStopInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_TransitStopInfo_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TripPath_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripPath_Node_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_Node_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TripPath_Admin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripPath_Admin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_Traversability_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_RoadClass_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_Use_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_TravelMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_VehicleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_PedestrianType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_BicycleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripPath_TransitType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_trippath_2eproto() {
  protobuf_AddDesc_trippath_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trippath.proto");
  GOOGLE_CHECK(file != NULL);
  TripPath_descriptor_ = file->message_type(0);
  static const int TripPath_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath, trip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath, leg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath, leg_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath, admin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath, bbox_),
  };
  TripPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripPath_descriptor_,
      TripPath::default_instance_,
      TripPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripPath));
  TripPath_LatLng_descriptor_ = TripPath_descriptor_->nested_type(0);
  static const int TripPath_LatLng_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_LatLng, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_LatLng, lng_),
  };
  TripPath_LatLng_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripPath_LatLng_descriptor_,
      TripPath_LatLng::default_instance_,
      TripPath_LatLng_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_LatLng, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_LatLng, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripPath_LatLng));
  TripPath_BoundingBox_descriptor_ = TripPath_descriptor_->nested_type(1);
  static const int TripPath_BoundingBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_BoundingBox, min_ll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_BoundingBox, max_ll_),
  };
  TripPath_BoundingBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripPath_BoundingBox_descriptor_,
      TripPath_BoundingBox::default_instance_,
      TripPath_BoundingBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_BoundingBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_BoundingBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripPath_BoundingBox));
  TripPath_Location_descriptor_ = TripPath_descriptor_->nested_type(2);
  static const int TripPath_Location_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, ll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, postal_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, side_of_street_),
  };
  TripPath_Location_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripPath_Location_descriptor_,
      TripPath_Location::default_instance_,
      TripPath_Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Location, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripPath_Location));
  TripPath_Location_Type_descriptor_ = TripPath_Location_descriptor_->enum_type(0);
  TripPath_Location_SideOfStreet_descriptor_ = TripPath_Location_descriptor_->enum_type(1);
  TripPath_Sign_descriptor_ = TripPath_descriptor_->nested_type(3);
  static const int TripPath_Sign_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Sign, exit_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Sign, exit_branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Sign, exit_toward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Sign, exit_name_),
  };
  TripPath_Sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripPath_Sign_descriptor_,
      TripPath_Sign::default_instance_,
      TripPath_Sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripPath_Sign));
  TripPath_TransitRouteInfo_descriptor_ = TripPath_descriptor_->nested_type(4);
  static const int TripPath_TransitRouteInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, trip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, short_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, long_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, headsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, text_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, operator_onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, operator_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, operator_url_),
  };
  TripPath_TransitRouteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripPath_TransitRouteInfo_descriptor_,
      TripPath_TransitRouteInfo::default_instance_,
      TripPath_TransitRouteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitRouteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripPath_TransitRouteInfo));
  TripPath_Edge_descriptor_ = TripPath_descriptor_->nested_type(5);
  static const int TripPath_Edge_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, road_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, begin_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, end_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, begin_shape_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, end_shape_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, traversability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, toll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, unpaved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, tunnel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, bridge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, roundabout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, internal_intersection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, drive_on_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, end_node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, travel_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, vehicle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, pedestrian_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, bicycle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, transit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, transit_route_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, way_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, weighted_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, max_upward_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, max_downward_grade_),
  };
  TripPath_Edge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripPath_Edge_descriptor_,
      TripPath_Edge::default_instance_,
      TripPath_Edge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Edge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripPath_Edge));
  TripPath_IntersectingEdge_descriptor_ = TripPath_descriptor_->nested_type(6);
  static const int TripPath_IntersectingEdge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_IntersectingEdge, begin_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_IntersectingEdge, prev_name_consistency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_IntersectingEdge, curr_name_consistency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_IntersectingEdge, driveability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_IntersectingEdge, cyclability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_IntersectingEdge, walkability_),
  };
  TripPath_IntersectingEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripPath_IntersectingEdge_descriptor_,
      TripPath_IntersectingEdge::default_instance_,
      TripPath_IntersectingEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_IntersectingEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_IntersectingEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripPath_IntersectingEdge));
  TripPath_TransitStopInfo_descriptor_ = TripPath_descriptor_->nested_type(7);
  static const int TripPath_TransitStopInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitStopInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitStopInfo, onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitStopInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitStopInfo, arrival_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitStopInfo, departure_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitStopInfo, is_parent_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitStopInfo, assumed_schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitStopInfo, ll_),
  };
  TripPath_TransitStopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripPath_TransitStopInfo_descriptor_,
      TripPath_TransitStopInfo::default_instance_,
      TripPath_TransitStopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitStopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_TransitStopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripPath_TransitStopInfo));
  TripPath_TransitStopInfo_Type_descriptor_ = TripPath_TransitStopInfo_descriptor_->enum_type(0);
  TripPath_Node_descriptor_ = TripPath_descriptor_->nested_type(8);
  static const int TripPath_Node_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Node, edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Node, intersecting_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Node, elapsed_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Node, admin_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Node, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Node, fork_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Node, transit_stop_info_),
  };
  TripPath_Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripPath_Node_descriptor_,
      TripPath_Node::default_instance_,
      TripPath_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripPath_Node));
  TripPath_Node_Type_descriptor_ = TripPath_Node_descriptor_->enum_type(0);
  TripPath_Admin_descriptor_ = TripPath_descriptor_->nested_type(9);
  static const int TripPath_Admin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Admin, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Admin, country_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Admin, state_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Admin, state_text_),
  };
  TripPath_Admin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripPath_Admin_descriptor_,
      TripPath_Admin::default_instance_,
      TripPath_Admin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Admin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripPath_Admin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripPath_Admin));
  TripPath_Traversability_descriptor_ = TripPath_descriptor_->enum_type(0);
  TripPath_RoadClass_descriptor_ = TripPath_descriptor_->enum_type(1);
  TripPath_Use_descriptor_ = TripPath_descriptor_->enum_type(2);
  TripPath_TravelMode_descriptor_ = TripPath_descriptor_->enum_type(3);
  TripPath_VehicleType_descriptor_ = TripPath_descriptor_->enum_type(4);
  TripPath_PedestrianType_descriptor_ = TripPath_descriptor_->enum_type(5);
  TripPath_BicycleType_descriptor_ = TripPath_descriptor_->enum_type(6);
  TripPath_TransitType_descriptor_ = TripPath_descriptor_->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trippath_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripPath_descriptor_, &TripPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripPath_LatLng_descriptor_, &TripPath_LatLng::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripPath_BoundingBox_descriptor_, &TripPath_BoundingBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripPath_Location_descriptor_, &TripPath_Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripPath_Sign_descriptor_, &TripPath_Sign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripPath_TransitRouteInfo_descriptor_, &TripPath_TransitRouteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripPath_Edge_descriptor_, &TripPath_Edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripPath_IntersectingEdge_descriptor_, &TripPath_IntersectingEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripPath_TransitStopInfo_descriptor_, &TripPath_TransitStopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripPath_Node_descriptor_, &TripPath_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripPath_Admin_descriptor_, &TripPath_Admin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trippath_2eproto() {
  delete TripPath::default_instance_;
  delete TripPath_reflection_;
  delete TripPath_LatLng::default_instance_;
  delete TripPath_LatLng_reflection_;
  delete TripPath_BoundingBox::default_instance_;
  delete TripPath_BoundingBox_reflection_;
  delete TripPath_Location::default_instance_;
  delete TripPath_Location_reflection_;
  delete TripPath_Sign::default_instance_;
  delete TripPath_Sign_reflection_;
  delete TripPath_TransitRouteInfo::default_instance_;
  delete TripPath_TransitRouteInfo_reflection_;
  delete TripPath_Edge::default_instance_;
  delete TripPath_Edge_reflection_;
  delete TripPath_IntersectingEdge::default_instance_;
  delete TripPath_IntersectingEdge_reflection_;
  delete TripPath_TransitStopInfo::default_instance_;
  delete TripPath_TransitStopInfo_reflection_;
  delete TripPath_Node::default_instance_;
  delete TripPath_Node_reflection_;
  delete TripPath_Admin::default_instance_;
  delete TripPath_Admin_reflection_;
}

void protobuf_AddDesc_trippath_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016trippath.proto\022\rvalhalla.odin\"\256\"\n\010Trip"
    "Path\022\017\n\007trip_id\030\001 \001(\004\022\016\n\006leg_id\030\002 \001(\r\022\021\n"
    "\tleg_count\030\003 \001(\r\0222\n\010location\030\004 \003(\0132 .val"
    "halla.odin.TripPath.Location\022*\n\004node\030\005 \003"
    "(\0132\034.valhalla.odin.TripPath.Node\022,\n\005admi"
    "n\030\006 \003(\0132\035.valhalla.odin.TripPath.Admin\022\r"
    "\n\005shape\030\007 \001(\t\0221\n\004bbox\030\010 \001(\0132#.valhalla.o"
    "din.TripPath.BoundingBox\032\"\n\006LatLng\022\013\n\003la"
    "t\030\001 \001(\002\022\013\n\003lng\030\002 \001(\002\032m\n\013BoundingBox\022.\n\006m"
    "in_ll\030\001 \001(\0132\036.valhalla.odin.TripPath.Lat"
    "Lng\022.\n\006max_ll\030\002 \001(\0132\036.valhalla.odin.Trip"
    "Path.LatLng\032\213\003\n\010Location\022*\n\002ll\030\001 \001(\0132\036.v"
    "alhalla.odin.TripPath.LatLng\0223\n\004type\030\002 \001"
    "(\0162%.valhalla.odin.TripPath.Location.Typ"
    "e\022\017\n\007heading\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\022\016\n\006stre"
    "et\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\022\r\n\005state\030\007 \001(\t\022\023\n"
    "\013postal_code\030\010 \001(\t\022\017\n\007country\030\t \001(\t\022\021\n\td"
    "ate_time\030\n \001(\t\022E\n\016side_of_street\030\013 \001(\0162-"
    ".valhalla.odin.TripPath.Location.SideOfS"
    "treet\" \n\004Type\022\n\n\006kBreak\020\000\022\014\n\010kThrough\020\001\""
    "0\n\014SideOfStreet\022\t\n\005kNone\020\000\022\t\n\005kLeft\020\001\022\n\n"
    "\006kRight\020\002\032X\n\004Sign\022\023\n\013exit_number\030\001 \003(\t\022\023"
    "\n\013exit_branch\030\002 \003(\t\022\023\n\013exit_toward\030\003 \003(\t"
    "\022\021\n\texit_name\030\004 \003(\t\032\204\002\n\020TransitRouteInfo"
    "\022\022\n\nonestop_id\030\001 \001(\t\022\020\n\010block_id\030\002 \001(\r\022\017"
    "\n\007trip_id\030\003 \001(\r\022\022\n\nshort_name\030\004 \001(\t\022\021\n\tl"
    "ong_name\030\005 \001(\t\022\020\n\010headsign\030\006 \001(\t\022\r\n\005colo"
    "r\030\007 \001(\r\022\022\n\ntext_color\030\010 \001(\r\022\023\n\013descripti"
    "on\030\t \001(\t\022\033\n\023operator_onestop_id\030\n \001(\t\022\025\n"
    "\roperator_name\030\013 \001(\t\022\024\n\014operator_url\030\014 \001"
    "(\t\032\343\007\n\004Edge\022\014\n\004name\030\001 \003(\t\022\016\n\006length\030\002 \001("
    "\002\022\r\n\005speed\030\003 \001(\002\0225\n\nroad_class\030\004 \001(\0162!.v"
    "alhalla.odin.TripPath.RoadClass\022\025\n\rbegin"
    "_heading\030\005 \001(\r\022\023\n\013end_heading\030\006 \001(\r\022\031\n\021b"
    "egin_shape_index\030\007 \001(\r\022\027\n\017end_shape_inde"
    "x\030\010 \001(\r\022>\n\016traversability\030\t \001(\0162&.valhal"
    "la.odin.TripPath.Traversability\022(\n\003use\030\n"
    " \001(\0162\033.valhalla.odin.TripPath.Use\022\014\n\004tol"
    "l\030\013 \001(\010\022\017\n\007unpaved\030\014 \001(\010\022\016\n\006tunnel\030\r \001(\010"
    "\022\016\n\006bridge\030\016 \001(\010\022\022\n\nroundabout\030\017 \001(\010\022\035\n\025"
    "internal_intersection\030\020 \001(\010\022\034\n\016drive_on_"
    "right\030\021 \001(\010:\004true\022\026\n\016end_node_index\030\022 \001("
    "\r\022*\n\004sign\030\023 \001(\0132\034.valhalla.odin.TripPath"
    ".Sign\0227\n\013travel_mode\030\024 \001(\0162\".valhalla.od"
    "in.TripPath.TravelMode\0229\n\014vehicle_type\030\025"
    " \001(\0162#.valhalla.odin.TripPath.VehicleTyp"
    "e\022\?\n\017pedestrian_type\030\026 \001(\0162&.valhalla.od"
    "in.TripPath.PedestrianType\0229\n\014bicycle_ty"
    "pe\030\027 \001(\0162#.valhalla.odin.TripPath.Bicycl"
    "eType\0229\n\014transit_type\030\030 \001(\0162#.valhalla.o"
    "din.TripPath.TransitType\022D\n\022transit_rout"
    "e_info\030\031 \001(\0132(.valhalla.odin.TripPath.Tr"
    "ansitRouteInfo\022\n\n\002id\030\032 \001(\004\022\016\n\006way_id\030\033 \001"
    "(\004\022\026\n\016weighted_grade\030\034 \001(\002\022\030\n\020max_upward"
    "_grade\030\035 \001(\005\022\032\n\022max_downward_grade\030\036 \001(\005"
    "\032\237\002\n\020IntersectingEdge\022\025\n\rbegin_heading\030\001"
    " \001(\r\022\035\n\025prev_name_consistency\030\002 \001(\010\022\035\n\025c"
    "urr_name_consistency\030\003 \001(\010\022<\n\014driveabili"
    "ty\030\004 \001(\0162&.valhalla.odin.TripPath.Traver"
    "sability\022;\n\013cyclability\030\005 \001(\0162&.valhalla"
    ".odin.TripPath.Traversability\022;\n\013walkabi"
    "lity\030\006 \001(\0162&.valhalla.odin.TripPath.Trav"
    "ersability\032\246\002\n\017TransitStopInfo\022:\n\004type\030\001"
    " \001(\0162,.valhalla.odin.TripPath.TransitSto"
    "pInfo.Type\022\022\n\nonestop_id\030\002 \001(\t\022\014\n\004name\030\003"
    " \001(\t\022\031\n\021arrival_date_time\030\004 \001(\t\022\033\n\023depar"
    "ture_date_time\030\005 \001(\t\022\026\n\016is_parent_stop\030\006"
    " \001(\010\022\030\n\020assumed_schedule\030\007 \001(\010\022*\n\002ll\030\010 \001"
    "(\0132\036.valhalla.odin.TripPath.LatLng\"\037\n\004Ty"
    "pe\022\t\n\005kStop\020\000\022\014\n\010kStation\020\001\032\323\003\n\004Node\022*\n\004"
    "edge\030\001 \001(\0132\034.valhalla.odin.TripPath.Edge"
    "\022C\n\021intersecting_edge\030\002 \003(\0132(.valhalla.o"
    "din.TripPath.IntersectingEdge\022\024\n\014elapsed"
    "_time\030\003 \001(\r\022\023\n\013admin_index\030\004 \001(\r\022/\n\004type"
    "\030\005 \001(\0162!.valhalla.odin.TripPath.Node.Typ"
    "e\022\014\n\004fork\030\006 \001(\010\022B\n\021transit_stop_info\030\007 \001"
    "(\0132\'.valhalla.odin.TripPath.TransitStopI"
    "nfo\"\253\001\n\004Type\022\027\n\023kStreetIntersection\020\000\022\t\n"
    "\005kGate\020\001\022\014\n\010kBollard\020\002\022\016\n\nkTollBooth\020\003\022\030"
    "\n\024kMultiUseTransitStop\020\006\022\016\n\nkBikeShare\020\007"
    "\022\014\n\010kParking\020\010\022\025\n\021kMotorwayJunction\020\t\022\022\n"
    "\016kBorderControl\020\n\032[\n\005Admin\022\024\n\014country_co"
    "de\030\001 \001(\t\022\024\n\014country_text\030\002 \001(\t\022\022\n\nstate_"
    "code\030\003 \001(\t\022\022\n\nstate_text\030\004 \001(\t\"C\n\016Traver"
    "sability\022\t\n\005kNone\020\000\022\014\n\010kForward\020\001\022\r\n\tkBa"
    "ckward\020\002\022\t\n\005kBoth\020\003\"\213\001\n\tRoadClass\022\r\n\tkMo"
    "torway\020\000\022\n\n\006kTrunk\020\001\022\014\n\010kPrimary\020\002\022\016\n\nkS"
    "econdary\020\003\022\r\n\tkTertiary\020\004\022\021\n\rkUnclassifi"
    "ed\020\005\022\020\n\014kResidential\020\006\022\021\n\rkServiceOther\020"
    "\007\"\337\003\n\003Use\022\014\n\010kRoadUse\020\000\022\014\n\010kRampUse\020\001\022\023\n"
    "\017kTurnChannelUse\020\002\022\r\n\tkTrackUse\020\003\022\020\n\014kDr"
    "ivewayUse\020\004\022\r\n\tkAlleyUse\020\005\022\024\n\020kParkingAi"
    "sleUse\020\006\022\027\n\023kEmergencyAccessUse\020\007\022\021\n\rkDr"
    "iveThruUse\020\010\022\020\n\014kCuldesacUse\020\t\022\020\n\014kCycle"
    "wayUse\020\024\022\024\n\020kMountainBikeUse\020\025\022\020\n\014kSidew"
    "alkUse\020\030\022\017\n\013kFootwayUse\020\031\022\r\n\tkStepsUse\020\032"
    "\022\014\n\010kPathUse\020\033\022\022\n\016kPedestrianUse\020\034\022\021\n\rkB"
    "ridlewayUse\020\035\022\r\n\tkOtherUse\020(\022\r\n\tkFerryUs"
    "e\020)\022\021\n\rkRailFerryUse\020*\022\014\n\010kRailUse\0202\022\013\n\007"
    "kBusUse\0203\022\026\n\022kRailConnectionUse\0204\022\025\n\021kBu"
    "sConnectionUse\0205\022\031\n\025kTransitConnectionUs"
    "e\0206\"E\n\nTravelMode\022\n\n\006kDrive\020\000\022\017\n\013kPedest"
    "rian\020\001\022\014\n\010kBicycle\020\002\022\014\n\010kTransit\020\003\"K\n\013Ve"
    "hicleType\022\010\n\004kCar\020\000\022\017\n\013kMotorcycle\020\001\022\014\n\010"
    "kAutoBus\020\002\022\023\n\017kTractorTrailer\020\003\"9\n\016Pedes"
    "trianType\022\t\n\005kFoot\020\000\022\017\n\013kWheelchair\020\001\022\013\n"
    "\007kSegway\020\002\"@\n\013BicycleType\022\t\n\005kRoad\020\000\022\n\n\006"
    "kCross\020\001\022\013\n\007kHybrid\020\002\022\r\n\tkMountain\020\003\"r\n\013"
    "TransitType\022\t\n\005kTram\020\000\022\n\n\006kMetro\020\001\022\t\n\005kR"
    "ail\020\002\022\010\n\004kBus\020\003\022\n\n\006kFerry\020\004\022\r\n\tkCableCar"
    "\020\005\022\014\n\010kGondola\020\006\022\016\n\nkFunicular\020\007", 4432);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trippath.proto", &protobuf_RegisterTypes);
  TripPath::default_instance_ = new TripPath();
  TripPath_LatLng::default_instance_ = new TripPath_LatLng();
  TripPath_BoundingBox::default_instance_ = new TripPath_BoundingBox();
  TripPath_Location::default_instance_ = new TripPath_Location();
  TripPath_Sign::default_instance_ = new TripPath_Sign();
  TripPath_TransitRouteInfo::default_instance_ = new TripPath_TransitRouteInfo();
  TripPath_Edge::default_instance_ = new TripPath_Edge();
  TripPath_IntersectingEdge::default_instance_ = new TripPath_IntersectingEdge();
  TripPath_TransitStopInfo::default_instance_ = new TripPath_TransitStopInfo();
  TripPath_Node::default_instance_ = new TripPath_Node();
  TripPath_Admin::default_instance_ = new TripPath_Admin();
  TripPath::default_instance_->InitAsDefaultInstance();
  TripPath_LatLng::default_instance_->InitAsDefaultInstance();
  TripPath_BoundingBox::default_instance_->InitAsDefaultInstance();
  TripPath_Location::default_instance_->InitAsDefaultInstance();
  TripPath_Sign::default_instance_->InitAsDefaultInstance();
  TripPath_TransitRouteInfo::default_instance_->InitAsDefaultInstance();
  TripPath_Edge::default_instance_->InitAsDefaultInstance();
  TripPath_IntersectingEdge::default_instance_->InitAsDefaultInstance();
  TripPath_TransitStopInfo::default_instance_->InitAsDefaultInstance();
  TripPath_Node::default_instance_->InitAsDefaultInstance();
  TripPath_Admin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trippath_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trippath_2eproto {
  StaticDescriptorInitializer_trippath_2eproto() {
    protobuf_AddDesc_trippath_2eproto();
  }
} static_descriptor_initializer_trippath_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TripPath_Traversability_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_Traversability_descriptor_;
}
bool TripPath_Traversability_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_Traversability TripPath::kNone;
const TripPath_Traversability TripPath::kForward;
const TripPath_Traversability TripPath::kBackward;
const TripPath_Traversability TripPath::kBoth;
const TripPath_Traversability TripPath::Traversability_MIN;
const TripPath_Traversability TripPath::Traversability_MAX;
const int TripPath::Traversability_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripPath_RoadClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_RoadClass_descriptor_;
}
bool TripPath_RoadClass_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_RoadClass TripPath::kMotorway;
const TripPath_RoadClass TripPath::kTrunk;
const TripPath_RoadClass TripPath::kPrimary;
const TripPath_RoadClass TripPath::kSecondary;
const TripPath_RoadClass TripPath::kTertiary;
const TripPath_RoadClass TripPath::kUnclassified;
const TripPath_RoadClass TripPath::kResidential;
const TripPath_RoadClass TripPath::kServiceOther;
const TripPath_RoadClass TripPath::RoadClass_MIN;
const TripPath_RoadClass TripPath::RoadClass_MAX;
const int TripPath::RoadClass_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripPath_Use_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_Use_descriptor_;
}
bool TripPath_Use_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 20:
    case 21:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 40:
    case 41:
    case 42:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_Use TripPath::kRoadUse;
const TripPath_Use TripPath::kRampUse;
const TripPath_Use TripPath::kTurnChannelUse;
const TripPath_Use TripPath::kTrackUse;
const TripPath_Use TripPath::kDrivewayUse;
const TripPath_Use TripPath::kAlleyUse;
const TripPath_Use TripPath::kParkingAisleUse;
const TripPath_Use TripPath::kEmergencyAccessUse;
const TripPath_Use TripPath::kDriveThruUse;
const TripPath_Use TripPath::kCuldesacUse;
const TripPath_Use TripPath::kCyclewayUse;
const TripPath_Use TripPath::kMountainBikeUse;
const TripPath_Use TripPath::kSidewalkUse;
const TripPath_Use TripPath::kFootwayUse;
const TripPath_Use TripPath::kStepsUse;
const TripPath_Use TripPath::kPathUse;
const TripPath_Use TripPath::kPedestrianUse;
const TripPath_Use TripPath::kBridlewayUse;
const TripPath_Use TripPath::kOtherUse;
const TripPath_Use TripPath::kFerryUse;
const TripPath_Use TripPath::kRailFerryUse;
const TripPath_Use TripPath::kRailUse;
const TripPath_Use TripPath::kBusUse;
const TripPath_Use TripPath::kRailConnectionUse;
const TripPath_Use TripPath::kBusConnectionUse;
const TripPath_Use TripPath::kTransitConnectionUse;
const TripPath_Use TripPath::Use_MIN;
const TripPath_Use TripPath::Use_MAX;
const int TripPath::Use_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripPath_TravelMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_TravelMode_descriptor_;
}
bool TripPath_TravelMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_TravelMode TripPath::kDrive;
const TripPath_TravelMode TripPath::kPedestrian;
const TripPath_TravelMode TripPath::kBicycle;
const TripPath_TravelMode TripPath::kTransit;
const TripPath_TravelMode TripPath::TravelMode_MIN;
const TripPath_TravelMode TripPath::TravelMode_MAX;
const int TripPath::TravelMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripPath_VehicleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_VehicleType_descriptor_;
}
bool TripPath_VehicleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_VehicleType TripPath::kCar;
const TripPath_VehicleType TripPath::kMotorcycle;
const TripPath_VehicleType TripPath::kAutoBus;
const TripPath_VehicleType TripPath::kTractorTrailer;
const TripPath_VehicleType TripPath::VehicleType_MIN;
const TripPath_VehicleType TripPath::VehicleType_MAX;
const int TripPath::VehicleType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripPath_PedestrianType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_PedestrianType_descriptor_;
}
bool TripPath_PedestrianType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_PedestrianType TripPath::kFoot;
const TripPath_PedestrianType TripPath::kWheelchair;
const TripPath_PedestrianType TripPath::kSegway;
const TripPath_PedestrianType TripPath::PedestrianType_MIN;
const TripPath_PedestrianType TripPath::PedestrianType_MAX;
const int TripPath::PedestrianType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripPath_BicycleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_BicycleType_descriptor_;
}
bool TripPath_BicycleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_BicycleType TripPath::kRoad;
const TripPath_BicycleType TripPath::kCross;
const TripPath_BicycleType TripPath::kHybrid;
const TripPath_BicycleType TripPath::kMountain;
const TripPath_BicycleType TripPath::BicycleType_MIN;
const TripPath_BicycleType TripPath::BicycleType_MAX;
const int TripPath::BicycleType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripPath_TransitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_TransitType_descriptor_;
}
bool TripPath_TransitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_TransitType TripPath::kTram;
const TripPath_TransitType TripPath::kMetro;
const TripPath_TransitType TripPath::kRail;
const TripPath_TransitType TripPath::kBus;
const TripPath_TransitType TripPath::kFerry;
const TripPath_TransitType TripPath::kCableCar;
const TripPath_TransitType TripPath::kGondola;
const TripPath_TransitType TripPath::kFunicular;
const TripPath_TransitType TripPath::TransitType_MIN;
const TripPath_TransitType TripPath::TransitType_MAX;
const int TripPath::TransitType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TripPath_LatLng::kLatFieldNumber;
const int TripPath_LatLng::kLngFieldNumber;
#endif  // !_MSC_VER

TripPath_LatLng::TripPath_LatLng()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripPath_LatLng::InitAsDefaultInstance() {
}

TripPath_LatLng::TripPath_LatLng(const TripPath_LatLng& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripPath_LatLng::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lng_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripPath_LatLng::~TripPath_LatLng() {
  SharedDtor();
}

void TripPath_LatLng::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TripPath_LatLng::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripPath_LatLng::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_LatLng_descriptor_;
}

const TripPath_LatLng& TripPath_LatLng::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trippath_2eproto();
  return *default_instance_;
}

TripPath_LatLng* TripPath_LatLng::default_instance_ = NULL;

TripPath_LatLng* TripPath_LatLng::New() const {
  return new TripPath_LatLng;
}

void TripPath_LatLng::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lat_ = 0;
    lng_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripPath_LatLng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_lng;
        break;
      }

      // optional float lng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripPath_LatLng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lat(), output);
  }

  // optional float lng = 2;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lng(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripPath_LatLng::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lat(), target);
  }

  // optional float lng = 2;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lng(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripPath_LatLng::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float lat = 1;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lng = 2;
    if (has_lng()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripPath_LatLng::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripPath_LatLng* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripPath_LatLng*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripPath_LatLng::MergeFrom(const TripPath_LatLng& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripPath_LatLng::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripPath_LatLng::CopyFrom(const TripPath_LatLng& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripPath_LatLng::IsInitialized() const {

  return true;
}

void TripPath_LatLng::Swap(TripPath_LatLng* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripPath_LatLng::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripPath_LatLng_descriptor_;
  metadata.reflection = TripPath_LatLng_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripPath_BoundingBox::kMinLlFieldNumber;
const int TripPath_BoundingBox::kMaxLlFieldNumber;
#endif  // !_MSC_VER

TripPath_BoundingBox::TripPath_BoundingBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripPath_BoundingBox::InitAsDefaultInstance() {
  min_ll_ = const_cast< ::valhalla::odin::TripPath_LatLng*>(&::valhalla::odin::TripPath_LatLng::default_instance());
  max_ll_ = const_cast< ::valhalla::odin::TripPath_LatLng*>(&::valhalla::odin::TripPath_LatLng::default_instance());
}

TripPath_BoundingBox::TripPath_BoundingBox(const TripPath_BoundingBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripPath_BoundingBox::SharedCtor() {
  _cached_size_ = 0;
  min_ll_ = NULL;
  max_ll_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripPath_BoundingBox::~TripPath_BoundingBox() {
  SharedDtor();
}

void TripPath_BoundingBox::SharedDtor() {
  if (this != default_instance_) {
    delete min_ll_;
    delete max_ll_;
  }
}

void TripPath_BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripPath_BoundingBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_BoundingBox_descriptor_;
}

const TripPath_BoundingBox& TripPath_BoundingBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trippath_2eproto();
  return *default_instance_;
}

TripPath_BoundingBox* TripPath_BoundingBox::default_instance_ = NULL;

TripPath_BoundingBox* TripPath_BoundingBox::New() const {
  return new TripPath_BoundingBox;
}

void TripPath_BoundingBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_min_ll()) {
      if (min_ll_ != NULL) min_ll_->::valhalla::odin::TripPath_LatLng::Clear();
    }
    if (has_max_ll()) {
      if (max_ll_ != NULL) max_ll_->::valhalla::odin::TripPath_LatLng::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripPath_BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.odin.TripPath.LatLng min_ll = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_max_ll;
        break;
      }

      // optional .valhalla.odin.TripPath.LatLng max_ll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripPath_BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.odin.TripPath.LatLng min_ll = 1;
  if (has_min_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->min_ll(), output);
  }

  // optional .valhalla.odin.TripPath.LatLng max_ll = 2;
  if (has_max_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->max_ll(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripPath_BoundingBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .valhalla.odin.TripPath.LatLng min_ll = 1;
  if (has_min_ll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->min_ll(), target);
  }

  // optional .valhalla.odin.TripPath.LatLng max_ll = 2;
  if (has_max_ll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->max_ll(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripPath_BoundingBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.odin.TripPath.LatLng min_ll = 1;
    if (has_min_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_ll());
    }

    // optional .valhalla.odin.TripPath.LatLng max_ll = 2;
    if (has_max_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_ll());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripPath_BoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripPath_BoundingBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripPath_BoundingBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripPath_BoundingBox::MergeFrom(const TripPath_BoundingBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_ll()) {
      mutable_min_ll()->::valhalla::odin::TripPath_LatLng::MergeFrom(from.min_ll());
    }
    if (from.has_max_ll()) {
      mutable_max_ll()->::valhalla::odin::TripPath_LatLng::MergeFrom(from.max_ll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripPath_BoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripPath_BoundingBox::CopyFrom(const TripPath_BoundingBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripPath_BoundingBox::IsInitialized() const {

  return true;
}

void TripPath_BoundingBox::Swap(TripPath_BoundingBox* other) {
  if (other != this) {
    std::swap(min_ll_, other->min_ll_);
    std::swap(max_ll_, other->max_ll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripPath_BoundingBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripPath_BoundingBox_descriptor_;
  metadata.reflection = TripPath_BoundingBox_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* TripPath_Location_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_Location_Type_descriptor_;
}
bool TripPath_Location_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_Location_Type TripPath_Location::kBreak;
const TripPath_Location_Type TripPath_Location::kThrough;
const TripPath_Location_Type TripPath_Location::Type_MIN;
const TripPath_Location_Type TripPath_Location::Type_MAX;
const int TripPath_Location::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripPath_Location_SideOfStreet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_Location_SideOfStreet_descriptor_;
}
bool TripPath_Location_SideOfStreet_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_Location_SideOfStreet TripPath_Location::kNone;
const TripPath_Location_SideOfStreet TripPath_Location::kLeft;
const TripPath_Location_SideOfStreet TripPath_Location::kRight;
const TripPath_Location_SideOfStreet TripPath_Location::SideOfStreet_MIN;
const TripPath_Location_SideOfStreet TripPath_Location::SideOfStreet_MAX;
const int TripPath_Location::SideOfStreet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TripPath_Location::kLlFieldNumber;
const int TripPath_Location::kTypeFieldNumber;
const int TripPath_Location::kHeadingFieldNumber;
const int TripPath_Location::kNameFieldNumber;
const int TripPath_Location::kStreetFieldNumber;
const int TripPath_Location::kCityFieldNumber;
const int TripPath_Location::kStateFieldNumber;
const int TripPath_Location::kPostalCodeFieldNumber;
const int TripPath_Location::kCountryFieldNumber;
const int TripPath_Location::kDateTimeFieldNumber;
const int TripPath_Location::kSideOfStreetFieldNumber;
#endif  // !_MSC_VER

TripPath_Location::TripPath_Location()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripPath_Location::InitAsDefaultInstance() {
  ll_ = const_cast< ::valhalla::odin::TripPath_LatLng*>(&::valhalla::odin::TripPath_LatLng::default_instance());
}

TripPath_Location::TripPath_Location(const TripPath_Location& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripPath_Location::SharedCtor() {
  _cached_size_ = 0;
  ll_ = NULL;
  type_ = 0;
  heading_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_of_street_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripPath_Location::~TripPath_Location() {
  SharedDtor();
}

void TripPath_Location::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
    delete postal_code_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (date_time_ != &::google::protobuf::internal::kEmptyString) {
    delete date_time_;
  }
  if (this != default_instance_) {
    delete ll_;
  }
}

void TripPath_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripPath_Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_Location_descriptor_;
}

const TripPath_Location& TripPath_Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trippath_2eproto();
  return *default_instance_;
}

TripPath_Location* TripPath_Location::default_instance_ = NULL;

TripPath_Location* TripPath_Location::New() const {
  return new TripPath_Location;
}

void TripPath_Location::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ll()) {
      if (ll_ != NULL) ll_->::valhalla::odin::TripPath_LatLng::Clear();
    }
    type_ = 0;
    heading_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::kEmptyString) {
        street_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
    if (has_postal_code()) {
      if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
        postal_code_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_date_time()) {
      if (date_time_ != &::google::protobuf::internal::kEmptyString) {
        date_time_->clear();
      }
    }
    side_of_street_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripPath_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.odin.TripPath.LatLng ll = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .valhalla.odin.TripPath.Location.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_Location_Type_IsValid(value)) {
            set_type(static_cast< ::valhalla::odin::TripPath_Location_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heading;
        break;
      }

      // optional uint32 heading = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_street;
        break;
      }

      // optional string street = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // optional string city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_state;
        break;
      }

      // optional string state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_postal_code;
        break;
      }

      // optional string postal_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postal_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postal_code().data(), this->postal_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_country;
        break;
      }

      // optional string country = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_date_time;
        break;
      }

      // optional string date_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date_time().data(), this->date_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_side_of_street;
        break;
      }

      // optional .valhalla.odin.TripPath.Location.SideOfStreet side_of_street = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side_of_street:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_Location_SideOfStreet_IsValid(value)) {
            set_side_of_street(static_cast< ::valhalla::odin::TripPath_Location_SideOfStreet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripPath_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.odin.TripPath.LatLng ll = 1;
  if (has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ll(), output);
  }

  // optional .valhalla.odin.TripPath.Location.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->heading(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string street = 5;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->street(), output);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->city(), output);
  }

  // optional string state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->state(), output);
  }

  // optional string postal_code = 8;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->postal_code(), output);
  }

  // optional string country = 9;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->country(), output);
  }

  // optional string date_time = 10;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->date_time(), output);
  }

  // optional .valhalla.odin.TripPath.Location.SideOfStreet side_of_street = 11;
  if (has_side_of_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->side_of_street(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripPath_Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .valhalla.odin.TripPath.LatLng ll = 1;
  if (has_ll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ll(), target);
  }

  // optional .valhalla.odin.TripPath.Location.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->heading(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string street = 5;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->street(), target);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  // optional string state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->state(), target);
  }

  // optional string postal_code = 8;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->postal_code(), target);
  }

  // optional string country = 9;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->country(), target);
  }

  // optional string date_time = 10;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->date_time(), target);
  }

  // optional .valhalla.odin.TripPath.Location.SideOfStreet side_of_street = 11;
  if (has_side_of_street()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->side_of_street(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripPath_Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.odin.TripPath.LatLng ll = 1;
    if (has_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ll());
    }

    // optional .valhalla.odin.TripPath.Location.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 heading = 3;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heading());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string street = 5;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string postal_code = 8;
    if (has_postal_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string country = 9;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string date_time = 10;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_time());
    }

    // optional .valhalla.odin.TripPath.Location.SideOfStreet side_of_street = 11;
    if (has_side_of_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side_of_street());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripPath_Location::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripPath_Location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripPath_Location*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripPath_Location::MergeFrom(const TripPath_Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ll()) {
      mutable_ll()->::valhalla::odin::TripPath_LatLng::MergeFrom(from.ll());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_postal_code()) {
      set_postal_code(from.postal_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_date_time()) {
      set_date_time(from.date_time());
    }
    if (from.has_side_of_street()) {
      set_side_of_street(from.side_of_street());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripPath_Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripPath_Location::CopyFrom(const TripPath_Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripPath_Location::IsInitialized() const {

  return true;
}

void TripPath_Location::Swap(TripPath_Location* other) {
  if (other != this) {
    std::swap(ll_, other->ll_);
    std::swap(type_, other->type_);
    std::swap(heading_, other->heading_);
    std::swap(name_, other->name_);
    std::swap(street_, other->street_);
    std::swap(city_, other->city_);
    std::swap(state_, other->state_);
    std::swap(postal_code_, other->postal_code_);
    std::swap(country_, other->country_);
    std::swap(date_time_, other->date_time_);
    std::swap(side_of_street_, other->side_of_street_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripPath_Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripPath_Location_descriptor_;
  metadata.reflection = TripPath_Location_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripPath_Sign::kExitNumberFieldNumber;
const int TripPath_Sign::kExitBranchFieldNumber;
const int TripPath_Sign::kExitTowardFieldNumber;
const int TripPath_Sign::kExitNameFieldNumber;
#endif  // !_MSC_VER

TripPath_Sign::TripPath_Sign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripPath_Sign::InitAsDefaultInstance() {
}

TripPath_Sign::TripPath_Sign(const TripPath_Sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripPath_Sign::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripPath_Sign::~TripPath_Sign() {
  SharedDtor();
}

void TripPath_Sign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TripPath_Sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripPath_Sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_Sign_descriptor_;
}

const TripPath_Sign& TripPath_Sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trippath_2eproto();
  return *default_instance_;
}

TripPath_Sign* TripPath_Sign::default_instance_ = NULL;

TripPath_Sign* TripPath_Sign::New() const {
  return new TripPath_Sign;
}

void TripPath_Sign::Clear() {
  exit_number_.Clear();
  exit_branch_.Clear();
  exit_toward_.Clear();
  exit_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripPath_Sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string exit_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exit_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exit_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exit_number(this->exit_number_size() - 1).data(),
            this->exit_number(this->exit_number_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_exit_number;
        if (input->ExpectTag(18)) goto parse_exit_branch;
        break;
      }

      // repeated string exit_branch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exit_branch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exit_branch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exit_branch(this->exit_branch_size() - 1).data(),
            this->exit_branch(this->exit_branch_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exit_branch;
        if (input->ExpectTag(26)) goto parse_exit_toward;
        break;
      }

      // repeated string exit_toward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exit_toward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exit_toward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exit_toward(this->exit_toward_size() - 1).data(),
            this->exit_toward(this->exit_toward_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_exit_toward;
        if (input->ExpectTag(34)) goto parse_exit_name;
        break;
      }

      // repeated string exit_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exit_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exit_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exit_name(this->exit_name_size() - 1).data(),
            this->exit_name(this->exit_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_exit_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripPath_Sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string exit_number = 1;
  for (int i = 0; i < this->exit_number_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->exit_number(i).data(), this->exit_number(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->exit_number(i), output);
  }

  // repeated string exit_branch = 2;
  for (int i = 0; i < this->exit_branch_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->exit_branch(i).data(), this->exit_branch(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exit_branch(i), output);
  }

  // repeated string exit_toward = 3;
  for (int i = 0; i < this->exit_toward_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->exit_toward(i).data(), this->exit_toward(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exit_toward(i), output);
  }

  // repeated string exit_name = 4;
  for (int i = 0; i < this->exit_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->exit_name(i).data(), this->exit_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->exit_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripPath_Sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string exit_number = 1;
  for (int i = 0; i < this->exit_number_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exit_number(i).data(), this->exit_number(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->exit_number(i), target);
  }

  // repeated string exit_branch = 2;
  for (int i = 0; i < this->exit_branch_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exit_branch(i).data(), this->exit_branch(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->exit_branch(i), target);
  }

  // repeated string exit_toward = 3;
  for (int i = 0; i < this->exit_toward_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exit_toward(i).data(), this->exit_toward(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->exit_toward(i), target);
  }

  // repeated string exit_name = 4;
  for (int i = 0; i < this->exit_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exit_name(i).data(), this->exit_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->exit_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripPath_Sign::ByteSize() const {
  int total_size = 0;

  // repeated string exit_number = 1;
  total_size += 1 * this->exit_number_size();
  for (int i = 0; i < this->exit_number_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exit_number(i));
  }

  // repeated string exit_branch = 2;
  total_size += 1 * this->exit_branch_size();
  for (int i = 0; i < this->exit_branch_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exit_branch(i));
  }

  // repeated string exit_toward = 3;
  total_size += 1 * this->exit_toward_size();
  for (int i = 0; i < this->exit_toward_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exit_toward(i));
  }

  // repeated string exit_name = 4;
  total_size += 1 * this->exit_name_size();
  for (int i = 0; i < this->exit_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exit_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripPath_Sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripPath_Sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripPath_Sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripPath_Sign::MergeFrom(const TripPath_Sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  exit_number_.MergeFrom(from.exit_number_);
  exit_branch_.MergeFrom(from.exit_branch_);
  exit_toward_.MergeFrom(from.exit_toward_);
  exit_name_.MergeFrom(from.exit_name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripPath_Sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripPath_Sign::CopyFrom(const TripPath_Sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripPath_Sign::IsInitialized() const {

  return true;
}

void TripPath_Sign::Swap(TripPath_Sign* other) {
  if (other != this) {
    exit_number_.Swap(&other->exit_number_);
    exit_branch_.Swap(&other->exit_branch_);
    exit_toward_.Swap(&other->exit_toward_);
    exit_name_.Swap(&other->exit_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripPath_Sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripPath_Sign_descriptor_;
  metadata.reflection = TripPath_Sign_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripPath_TransitRouteInfo::kOnestopIdFieldNumber;
const int TripPath_TransitRouteInfo::kBlockIdFieldNumber;
const int TripPath_TransitRouteInfo::kTripIdFieldNumber;
const int TripPath_TransitRouteInfo::kShortNameFieldNumber;
const int TripPath_TransitRouteInfo::kLongNameFieldNumber;
const int TripPath_TransitRouteInfo::kHeadsignFieldNumber;
const int TripPath_TransitRouteInfo::kColorFieldNumber;
const int TripPath_TransitRouteInfo::kTextColorFieldNumber;
const int TripPath_TransitRouteInfo::kDescriptionFieldNumber;
const int TripPath_TransitRouteInfo::kOperatorOnestopIdFieldNumber;
const int TripPath_TransitRouteInfo::kOperatorNameFieldNumber;
const int TripPath_TransitRouteInfo::kOperatorUrlFieldNumber;
#endif  // !_MSC_VER

TripPath_TransitRouteInfo::TripPath_TransitRouteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripPath_TransitRouteInfo::InitAsDefaultInstance() {
}

TripPath_TransitRouteInfo::TripPath_TransitRouteInfo(const TripPath_TransitRouteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripPath_TransitRouteInfo::SharedCtor() {
  _cached_size_ = 0;
  onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_id_ = 0u;
  trip_id_ = 0u;
  short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  long_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = 0u;
  text_color_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operator_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operator_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripPath_TransitRouteInfo::~TripPath_TransitRouteInfo() {
  SharedDtor();
}

void TripPath_TransitRouteInfo::SharedDtor() {
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete onestop_id_;
  }
  if (short_name_ != &::google::protobuf::internal::kEmptyString) {
    delete short_name_;
  }
  if (long_name_ != &::google::protobuf::internal::kEmptyString) {
    delete long_name_;
  }
  if (headsign_ != &::google::protobuf::internal::kEmptyString) {
    delete headsign_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (operator_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete operator_onestop_id_;
  }
  if (operator_name_ != &::google::protobuf::internal::kEmptyString) {
    delete operator_name_;
  }
  if (operator_url_ != &::google::protobuf::internal::kEmptyString) {
    delete operator_url_;
  }
  if (this != default_instance_) {
  }
}

void TripPath_TransitRouteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripPath_TransitRouteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_TransitRouteInfo_descriptor_;
}

const TripPath_TransitRouteInfo& TripPath_TransitRouteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trippath_2eproto();
  return *default_instance_;
}

TripPath_TransitRouteInfo* TripPath_TransitRouteInfo::default_instance_ = NULL;

TripPath_TransitRouteInfo* TripPath_TransitRouteInfo::New() const {
  return new TripPath_TransitRouteInfo;
}

void TripPath_TransitRouteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_onestop_id()) {
      if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        onestop_id_->clear();
      }
    }
    block_id_ = 0u;
    trip_id_ = 0u;
    if (has_short_name()) {
      if (short_name_ != &::google::protobuf::internal::kEmptyString) {
        short_name_->clear();
      }
    }
    if (has_long_name()) {
      if (long_name_ != &::google::protobuf::internal::kEmptyString) {
        long_name_->clear();
      }
    }
    if (has_headsign()) {
      if (headsign_ != &::google::protobuf::internal::kEmptyString) {
        headsign_->clear();
      }
    }
    color_ = 0u;
    text_color_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_operator_onestop_id()) {
      if (operator_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        operator_onestop_id_->clear();
      }
    }
    if (has_operator_name()) {
      if (operator_name_ != &::google::protobuf::internal::kEmptyString) {
        operator_name_->clear();
      }
    }
    if (has_operator_url()) {
      if (operator_url_ != &::google::protobuf::internal::kEmptyString) {
        operator_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripPath_TransitRouteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string onestop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onestop_id().data(), this->onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_id;
        break;
      }

      // optional uint32 block_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
          set_has_block_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trip_id;
        break;
      }

      // optional uint32 trip_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trip_id_)));
          set_has_trip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_short_name;
        break;
      }

      // optional string short_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_short_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->short_name().data(), this->short_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_long_name;
        break;
      }

      // optional string long_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_long_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->long_name().data(), this->long_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_headsign;
        break;
      }

      // optional string headsign = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headsign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headsign().data(), this->headsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_color;
        break;
      }

      // optional uint32 color = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_text_color;
        break;
      }

      // optional uint32 text_color = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &text_color_)));
          set_has_text_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_description;
        break;
      }

      // optional string description = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_operator_onestop_id;
        break;
      }

      // optional string operator_onestop_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operator_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operator_onestop_id().data(), this->operator_onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_operator_name;
        break;
      }

      // optional string operator_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operator_name().data(), this->operator_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_operator_url;
        break;
      }

      // optional string operator_url = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operator_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operator_url().data(), this->operator_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripPath_TransitRouteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string onestop_id = 1;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->onestop_id(), output);
  }

  // optional uint32 block_id = 2;
  if (has_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->block_id(), output);
  }

  // optional uint32 trip_id = 3;
  if (has_trip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->trip_id(), output);
  }

  // optional string short_name = 4;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->short_name(), output);
  }

  // optional string long_name = 5;
  if (has_long_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->long_name().data(), this->long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->long_name(), output);
  }

  // optional string headsign = 6;
  if (has_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headsign().data(), this->headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->headsign(), output);
  }

  // optional uint32 color = 7;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->color(), output);
  }

  // optional uint32 text_color = 8;
  if (has_text_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->text_color(), output);
  }

  // optional string description = 9;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->description(), output);
  }

  // optional string operator_onestop_id = 10;
  if (has_operator_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_onestop_id().data(), this->operator_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->operator_onestop_id(), output);
  }

  // optional string operator_name = 11;
  if (has_operator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_name().data(), this->operator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->operator_name(), output);
  }

  // optional string operator_url = 12;
  if (has_operator_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_url().data(), this->operator_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->operator_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripPath_TransitRouteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string onestop_id = 1;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->onestop_id(), target);
  }

  // optional uint32 block_id = 2;
  if (has_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->block_id(), target);
  }

  // optional uint32 trip_id = 3;
  if (has_trip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->trip_id(), target);
  }

  // optional string short_name = 4;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->short_name(), target);
  }

  // optional string long_name = 5;
  if (has_long_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->long_name().data(), this->long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->long_name(), target);
  }

  // optional string headsign = 6;
  if (has_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headsign().data(), this->headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->headsign(), target);
  }

  // optional uint32 color = 7;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->color(), target);
  }

  // optional uint32 text_color = 8;
  if (has_text_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->text_color(), target);
  }

  // optional string description = 9;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->description(), target);
  }

  // optional string operator_onestop_id = 10;
  if (has_operator_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_onestop_id().data(), this->operator_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->operator_onestop_id(), target);
  }

  // optional string operator_name = 11;
  if (has_operator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_name().data(), this->operator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->operator_name(), target);
  }

  // optional string operator_url = 12;
  if (has_operator_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_url().data(), this->operator_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->operator_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripPath_TransitRouteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string onestop_id = 1;
    if (has_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
    }

    // optional uint32 block_id = 2;
    if (has_block_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_id());
    }

    // optional uint32 trip_id = 3;
    if (has_trip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trip_id());
    }

    // optional string short_name = 4;
    if (has_short_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
    }

    // optional string long_name = 5;
    if (has_long_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->long_name());
    }

    // optional string headsign = 6;
    if (has_headsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headsign());
    }

    // optional uint32 color = 7;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional uint32 text_color = 8;
    if (has_text_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->text_color());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string description = 9;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string operator_onestop_id = 10;
    if (has_operator_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_onestop_id());
    }

    // optional string operator_name = 11;
    if (has_operator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_name());
    }

    // optional string operator_url = 12;
    if (has_operator_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripPath_TransitRouteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripPath_TransitRouteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripPath_TransitRouteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripPath_TransitRouteInfo::MergeFrom(const TripPath_TransitRouteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onestop_id()) {
      set_onestop_id(from.onestop_id());
    }
    if (from.has_block_id()) {
      set_block_id(from.block_id());
    }
    if (from.has_trip_id()) {
      set_trip_id(from.trip_id());
    }
    if (from.has_short_name()) {
      set_short_name(from.short_name());
    }
    if (from.has_long_name()) {
      set_long_name(from.long_name());
    }
    if (from.has_headsign()) {
      set_headsign(from.headsign());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_text_color()) {
      set_text_color(from.text_color());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_operator_onestop_id()) {
      set_operator_onestop_id(from.operator_onestop_id());
    }
    if (from.has_operator_name()) {
      set_operator_name(from.operator_name());
    }
    if (from.has_operator_url()) {
      set_operator_url(from.operator_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripPath_TransitRouteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripPath_TransitRouteInfo::CopyFrom(const TripPath_TransitRouteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripPath_TransitRouteInfo::IsInitialized() const {

  return true;
}

void TripPath_TransitRouteInfo::Swap(TripPath_TransitRouteInfo* other) {
  if (other != this) {
    std::swap(onestop_id_, other->onestop_id_);
    std::swap(block_id_, other->block_id_);
    std::swap(trip_id_, other->trip_id_);
    std::swap(short_name_, other->short_name_);
    std::swap(long_name_, other->long_name_);
    std::swap(headsign_, other->headsign_);
    std::swap(color_, other->color_);
    std::swap(text_color_, other->text_color_);
    std::swap(description_, other->description_);
    std::swap(operator_onestop_id_, other->operator_onestop_id_);
    std::swap(operator_name_, other->operator_name_);
    std::swap(operator_url_, other->operator_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripPath_TransitRouteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripPath_TransitRouteInfo_descriptor_;
  metadata.reflection = TripPath_TransitRouteInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripPath_Edge::kNameFieldNumber;
const int TripPath_Edge::kLengthFieldNumber;
const int TripPath_Edge::kSpeedFieldNumber;
const int TripPath_Edge::kRoadClassFieldNumber;
const int TripPath_Edge::kBeginHeadingFieldNumber;
const int TripPath_Edge::kEndHeadingFieldNumber;
const int TripPath_Edge::kBeginShapeIndexFieldNumber;
const int TripPath_Edge::kEndShapeIndexFieldNumber;
const int TripPath_Edge::kTraversabilityFieldNumber;
const int TripPath_Edge::kUseFieldNumber;
const int TripPath_Edge::kTollFieldNumber;
const int TripPath_Edge::kUnpavedFieldNumber;
const int TripPath_Edge::kTunnelFieldNumber;
const int TripPath_Edge::kBridgeFieldNumber;
const int TripPath_Edge::kRoundaboutFieldNumber;
const int TripPath_Edge::kInternalIntersectionFieldNumber;
const int TripPath_Edge::kDriveOnRightFieldNumber;
const int TripPath_Edge::kEndNodeIndexFieldNumber;
const int TripPath_Edge::kSignFieldNumber;
const int TripPath_Edge::kTravelModeFieldNumber;
const int TripPath_Edge::kVehicleTypeFieldNumber;
const int TripPath_Edge::kPedestrianTypeFieldNumber;
const int TripPath_Edge::kBicycleTypeFieldNumber;
const int TripPath_Edge::kTransitTypeFieldNumber;
const int TripPath_Edge::kTransitRouteInfoFieldNumber;
const int TripPath_Edge::kIdFieldNumber;
const int TripPath_Edge::kWayIdFieldNumber;
const int TripPath_Edge::kWeightedGradeFieldNumber;
const int TripPath_Edge::kMaxUpwardGradeFieldNumber;
const int TripPath_Edge::kMaxDownwardGradeFieldNumber;
#endif  // !_MSC_VER

TripPath_Edge::TripPath_Edge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripPath_Edge::InitAsDefaultInstance() {
  sign_ = const_cast< ::valhalla::odin::TripPath_Sign*>(&::valhalla::odin::TripPath_Sign::default_instance());
  transit_route_info_ = const_cast< ::valhalla::odin::TripPath_TransitRouteInfo*>(&::valhalla::odin::TripPath_TransitRouteInfo::default_instance());
}

TripPath_Edge::TripPath_Edge(const TripPath_Edge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripPath_Edge::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  speed_ = 0;
  road_class_ = 0;
  begin_heading_ = 0u;
  end_heading_ = 0u;
  begin_shape_index_ = 0u;
  end_shape_index_ = 0u;
  traversability_ = 0;
  use_ = 0;
  toll_ = false;
  unpaved_ = false;
  tunnel_ = false;
  bridge_ = false;
  roundabout_ = false;
  internal_intersection_ = false;
  drive_on_right_ = true;
  end_node_index_ = 0u;
  sign_ = NULL;
  travel_mode_ = 0;
  vehicle_type_ = 0;
  pedestrian_type_ = 0;
  bicycle_type_ = 0;
  transit_type_ = 0;
  transit_route_info_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
  way_id_ = GOOGLE_ULONGLONG(0);
  weighted_grade_ = 0;
  max_upward_grade_ = 0;
  max_downward_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripPath_Edge::~TripPath_Edge() {
  SharedDtor();
}

void TripPath_Edge::SharedDtor() {
  if (this != default_instance_) {
    delete sign_;
    delete transit_route_info_;
  }
}

void TripPath_Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripPath_Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_Edge_descriptor_;
}

const TripPath_Edge& TripPath_Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trippath_2eproto();
  return *default_instance_;
}

TripPath_Edge* TripPath_Edge::default_instance_ = NULL;

TripPath_Edge* TripPath_Edge::New() const {
  return new TripPath_Edge;
}

void TripPath_Edge::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    length_ = 0;
    speed_ = 0;
    road_class_ = 0;
    begin_heading_ = 0u;
    end_heading_ = 0u;
    begin_shape_index_ = 0u;
    end_shape_index_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    traversability_ = 0;
    use_ = 0;
    toll_ = false;
    unpaved_ = false;
    tunnel_ = false;
    bridge_ = false;
    roundabout_ = false;
    internal_intersection_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    drive_on_right_ = true;
    end_node_index_ = 0u;
    if (has_sign()) {
      if (sign_ != NULL) sign_->::valhalla::odin::TripPath_Sign::Clear();
    }
    travel_mode_ = 0;
    vehicle_type_ = 0;
    pedestrian_type_ = 0;
    bicycle_type_ = 0;
    transit_type_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_transit_route_info()) {
      if (transit_route_info_ != NULL) transit_route_info_->::valhalla::odin::TripPath_TransitRouteInfo::Clear();
    }
    id_ = GOOGLE_ULONGLONG(0);
    way_id_ = GOOGLE_ULONGLONG(0);
    weighted_grade_ = 0;
    max_upward_grade_ = 0;
    max_downward_grade_ = 0;
  }
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripPath_Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectTag(21)) goto parse_length;
        break;
      }

      // optional float length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_speed;
        break;
      }

      // optional float speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_road_class;
        break;
      }

      // optional .valhalla.odin.TripPath.RoadClass road_class = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_road_class:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_RoadClass_IsValid(value)) {
            set_road_class(static_cast< ::valhalla::odin::TripPath_RoadClass >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_begin_heading;
        break;
      }

      // optional uint32 begin_heading = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_heading_)));
          set_has_begin_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_heading;
        break;
      }

      // optional uint32 end_heading = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_heading_)));
          set_has_end_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_begin_shape_index;
        break;
      }

      // optional uint32 begin_shape_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_shape_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_shape_index_)));
          set_has_begin_shape_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_end_shape_index;
        break;
      }

      // optional uint32 end_shape_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_shape_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_shape_index_)));
          set_has_end_shape_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_traversability;
        break;
      }

      // optional .valhalla.odin.TripPath.Traversability traversability = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traversability:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_Traversability_IsValid(value)) {
            set_traversability(static_cast< ::valhalla::odin::TripPath_Traversability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_use;
        break;
      }

      // optional .valhalla.odin.TripPath.Use use = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_Use_IsValid(value)) {
            set_use(static_cast< ::valhalla::odin::TripPath_Use >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_toll;
        break;
      }

      // optional bool toll = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &toll_)));
          set_has_toll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_unpaved;
        break;
      }

      // optional bool unpaved = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unpaved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unpaved_)));
          set_has_unpaved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tunnel;
        break;
      }

      // optional bool tunnel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tunnel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tunnel_)));
          set_has_tunnel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bridge;
        break;
      }

      // optional bool bridge = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bridge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bridge_)));
          set_has_bridge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_roundabout;
        break;
      }

      // optional bool roundabout = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundabout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &roundabout_)));
          set_has_roundabout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_internal_intersection;
        break;
      }

      // optional bool internal_intersection = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_internal_intersection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &internal_intersection_)));
          set_has_internal_intersection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_drive_on_right;
        break;
      }

      // optional bool drive_on_right = 17 [default = true];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drive_on_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drive_on_right_)));
          set_has_drive_on_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_end_node_index;
        break;
      }

      // optional uint32 end_node_index = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_node_index_)));
          set_has_end_node_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_sign;
        break;
      }

      // optional .valhalla.odin.TripPath.Sign sign = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_travel_mode;
        break;
      }

      // optional .valhalla.odin.TripPath.TravelMode travel_mode = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_travel_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_TravelMode_IsValid(value)) {
            set_travel_mode(static_cast< ::valhalla::odin::TripPath_TravelMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_vehicle_type;
        break;
      }

      // optional .valhalla.odin.TripPath.VehicleType vehicle_type = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vehicle_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_VehicleType_IsValid(value)) {
            set_vehicle_type(static_cast< ::valhalla::odin::TripPath_VehicleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_pedestrian_type;
        break;
      }

      // optional .valhalla.odin.TripPath.PedestrianType pedestrian_type = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pedestrian_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_PedestrianType_IsValid(value)) {
            set_pedestrian_type(static_cast< ::valhalla::odin::TripPath_PedestrianType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_bicycle_type;
        break;
      }

      // optional .valhalla.odin.TripPath.BicycleType bicycle_type = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bicycle_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_BicycleType_IsValid(value)) {
            set_bicycle_type(static_cast< ::valhalla::odin::TripPath_BicycleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_transit_type;
        break;
      }

      // optional .valhalla.odin.TripPath.TransitType transit_type = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transit_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_TransitType_IsValid(value)) {
            set_transit_type(static_cast< ::valhalla::odin::TripPath_TransitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_transit_route_info;
        break;
      }

      // optional .valhalla.odin.TripPath.TransitRouteInfo transit_route_info = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transit_route_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transit_route_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_id;
        break;
      }

      // optional uint64 id = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_way_id;
        break;
      }

      // optional uint64 way_id = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_way_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &way_id_)));
          set_has_way_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_weighted_grade;
        break;
      }

      // optional float weighted_grade = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weighted_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weighted_grade_)));
          set_has_weighted_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_max_upward_grade;
        break;
      }

      // optional int32 max_upward_grade = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_upward_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_upward_grade_)));
          set_has_max_upward_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_max_downward_grade;
        break;
      }

      // optional int32 max_downward_grade = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_downward_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_downward_grade_)));
          set_has_max_downward_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripPath_Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

  // optional float length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->length(), output);
  }

  // optional float speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  // optional .valhalla.odin.TripPath.RoadClass road_class = 4;
  if (has_road_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->road_class(), output);
  }

  // optional uint32 begin_heading = 5;
  if (has_begin_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->begin_heading(), output);
  }

  // optional uint32 end_heading = 6;
  if (has_end_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->end_heading(), output);
  }

  // optional uint32 begin_shape_index = 7;
  if (has_begin_shape_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->begin_shape_index(), output);
  }

  // optional uint32 end_shape_index = 8;
  if (has_end_shape_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->end_shape_index(), output);
  }

  // optional .valhalla.odin.TripPath.Traversability traversability = 9;
  if (has_traversability()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->traversability(), output);
  }

  // optional .valhalla.odin.TripPath.Use use = 10;
  if (has_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->use(), output);
  }

  // optional bool toll = 11;
  if (has_toll()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->toll(), output);
  }

  // optional bool unpaved = 12;
  if (has_unpaved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->unpaved(), output);
  }

  // optional bool tunnel = 13;
  if (has_tunnel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->tunnel(), output);
  }

  // optional bool bridge = 14;
  if (has_bridge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->bridge(), output);
  }

  // optional bool roundabout = 15;
  if (has_roundabout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->roundabout(), output);
  }

  // optional bool internal_intersection = 16;
  if (has_internal_intersection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->internal_intersection(), output);
  }

  // optional bool drive_on_right = 17 [default = true];
  if (has_drive_on_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->drive_on_right(), output);
  }

  // optional uint32 end_node_index = 18;
  if (has_end_node_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->end_node_index(), output);
  }

  // optional .valhalla.odin.TripPath.Sign sign = 19;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->sign(), output);
  }

  // optional .valhalla.odin.TripPath.TravelMode travel_mode = 20;
  if (has_travel_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->travel_mode(), output);
  }

  // optional .valhalla.odin.TripPath.VehicleType vehicle_type = 21;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->vehicle_type(), output);
  }

  // optional .valhalla.odin.TripPath.PedestrianType pedestrian_type = 22;
  if (has_pedestrian_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->pedestrian_type(), output);
  }

  // optional .valhalla.odin.TripPath.BicycleType bicycle_type = 23;
  if (has_bicycle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->bicycle_type(), output);
  }

  // optional .valhalla.odin.TripPath.TransitType transit_type = 24;
  if (has_transit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->transit_type(), output);
  }

  // optional .valhalla.odin.TripPath.TransitRouteInfo transit_route_info = 25;
  if (has_transit_route_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->transit_route_info(), output);
  }

  // optional uint64 id = 26;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->id(), output);
  }

  // optional uint64 way_id = 27;
  if (has_way_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->way_id(), output);
  }

  // optional float weighted_grade = 28;
  if (has_weighted_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->weighted_grade(), output);
  }

  // optional int32 max_upward_grade = 29;
  if (has_max_upward_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->max_upward_grade(), output);
  }

  // optional int32 max_downward_grade = 30;
  if (has_max_downward_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->max_downward_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripPath_Edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }

  // optional float length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->length(), target);
  }

  // optional float speed = 3;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  // optional .valhalla.odin.TripPath.RoadClass road_class = 4;
  if (has_road_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->road_class(), target);
  }

  // optional uint32 begin_heading = 5;
  if (has_begin_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->begin_heading(), target);
  }

  // optional uint32 end_heading = 6;
  if (has_end_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->end_heading(), target);
  }

  // optional uint32 begin_shape_index = 7;
  if (has_begin_shape_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->begin_shape_index(), target);
  }

  // optional uint32 end_shape_index = 8;
  if (has_end_shape_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->end_shape_index(), target);
  }

  // optional .valhalla.odin.TripPath.Traversability traversability = 9;
  if (has_traversability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->traversability(), target);
  }

  // optional .valhalla.odin.TripPath.Use use = 10;
  if (has_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->use(), target);
  }

  // optional bool toll = 11;
  if (has_toll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->toll(), target);
  }

  // optional bool unpaved = 12;
  if (has_unpaved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->unpaved(), target);
  }

  // optional bool tunnel = 13;
  if (has_tunnel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->tunnel(), target);
  }

  // optional bool bridge = 14;
  if (has_bridge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->bridge(), target);
  }

  // optional bool roundabout = 15;
  if (has_roundabout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->roundabout(), target);
  }

  // optional bool internal_intersection = 16;
  if (has_internal_intersection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->internal_intersection(), target);
  }

  // optional bool drive_on_right = 17 [default = true];
  if (has_drive_on_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->drive_on_right(), target);
  }

  // optional uint32 end_node_index = 18;
  if (has_end_node_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->end_node_index(), target);
  }

  // optional .valhalla.odin.TripPath.Sign sign = 19;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->sign(), target);
  }

  // optional .valhalla.odin.TripPath.TravelMode travel_mode = 20;
  if (has_travel_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->travel_mode(), target);
  }

  // optional .valhalla.odin.TripPath.VehicleType vehicle_type = 21;
  if (has_vehicle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->vehicle_type(), target);
  }

  // optional .valhalla.odin.TripPath.PedestrianType pedestrian_type = 22;
  if (has_pedestrian_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->pedestrian_type(), target);
  }

  // optional .valhalla.odin.TripPath.BicycleType bicycle_type = 23;
  if (has_bicycle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->bicycle_type(), target);
  }

  // optional .valhalla.odin.TripPath.TransitType transit_type = 24;
  if (has_transit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->transit_type(), target);
  }

  // optional .valhalla.odin.TripPath.TransitRouteInfo transit_route_info = 25;
  if (has_transit_route_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->transit_route_info(), target);
  }

  // optional uint64 id = 26;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->id(), target);
  }

  // optional uint64 way_id = 27;
  if (has_way_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->way_id(), target);
  }

  // optional float weighted_grade = 28;
  if (has_weighted_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->weighted_grade(), target);
  }

  // optional int32 max_upward_grade = 29;
  if (has_max_upward_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->max_upward_grade(), target);
  }

  // optional int32 max_downward_grade = 30;
  if (has_max_downward_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->max_downward_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripPath_Edge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float length = 2;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // optional float speed = 3;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional .valhalla.odin.TripPath.RoadClass road_class = 4;
    if (has_road_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->road_class());
    }

    // optional uint32 begin_heading = 5;
    if (has_begin_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_heading());
    }

    // optional uint32 end_heading = 6;
    if (has_end_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_heading());
    }

    // optional uint32 begin_shape_index = 7;
    if (has_begin_shape_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_shape_index());
    }

    // optional uint32 end_shape_index = 8;
    if (has_end_shape_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_shape_index());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .valhalla.odin.TripPath.Traversability traversability = 9;
    if (has_traversability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->traversability());
    }

    // optional .valhalla.odin.TripPath.Use use = 10;
    if (has_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->use());
    }

    // optional bool toll = 11;
    if (has_toll()) {
      total_size += 1 + 1;
    }

    // optional bool unpaved = 12;
    if (has_unpaved()) {
      total_size += 1 + 1;
    }

    // optional bool tunnel = 13;
    if (has_tunnel()) {
      total_size += 1 + 1;
    }

    // optional bool bridge = 14;
    if (has_bridge()) {
      total_size += 1 + 1;
    }

    // optional bool roundabout = 15;
    if (has_roundabout()) {
      total_size += 1 + 1;
    }

    // optional bool internal_intersection = 16;
    if (has_internal_intersection()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool drive_on_right = 17 [default = true];
    if (has_drive_on_right()) {
      total_size += 2 + 1;
    }

    // optional uint32 end_node_index = 18;
    if (has_end_node_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_node_index());
    }

    // optional .valhalla.odin.TripPath.Sign sign = 19;
    if (has_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign());
    }

    // optional .valhalla.odin.TripPath.TravelMode travel_mode = 20;
    if (has_travel_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->travel_mode());
    }

    // optional .valhalla.odin.TripPath.VehicleType vehicle_type = 21;
    if (has_vehicle_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehicle_type());
    }

    // optional .valhalla.odin.TripPath.PedestrianType pedestrian_type = 22;
    if (has_pedestrian_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pedestrian_type());
    }

    // optional .valhalla.odin.TripPath.BicycleType bicycle_type = 23;
    if (has_bicycle_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bicycle_type());
    }

    // optional .valhalla.odin.TripPath.TransitType transit_type = 24;
    if (has_transit_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transit_type());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .valhalla.odin.TripPath.TransitRouteInfo transit_route_info = 25;
    if (has_transit_route_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transit_route_info());
    }

    // optional uint64 id = 26;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 way_id = 27;
    if (has_way_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->way_id());
    }

    // optional float weighted_grade = 28;
    if (has_weighted_grade()) {
      total_size += 2 + 4;
    }

    // optional int32 max_upward_grade = 29;
    if (has_max_upward_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_upward_grade());
    }

    // optional int32 max_downward_grade = 30;
    if (has_max_downward_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_downward_grade());
    }

  }
  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripPath_Edge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripPath_Edge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripPath_Edge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripPath_Edge::MergeFrom(const TripPath_Edge& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_road_class()) {
      set_road_class(from.road_class());
    }
    if (from.has_begin_heading()) {
      set_begin_heading(from.begin_heading());
    }
    if (from.has_end_heading()) {
      set_end_heading(from.end_heading());
    }
    if (from.has_begin_shape_index()) {
      set_begin_shape_index(from.begin_shape_index());
    }
    if (from.has_end_shape_index()) {
      set_end_shape_index(from.end_shape_index());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_traversability()) {
      set_traversability(from.traversability());
    }
    if (from.has_use()) {
      set_use(from.use());
    }
    if (from.has_toll()) {
      set_toll(from.toll());
    }
    if (from.has_unpaved()) {
      set_unpaved(from.unpaved());
    }
    if (from.has_tunnel()) {
      set_tunnel(from.tunnel());
    }
    if (from.has_bridge()) {
      set_bridge(from.bridge());
    }
    if (from.has_roundabout()) {
      set_roundabout(from.roundabout());
    }
    if (from.has_internal_intersection()) {
      set_internal_intersection(from.internal_intersection());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_drive_on_right()) {
      set_drive_on_right(from.drive_on_right());
    }
    if (from.has_end_node_index()) {
      set_end_node_index(from.end_node_index());
    }
    if (from.has_sign()) {
      mutable_sign()->::valhalla::odin::TripPath_Sign::MergeFrom(from.sign());
    }
    if (from.has_travel_mode()) {
      set_travel_mode(from.travel_mode());
    }
    if (from.has_vehicle_type()) {
      set_vehicle_type(from.vehicle_type());
    }
    if (from.has_pedestrian_type()) {
      set_pedestrian_type(from.pedestrian_type());
    }
    if (from.has_bicycle_type()) {
      set_bicycle_type(from.bicycle_type());
    }
    if (from.has_transit_type()) {
      set_transit_type(from.transit_type());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_transit_route_info()) {
      mutable_transit_route_info()->::valhalla::odin::TripPath_TransitRouteInfo::MergeFrom(from.transit_route_info());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_way_id()) {
      set_way_id(from.way_id());
    }
    if (from.has_weighted_grade()) {
      set_weighted_grade(from.weighted_grade());
    }
    if (from.has_max_upward_grade()) {
      set_max_upward_grade(from.max_upward_grade());
    }
    if (from.has_max_downward_grade()) {
      set_max_downward_grade(from.max_downward_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripPath_Edge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripPath_Edge::CopyFrom(const TripPath_Edge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripPath_Edge::IsInitialized() const {

  return true;
}

void TripPath_Edge::Swap(TripPath_Edge* other) {
  if (other != this) {
    name_.Swap(&other->name_);
    std::swap(length_, other->length_);
    std::swap(speed_, other->speed_);
    std::swap(road_class_, other->road_class_);
    std::swap(begin_heading_, other->begin_heading_);
    std::swap(end_heading_, other->end_heading_);
    std::swap(begin_shape_index_, other->begin_shape_index_);
    std::swap(end_shape_index_, other->end_shape_index_);
    std::swap(traversability_, other->traversability_);
    std::swap(use_, other->use_);
    std::swap(toll_, other->toll_);
    std::swap(unpaved_, other->unpaved_);
    std::swap(tunnel_, other->tunnel_);
    std::swap(bridge_, other->bridge_);
    std::swap(roundabout_, other->roundabout_);
    std::swap(internal_intersection_, other->internal_intersection_);
    std::swap(drive_on_right_, other->drive_on_right_);
    std::swap(end_node_index_, other->end_node_index_);
    std::swap(sign_, other->sign_);
    std::swap(travel_mode_, other->travel_mode_);
    std::swap(vehicle_type_, other->vehicle_type_);
    std::swap(pedestrian_type_, other->pedestrian_type_);
    std::swap(bicycle_type_, other->bicycle_type_);
    std::swap(transit_type_, other->transit_type_);
    std::swap(transit_route_info_, other->transit_route_info_);
    std::swap(id_, other->id_);
    std::swap(way_id_, other->way_id_);
    std::swap(weighted_grade_, other->weighted_grade_);
    std::swap(max_upward_grade_, other->max_upward_grade_);
    std::swap(max_downward_grade_, other->max_downward_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripPath_Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripPath_Edge_descriptor_;
  metadata.reflection = TripPath_Edge_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripPath_IntersectingEdge::kBeginHeadingFieldNumber;
const int TripPath_IntersectingEdge::kPrevNameConsistencyFieldNumber;
const int TripPath_IntersectingEdge::kCurrNameConsistencyFieldNumber;
const int TripPath_IntersectingEdge::kDriveabilityFieldNumber;
const int TripPath_IntersectingEdge::kCyclabilityFieldNumber;
const int TripPath_IntersectingEdge::kWalkabilityFieldNumber;
#endif  // !_MSC_VER

TripPath_IntersectingEdge::TripPath_IntersectingEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripPath_IntersectingEdge::InitAsDefaultInstance() {
}

TripPath_IntersectingEdge::TripPath_IntersectingEdge(const TripPath_IntersectingEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripPath_IntersectingEdge::SharedCtor() {
  _cached_size_ = 0;
  begin_heading_ = 0u;
  prev_name_consistency_ = false;
  curr_name_consistency_ = false;
  driveability_ = 0;
  cyclability_ = 0;
  walkability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripPath_IntersectingEdge::~TripPath_IntersectingEdge() {
  SharedDtor();
}

void TripPath_IntersectingEdge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TripPath_IntersectingEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripPath_IntersectingEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_IntersectingEdge_descriptor_;
}

const TripPath_IntersectingEdge& TripPath_IntersectingEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trippath_2eproto();
  return *default_instance_;
}

TripPath_IntersectingEdge* TripPath_IntersectingEdge::default_instance_ = NULL;

TripPath_IntersectingEdge* TripPath_IntersectingEdge::New() const {
  return new TripPath_IntersectingEdge;
}

void TripPath_IntersectingEdge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_heading_ = 0u;
    prev_name_consistency_ = false;
    curr_name_consistency_ = false;
    driveability_ = 0;
    cyclability_ = 0;
    walkability_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripPath_IntersectingEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 begin_heading = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_heading_)));
          set_has_begin_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prev_name_consistency;
        break;
      }

      // optional bool prev_name_consistency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_name_consistency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prev_name_consistency_)));
          set_has_prev_name_consistency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curr_name_consistency;
        break;
      }

      // optional bool curr_name_consistency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curr_name_consistency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &curr_name_consistency_)));
          set_has_curr_name_consistency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_driveability;
        break;
      }

      // optional .valhalla.odin.TripPath.Traversability driveability = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_driveability:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_Traversability_IsValid(value)) {
            set_driveability(static_cast< ::valhalla::odin::TripPath_Traversability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cyclability;
        break;
      }

      // optional .valhalla.odin.TripPath.Traversability cyclability = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cyclability:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_Traversability_IsValid(value)) {
            set_cyclability(static_cast< ::valhalla::odin::TripPath_Traversability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_walkability;
        break;
      }

      // optional .valhalla.odin.TripPath.Traversability walkability = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_walkability:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_Traversability_IsValid(value)) {
            set_walkability(static_cast< ::valhalla::odin::TripPath_Traversability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripPath_IntersectingEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 begin_heading = 1;
  if (has_begin_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->begin_heading(), output);
  }

  // optional bool prev_name_consistency = 2;
  if (has_prev_name_consistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->prev_name_consistency(), output);
  }

  // optional bool curr_name_consistency = 3;
  if (has_curr_name_consistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->curr_name_consistency(), output);
  }

  // optional .valhalla.odin.TripPath.Traversability driveability = 4;
  if (has_driveability()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->driveability(), output);
  }

  // optional .valhalla.odin.TripPath.Traversability cyclability = 5;
  if (has_cyclability()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->cyclability(), output);
  }

  // optional .valhalla.odin.TripPath.Traversability walkability = 6;
  if (has_walkability()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->walkability(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripPath_IntersectingEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 begin_heading = 1;
  if (has_begin_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->begin_heading(), target);
  }

  // optional bool prev_name_consistency = 2;
  if (has_prev_name_consistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->prev_name_consistency(), target);
  }

  // optional bool curr_name_consistency = 3;
  if (has_curr_name_consistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->curr_name_consistency(), target);
  }

  // optional .valhalla.odin.TripPath.Traversability driveability = 4;
  if (has_driveability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->driveability(), target);
  }

  // optional .valhalla.odin.TripPath.Traversability cyclability = 5;
  if (has_cyclability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->cyclability(), target);
  }

  // optional .valhalla.odin.TripPath.Traversability walkability = 6;
  if (has_walkability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->walkability(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripPath_IntersectingEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 begin_heading = 1;
    if (has_begin_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_heading());
    }

    // optional bool prev_name_consistency = 2;
    if (has_prev_name_consistency()) {
      total_size += 1 + 1;
    }

    // optional bool curr_name_consistency = 3;
    if (has_curr_name_consistency()) {
      total_size += 1 + 1;
    }

    // optional .valhalla.odin.TripPath.Traversability driveability = 4;
    if (has_driveability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driveability());
    }

    // optional .valhalla.odin.TripPath.Traversability cyclability = 5;
    if (has_cyclability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cyclability());
    }

    // optional .valhalla.odin.TripPath.Traversability walkability = 6;
    if (has_walkability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->walkability());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripPath_IntersectingEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripPath_IntersectingEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripPath_IntersectingEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripPath_IntersectingEdge::MergeFrom(const TripPath_IntersectingEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin_heading()) {
      set_begin_heading(from.begin_heading());
    }
    if (from.has_prev_name_consistency()) {
      set_prev_name_consistency(from.prev_name_consistency());
    }
    if (from.has_curr_name_consistency()) {
      set_curr_name_consistency(from.curr_name_consistency());
    }
    if (from.has_driveability()) {
      set_driveability(from.driveability());
    }
    if (from.has_cyclability()) {
      set_cyclability(from.cyclability());
    }
    if (from.has_walkability()) {
      set_walkability(from.walkability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripPath_IntersectingEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripPath_IntersectingEdge::CopyFrom(const TripPath_IntersectingEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripPath_IntersectingEdge::IsInitialized() const {

  return true;
}

void TripPath_IntersectingEdge::Swap(TripPath_IntersectingEdge* other) {
  if (other != this) {
    std::swap(begin_heading_, other->begin_heading_);
    std::swap(prev_name_consistency_, other->prev_name_consistency_);
    std::swap(curr_name_consistency_, other->curr_name_consistency_);
    std::swap(driveability_, other->driveability_);
    std::swap(cyclability_, other->cyclability_);
    std::swap(walkability_, other->walkability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripPath_IntersectingEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripPath_IntersectingEdge_descriptor_;
  metadata.reflection = TripPath_IntersectingEdge_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* TripPath_TransitStopInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_TransitStopInfo_Type_descriptor_;
}
bool TripPath_TransitStopInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_TransitStopInfo_Type TripPath_TransitStopInfo::kStop;
const TripPath_TransitStopInfo_Type TripPath_TransitStopInfo::kStation;
const TripPath_TransitStopInfo_Type TripPath_TransitStopInfo::Type_MIN;
const TripPath_TransitStopInfo_Type TripPath_TransitStopInfo::Type_MAX;
const int TripPath_TransitStopInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TripPath_TransitStopInfo::kTypeFieldNumber;
const int TripPath_TransitStopInfo::kOnestopIdFieldNumber;
const int TripPath_TransitStopInfo::kNameFieldNumber;
const int TripPath_TransitStopInfo::kArrivalDateTimeFieldNumber;
const int TripPath_TransitStopInfo::kDepartureDateTimeFieldNumber;
const int TripPath_TransitStopInfo::kIsParentStopFieldNumber;
const int TripPath_TransitStopInfo::kAssumedScheduleFieldNumber;
const int TripPath_TransitStopInfo::kLlFieldNumber;
#endif  // !_MSC_VER

TripPath_TransitStopInfo::TripPath_TransitStopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripPath_TransitStopInfo::InitAsDefaultInstance() {
  ll_ = const_cast< ::valhalla::odin::TripPath_LatLng*>(&::valhalla::odin::TripPath_LatLng::default_instance());
}

TripPath_TransitStopInfo::TripPath_TransitStopInfo(const TripPath_TransitStopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripPath_TransitStopInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arrival_date_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  departure_date_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_parent_stop_ = false;
  assumed_schedule_ = false;
  ll_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripPath_TransitStopInfo::~TripPath_TransitStopInfo() {
  SharedDtor();
}

void TripPath_TransitStopInfo::SharedDtor() {
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete onestop_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (arrival_date_time_ != &::google::protobuf::internal::kEmptyString) {
    delete arrival_date_time_;
  }
  if (departure_date_time_ != &::google::protobuf::internal::kEmptyString) {
    delete departure_date_time_;
  }
  if (this != default_instance_) {
    delete ll_;
  }
}

void TripPath_TransitStopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripPath_TransitStopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_TransitStopInfo_descriptor_;
}

const TripPath_TransitStopInfo& TripPath_TransitStopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trippath_2eproto();
  return *default_instance_;
}

TripPath_TransitStopInfo* TripPath_TransitStopInfo::default_instance_ = NULL;

TripPath_TransitStopInfo* TripPath_TransitStopInfo::New() const {
  return new TripPath_TransitStopInfo;
}

void TripPath_TransitStopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_onestop_id()) {
      if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        onestop_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_arrival_date_time()) {
      if (arrival_date_time_ != &::google::protobuf::internal::kEmptyString) {
        arrival_date_time_->clear();
      }
    }
    if (has_departure_date_time()) {
      if (departure_date_time_ != &::google::protobuf::internal::kEmptyString) {
        departure_date_time_->clear();
      }
    }
    is_parent_stop_ = false;
    assumed_schedule_ = false;
    if (has_ll()) {
      if (ll_ != NULL) ll_->::valhalla::odin::TripPath_LatLng::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripPath_TransitStopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.odin.TripPath.TransitStopInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_TransitStopInfo_Type_IsValid(value)) {
            set_type(static_cast< ::valhalla::odin::TripPath_TransitStopInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_onestop_id;
        break;
      }

      // optional string onestop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onestop_id().data(), this->onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arrival_date_time;
        break;
      }

      // optional string arrival_date_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arrival_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arrival_date_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arrival_date_time().data(), this->arrival_date_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_departure_date_time;
        break;
      }

      // optional string departure_date_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_departure_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departure_date_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->departure_date_time().data(), this->departure_date_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_parent_stop;
        break;
      }

      // optional bool is_parent_stop = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_parent_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_parent_stop_)));
          set_has_is_parent_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_assumed_schedule;
        break;
      }

      // optional bool assumed_schedule = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assumed_schedule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assumed_schedule_)));
          set_has_assumed_schedule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ll;
        break;
      }

      // optional .valhalla.odin.TripPath.LatLng ll = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripPath_TransitStopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.odin.TripPath.TransitStopInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string onestop_id = 2;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->onestop_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string arrival_date_time = 4;
  if (has_arrival_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arrival_date_time().data(), this->arrival_date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->arrival_date_time(), output);
  }

  // optional string departure_date_time = 5;
  if (has_departure_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->departure_date_time().data(), this->departure_date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->departure_date_time(), output);
  }

  // optional bool is_parent_stop = 6;
  if (has_is_parent_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_parent_stop(), output);
  }

  // optional bool assumed_schedule = 7;
  if (has_assumed_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->assumed_schedule(), output);
  }

  // optional .valhalla.odin.TripPath.LatLng ll = 8;
  if (has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ll(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripPath_TransitStopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .valhalla.odin.TripPath.TransitStopInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string onestop_id = 2;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->onestop_id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string arrival_date_time = 4;
  if (has_arrival_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arrival_date_time().data(), this->arrival_date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->arrival_date_time(), target);
  }

  // optional string departure_date_time = 5;
  if (has_departure_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->departure_date_time().data(), this->departure_date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->departure_date_time(), target);
  }

  // optional bool is_parent_stop = 6;
  if (has_is_parent_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_parent_stop(), target);
  }

  // optional bool assumed_schedule = 7;
  if (has_assumed_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->assumed_schedule(), target);
  }

  // optional .valhalla.odin.TripPath.LatLng ll = 8;
  if (has_ll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ll(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripPath_TransitStopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.odin.TripPath.TransitStopInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string onestop_id = 2;
    if (has_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string arrival_date_time = 4;
    if (has_arrival_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arrival_date_time());
    }

    // optional string departure_date_time = 5;
    if (has_departure_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->departure_date_time());
    }

    // optional bool is_parent_stop = 6;
    if (has_is_parent_stop()) {
      total_size += 1 + 1;
    }

    // optional bool assumed_schedule = 7;
    if (has_assumed_schedule()) {
      total_size += 1 + 1;
    }

    // optional .valhalla.odin.TripPath.LatLng ll = 8;
    if (has_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ll());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripPath_TransitStopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripPath_TransitStopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripPath_TransitStopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripPath_TransitStopInfo::MergeFrom(const TripPath_TransitStopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_onestop_id()) {
      set_onestop_id(from.onestop_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_arrival_date_time()) {
      set_arrival_date_time(from.arrival_date_time());
    }
    if (from.has_departure_date_time()) {
      set_departure_date_time(from.departure_date_time());
    }
    if (from.has_is_parent_stop()) {
      set_is_parent_stop(from.is_parent_stop());
    }
    if (from.has_assumed_schedule()) {
      set_assumed_schedule(from.assumed_schedule());
    }
    if (from.has_ll()) {
      mutable_ll()->::valhalla::odin::TripPath_LatLng::MergeFrom(from.ll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripPath_TransitStopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripPath_TransitStopInfo::CopyFrom(const TripPath_TransitStopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripPath_TransitStopInfo::IsInitialized() const {

  return true;
}

void TripPath_TransitStopInfo::Swap(TripPath_TransitStopInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(onestop_id_, other->onestop_id_);
    std::swap(name_, other->name_);
    std::swap(arrival_date_time_, other->arrival_date_time_);
    std::swap(departure_date_time_, other->departure_date_time_);
    std::swap(is_parent_stop_, other->is_parent_stop_);
    std::swap(assumed_schedule_, other->assumed_schedule_);
    std::swap(ll_, other->ll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripPath_TransitStopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripPath_TransitStopInfo_descriptor_;
  metadata.reflection = TripPath_TransitStopInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* TripPath_Node_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_Node_Type_descriptor_;
}
bool TripPath_Node_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripPath_Node_Type TripPath_Node::kStreetIntersection;
const TripPath_Node_Type TripPath_Node::kGate;
const TripPath_Node_Type TripPath_Node::kBollard;
const TripPath_Node_Type TripPath_Node::kTollBooth;
const TripPath_Node_Type TripPath_Node::kMultiUseTransitStop;
const TripPath_Node_Type TripPath_Node::kBikeShare;
const TripPath_Node_Type TripPath_Node::kParking;
const TripPath_Node_Type TripPath_Node::kMotorwayJunction;
const TripPath_Node_Type TripPath_Node::kBorderControl;
const TripPath_Node_Type TripPath_Node::Type_MIN;
const TripPath_Node_Type TripPath_Node::Type_MAX;
const int TripPath_Node::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TripPath_Node::kEdgeFieldNumber;
const int TripPath_Node::kIntersectingEdgeFieldNumber;
const int TripPath_Node::kElapsedTimeFieldNumber;
const int TripPath_Node::kAdminIndexFieldNumber;
const int TripPath_Node::kTypeFieldNumber;
const int TripPath_Node::kForkFieldNumber;
const int TripPath_Node::kTransitStopInfoFieldNumber;
#endif  // !_MSC_VER

TripPath_Node::TripPath_Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripPath_Node::InitAsDefaultInstance() {
  edge_ = const_cast< ::valhalla::odin::TripPath_Edge*>(&::valhalla::odin::TripPath_Edge::default_instance());
  transit_stop_info_ = const_cast< ::valhalla::odin::TripPath_TransitStopInfo*>(&::valhalla::odin::TripPath_TransitStopInfo::default_instance());
}

TripPath_Node::TripPath_Node(const TripPath_Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripPath_Node::SharedCtor() {
  _cached_size_ = 0;
  edge_ = NULL;
  elapsed_time_ = 0u;
  admin_index_ = 0u;
  type_ = 0;
  fork_ = false;
  transit_stop_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripPath_Node::~TripPath_Node() {
  SharedDtor();
}

void TripPath_Node::SharedDtor() {
  if (this != default_instance_) {
    delete edge_;
    delete transit_stop_info_;
  }
}

void TripPath_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripPath_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_Node_descriptor_;
}

const TripPath_Node& TripPath_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trippath_2eproto();
  return *default_instance_;
}

TripPath_Node* TripPath_Node::default_instance_ = NULL;

TripPath_Node* TripPath_Node::New() const {
  return new TripPath_Node;
}

void TripPath_Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_edge()) {
      if (edge_ != NULL) edge_->::valhalla::odin::TripPath_Edge::Clear();
    }
    elapsed_time_ = 0u;
    admin_index_ = 0u;
    type_ = 0;
    fork_ = false;
    if (has_transit_stop_info()) {
      if (transit_stop_info_ != NULL) transit_stop_info_->::valhalla::odin::TripPath_TransitStopInfo::Clear();
    }
  }
  intersecting_edge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripPath_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.odin.TripPath.Edge edge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_intersecting_edge;
        break;
      }

      // repeated .valhalla.odin.TripPath.IntersectingEdge intersecting_edge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intersecting_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intersecting_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_intersecting_edge;
        if (input->ExpectTag(24)) goto parse_elapsed_time;
        break;
      }

      // optional uint32 elapsed_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elapsed_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elapsed_time_)));
          set_has_elapsed_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_admin_index;
        break;
      }

      // optional uint32 admin_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admin_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admin_index_)));
          set_has_admin_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .valhalla.odin.TripPath.Node.Type type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripPath_Node_Type_IsValid(value)) {
            set_type(static_cast< ::valhalla::odin::TripPath_Node_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fork;
        break;
      }

      // optional bool fork = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fork:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fork_)));
          set_has_fork();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_transit_stop_info;
        break;
      }

      // optional .valhalla.odin.TripPath.TransitStopInfo transit_stop_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transit_stop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transit_stop_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripPath_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.odin.TripPath.Edge edge = 1;
  if (has_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->edge(), output);
  }

  // repeated .valhalla.odin.TripPath.IntersectingEdge intersecting_edge = 2;
  for (int i = 0; i < this->intersecting_edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->intersecting_edge(i), output);
  }

  // optional uint32 elapsed_time = 3;
  if (has_elapsed_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->elapsed_time(), output);
  }

  // optional uint32 admin_index = 4;
  if (has_admin_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->admin_index(), output);
  }

  // optional .valhalla.odin.TripPath.Node.Type type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional bool fork = 6;
  if (has_fork()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fork(), output);
  }

  // optional .valhalla.odin.TripPath.TransitStopInfo transit_stop_info = 7;
  if (has_transit_stop_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->transit_stop_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripPath_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .valhalla.odin.TripPath.Edge edge = 1;
  if (has_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->edge(), target);
  }

  // repeated .valhalla.odin.TripPath.IntersectingEdge intersecting_edge = 2;
  for (int i = 0; i < this->intersecting_edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->intersecting_edge(i), target);
  }

  // optional uint32 elapsed_time = 3;
  if (has_elapsed_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->elapsed_time(), target);
  }

  // optional uint32 admin_index = 4;
  if (has_admin_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->admin_index(), target);
  }

  // optional .valhalla.odin.TripPath.Node.Type type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional bool fork = 6;
  if (has_fork()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fork(), target);
  }

  // optional .valhalla.odin.TripPath.TransitStopInfo transit_stop_info = 7;
  if (has_transit_stop_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->transit_stop_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripPath_Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.odin.TripPath.Edge edge = 1;
    if (has_edge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edge());
    }

    // optional uint32 elapsed_time = 3;
    if (has_elapsed_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elapsed_time());
    }

    // optional uint32 admin_index = 4;
    if (has_admin_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->admin_index());
    }

    // optional .valhalla.odin.TripPath.Node.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool fork = 6;
    if (has_fork()) {
      total_size += 1 + 1;
    }

    // optional .valhalla.odin.TripPath.TransitStopInfo transit_stop_info = 7;
    if (has_transit_stop_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transit_stop_info());
    }

  }
  // repeated .valhalla.odin.TripPath.IntersectingEdge intersecting_edge = 2;
  total_size += 1 * this->intersecting_edge_size();
  for (int i = 0; i < this->intersecting_edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intersecting_edge(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripPath_Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripPath_Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripPath_Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripPath_Node::MergeFrom(const TripPath_Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  intersecting_edge_.MergeFrom(from.intersecting_edge_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_edge()) {
      mutable_edge()->::valhalla::odin::TripPath_Edge::MergeFrom(from.edge());
    }
    if (from.has_elapsed_time()) {
      set_elapsed_time(from.elapsed_time());
    }
    if (from.has_admin_index()) {
      set_admin_index(from.admin_index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_fork()) {
      set_fork(from.fork());
    }
    if (from.has_transit_stop_info()) {
      mutable_transit_stop_info()->::valhalla::odin::TripPath_TransitStopInfo::MergeFrom(from.transit_stop_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripPath_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripPath_Node::CopyFrom(const TripPath_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripPath_Node::IsInitialized() const {

  return true;
}

void TripPath_Node::Swap(TripPath_Node* other) {
  if (other != this) {
    std::swap(edge_, other->edge_);
    intersecting_edge_.Swap(&other->intersecting_edge_);
    std::swap(elapsed_time_, other->elapsed_time_);
    std::swap(admin_index_, other->admin_index_);
    std::swap(type_, other->type_);
    std::swap(fork_, other->fork_);
    std::swap(transit_stop_info_, other->transit_stop_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripPath_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripPath_Node_descriptor_;
  metadata.reflection = TripPath_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripPath_Admin::kCountryCodeFieldNumber;
const int TripPath_Admin::kCountryTextFieldNumber;
const int TripPath_Admin::kStateCodeFieldNumber;
const int TripPath_Admin::kStateTextFieldNumber;
#endif  // !_MSC_VER

TripPath_Admin::TripPath_Admin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripPath_Admin::InitAsDefaultInstance() {
}

TripPath_Admin::TripPath_Admin(const TripPath_Admin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripPath_Admin::SharedCtor() {
  _cached_size_ = 0;
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripPath_Admin::~TripPath_Admin() {
  SharedDtor();
}

void TripPath_Admin::SharedDtor() {
  if (country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete country_code_;
  }
  if (country_text_ != &::google::protobuf::internal::kEmptyString) {
    delete country_text_;
  }
  if (state_code_ != &::google::protobuf::internal::kEmptyString) {
    delete state_code_;
  }
  if (state_text_ != &::google::protobuf::internal::kEmptyString) {
    delete state_text_;
  }
  if (this != default_instance_) {
  }
}

void TripPath_Admin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripPath_Admin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_Admin_descriptor_;
}

const TripPath_Admin& TripPath_Admin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trippath_2eproto();
  return *default_instance_;
}

TripPath_Admin* TripPath_Admin::default_instance_ = NULL;

TripPath_Admin* TripPath_Admin::New() const {
  return new TripPath_Admin;
}

void TripPath_Admin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::kEmptyString) {
        country_code_->clear();
      }
    }
    if (has_country_text()) {
      if (country_text_ != &::google::protobuf::internal::kEmptyString) {
        country_text_->clear();
      }
    }
    if (has_state_code()) {
      if (state_code_ != &::google::protobuf::internal::kEmptyString) {
        state_code_->clear();
      }
    }
    if (has_state_text()) {
      if (state_text_ != &::google::protobuf::internal::kEmptyString) {
        state_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripPath_Admin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string country_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_country_text;
        break;
      }

      // optional string country_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country_text().data(), this->country_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_state_code;
        break;
      }

      // optional string state_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state_code().data(), this->state_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_state_text;
        break;
      }

      // optional string state_text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state_text().data(), this->state_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripPath_Admin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string country_code = 1;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->country_code(), output);
  }

  // optional string country_text = 2;
  if (has_country_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_text().data(), this->country_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->country_text(), output);
  }

  // optional string state_code = 3;
  if (has_state_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state_code().data(), this->state_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->state_code(), output);
  }

  // optional string state_text = 4;
  if (has_state_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state_text().data(), this->state_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->state_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripPath_Admin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string country_code = 1;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country_code(), target);
  }

  // optional string country_text = 2;
  if (has_country_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_text().data(), this->country_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country_text(), target);
  }

  // optional string state_code = 3;
  if (has_state_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state_code().data(), this->state_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->state_code(), target);
  }

  // optional string state_text = 4;
  if (has_state_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state_text().data(), this->state_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->state_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripPath_Admin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string country_code = 1;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string country_text = 2;
    if (has_country_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_text());
    }

    // optional string state_code = 3;
    if (has_state_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state_code());
    }

    // optional string state_text = 4;
    if (has_state_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripPath_Admin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripPath_Admin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripPath_Admin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripPath_Admin::MergeFrom(const TripPath_Admin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_country_text()) {
      set_country_text(from.country_text());
    }
    if (from.has_state_code()) {
      set_state_code(from.state_code());
    }
    if (from.has_state_text()) {
      set_state_text(from.state_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripPath_Admin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripPath_Admin::CopyFrom(const TripPath_Admin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripPath_Admin::IsInitialized() const {

  return true;
}

void TripPath_Admin::Swap(TripPath_Admin* other) {
  if (other != this) {
    std::swap(country_code_, other->country_code_);
    std::swap(country_text_, other->country_text_);
    std::swap(state_code_, other->state_code_);
    std::swap(state_text_, other->state_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripPath_Admin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripPath_Admin_descriptor_;
  metadata.reflection = TripPath_Admin_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripPath::kTripIdFieldNumber;
const int TripPath::kLegIdFieldNumber;
const int TripPath::kLegCountFieldNumber;
const int TripPath::kLocationFieldNumber;
const int TripPath::kNodeFieldNumber;
const int TripPath::kAdminFieldNumber;
const int TripPath::kShapeFieldNumber;
const int TripPath::kBboxFieldNumber;
#endif  // !_MSC_VER

TripPath::TripPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripPath::InitAsDefaultInstance() {
  bbox_ = const_cast< ::valhalla::odin::TripPath_BoundingBox*>(&::valhalla::odin::TripPath_BoundingBox::default_instance());
}

TripPath::TripPath(const TripPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripPath::SharedCtor() {
  _cached_size_ = 0;
  trip_id_ = GOOGLE_ULONGLONG(0);
  leg_id_ = 0u;
  leg_count_ = 0u;
  shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bbox_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripPath::~TripPath() {
  SharedDtor();
}

void TripPath::SharedDtor() {
  if (shape_ != &::google::protobuf::internal::kEmptyString) {
    delete shape_;
  }
  if (this != default_instance_) {
    delete bbox_;
  }
}

void TripPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripPath_descriptor_;
}

const TripPath& TripPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trippath_2eproto();
  return *default_instance_;
}

TripPath* TripPath::default_instance_ = NULL;

TripPath* TripPath::New() const {
  return new TripPath;
}

void TripPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trip_id_ = GOOGLE_ULONGLONG(0);
    leg_id_ = 0u;
    leg_count_ = 0u;
    if (has_shape()) {
      if (shape_ != &::google::protobuf::internal::kEmptyString) {
        shape_->clear();
      }
    }
    if (has_bbox()) {
      if (bbox_ != NULL) bbox_->::valhalla::odin::TripPath_BoundingBox::Clear();
    }
  }
  location_.Clear();
  node_.Clear();
  admin_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 trip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trip_id_)));
          set_has_trip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leg_id;
        break;
      }

      // optional uint32 leg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leg_id_)));
          set_has_leg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leg_count;
        break;
      }

      // optional uint32 leg_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leg_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leg_count_)));
          set_has_leg_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // repeated .valhalla.odin.TripPath.Location location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location;
        if (input->ExpectTag(42)) goto parse_node;
        break;
      }

      // repeated .valhalla.odin.TripPath.Node node = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_node;
        if (input->ExpectTag(50)) goto parse_admin;
        break;
      }

      // repeated .valhalla.odin.TripPath.Admin admin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_admin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_admin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_admin;
        if (input->ExpectTag(58)) goto parse_shape;
        break;
      }

      // optional string shape = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shape()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shape().data(), this->shape().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bbox;
        break;
      }

      // optional .valhalla.odin.TripPath.BoundingBox bbox = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bbox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 trip_id = 1;
  if (has_trip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trip_id(), output);
  }

  // optional uint32 leg_id = 2;
  if (has_leg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leg_id(), output);
  }

  // optional uint32 leg_count = 3;
  if (has_leg_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leg_count(), output);
  }

  // repeated .valhalla.odin.TripPath.Location location = 4;
  for (int i = 0; i < this->location_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->location(i), output);
  }

  // repeated .valhalla.odin.TripPath.Node node = 5;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->node(i), output);
  }

  // repeated .valhalla.odin.TripPath.Admin admin = 6;
  for (int i = 0; i < this->admin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->admin(i), output);
  }

  // optional string shape = 7;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shape().data(), this->shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->shape(), output);
  }

  // optional .valhalla.odin.TripPath.BoundingBox bbox = 8;
  if (has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bbox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 trip_id = 1;
  if (has_trip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trip_id(), target);
  }

  // optional uint32 leg_id = 2;
  if (has_leg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leg_id(), target);
  }

  // optional uint32 leg_count = 3;
  if (has_leg_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leg_count(), target);
  }

  // repeated .valhalla.odin.TripPath.Location location = 4;
  for (int i = 0; i < this->location_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->location(i), target);
  }

  // repeated .valhalla.odin.TripPath.Node node = 5;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->node(i), target);
  }

  // repeated .valhalla.odin.TripPath.Admin admin = 6;
  for (int i = 0; i < this->admin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->admin(i), target);
  }

  // optional string shape = 7;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shape().data(), this->shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->shape(), target);
  }

  // optional .valhalla.odin.TripPath.BoundingBox bbox = 8;
  if (has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bbox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 trip_id = 1;
    if (has_trip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trip_id());
    }

    // optional uint32 leg_id = 2;
    if (has_leg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leg_id());
    }

    // optional uint32 leg_count = 3;
    if (has_leg_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leg_count());
    }

    // optional string shape = 7;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shape());
    }

    // optional .valhalla.odin.TripPath.BoundingBox bbox = 8;
    if (has_bbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bbox());
    }

  }
  // repeated .valhalla.odin.TripPath.Location location = 4;
  total_size += 1 * this->location_size();
  for (int i = 0; i < this->location_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->location(i));
  }

  // repeated .valhalla.odin.TripPath.Node node = 5;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  // repeated .valhalla.odin.TripPath.Admin admin = 6;
  total_size += 1 * this->admin_size();
  for (int i = 0; i < this->admin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->admin(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripPath::MergeFrom(const TripPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  location_.MergeFrom(from.location_);
  node_.MergeFrom(from.node_);
  admin_.MergeFrom(from.admin_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trip_id()) {
      set_trip_id(from.trip_id());
    }
    if (from.has_leg_id()) {
      set_leg_id(from.leg_id());
    }
    if (from.has_leg_count()) {
      set_leg_count(from.leg_count());
    }
    if (from.has_shape()) {
      set_shape(from.shape());
    }
    if (from.has_bbox()) {
      mutable_bbox()->::valhalla::odin::TripPath_BoundingBox::MergeFrom(from.bbox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripPath::CopyFrom(const TripPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripPath::IsInitialized() const {

  return true;
}

void TripPath::Swap(TripPath* other) {
  if (other != this) {
    std::swap(trip_id_, other->trip_id_);
    std::swap(leg_id_, other->leg_id_);
    std::swap(leg_count_, other->leg_count_);
    location_.Swap(&other->location_);
    node_.Swap(&other->node_);
    admin_.Swap(&other->admin_);
    std::swap(shape_, other->shape_);
    std::swap(bbox_, other->bbox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripPath_descriptor_;
  metadata.reflection = TripPath_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace odin
}  // namespace valhalla

// @@protoc_insertion_point(global_scope)
