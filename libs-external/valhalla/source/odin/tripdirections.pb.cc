// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tripdirections.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "valhalla/proto/tripdirections.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace valhalla {
namespace odin {

namespace {

const ::google::protobuf::Descriptor* TripDirections_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDirections_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripDirections_LatLng_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDirections_LatLng_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripDirections_BoundingBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDirections_BoundingBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripDirections_Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDirections_Location_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDirections_Location_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDirections_Location_SideOfStreet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TripDirections_Summary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDirections_Summary_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripDirections_TransitStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDirections_TransitStop_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDirections_TransitStop_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TripDirections_TransitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDirections_TransitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripDirections_Maneuver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDirections_Maneuver_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripDirections_Maneuver_Sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDirections_Maneuver_Sign_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripDirections_Maneuver_Sign_Element_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDirections_Maneuver_Sign_Element_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDirections_Maneuver_CardinalDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDirections_Maneuver_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDirections_TravelMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDirections_VehicleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDirections_PedestrianType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDirections_BicycleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDirections_TransitType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tripdirections_2eproto() {
  protobuf_AddDesc_tripdirections_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tripdirections.proto");
  GOOGLE_CHECK(file != NULL);
  TripDirections_descriptor_ = file->message_type(0);
  static const int TripDirections_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections, trip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections, leg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections, leg_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections, maneuver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections, shape_),
  };
  TripDirections_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripDirections_descriptor_,
      TripDirections::default_instance_,
      TripDirections_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripDirections));
  TripDirections_LatLng_descriptor_ = TripDirections_descriptor_->nested_type(0);
  static const int TripDirections_LatLng_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_LatLng, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_LatLng, lng_),
  };
  TripDirections_LatLng_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripDirections_LatLng_descriptor_,
      TripDirections_LatLng::default_instance_,
      TripDirections_LatLng_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_LatLng, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_LatLng, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripDirections_LatLng));
  TripDirections_BoundingBox_descriptor_ = TripDirections_descriptor_->nested_type(1);
  static const int TripDirections_BoundingBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_BoundingBox, min_ll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_BoundingBox, max_ll_),
  };
  TripDirections_BoundingBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripDirections_BoundingBox_descriptor_,
      TripDirections_BoundingBox::default_instance_,
      TripDirections_BoundingBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_BoundingBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_BoundingBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripDirections_BoundingBox));
  TripDirections_Location_descriptor_ = TripDirections_descriptor_->nested_type(2);
  static const int TripDirections_Location_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, ll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, postal_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, side_of_street_),
  };
  TripDirections_Location_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripDirections_Location_descriptor_,
      TripDirections_Location::default_instance_,
      TripDirections_Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Location, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripDirections_Location));
  TripDirections_Location_Type_descriptor_ = TripDirections_Location_descriptor_->enum_type(0);
  TripDirections_Location_SideOfStreet_descriptor_ = TripDirections_Location_descriptor_->enum_type(1);
  TripDirections_Summary_descriptor_ = TripDirections_descriptor_->nested_type(3);
  static const int TripDirections_Summary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Summary, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Summary, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Summary, bbox_),
  };
  TripDirections_Summary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripDirections_Summary_descriptor_,
      TripDirections_Summary::default_instance_,
      TripDirections_Summary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Summary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Summary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripDirections_Summary));
  TripDirections_TransitStop_descriptor_ = TripDirections_descriptor_->nested_type(4);
  static const int TripDirections_TransitStop_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitStop, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitStop, onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitStop, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitStop, arrival_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitStop, departure_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitStop, is_parent_stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitStop, assumed_schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitStop, ll_),
  };
  TripDirections_TransitStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripDirections_TransitStop_descriptor_,
      TripDirections_TransitStop::default_instance_,
      TripDirections_TransitStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripDirections_TransitStop));
  TripDirections_TransitStop_Type_descriptor_ = TripDirections_TransitStop_descriptor_->enum_type(0);
  TripDirections_TransitInfo_descriptor_ = TripDirections_descriptor_->nested_type(5);
  static const int TripDirections_TransitInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, short_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, long_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, headsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, text_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, operator_onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, operator_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, operator_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, transit_stops_),
  };
  TripDirections_TransitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripDirections_TransitInfo_descriptor_,
      TripDirections_TransitInfo::default_instance_,
      TripDirections_TransitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_TransitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripDirections_TransitInfo));
  TripDirections_Maneuver_descriptor_ = TripDirections_descriptor_->nested_type(6);
  static const int TripDirections_Maneuver_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, text_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, street_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, begin_cardinal_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, begin_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, begin_shape_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, end_shape_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, portions_toll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, portions_unpaved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, verbal_transition_alert_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, verbal_pre_transition_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, verbal_post_transition_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, begin_street_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, roundabout_exit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, depart_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, verbal_depart_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, arrive_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, verbal_arrive_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, transit_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, verbal_multi_cue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, travel_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, vehicle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, pedestrian_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, bicycle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, transit_type_),
  };
  TripDirections_Maneuver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripDirections_Maneuver_descriptor_,
      TripDirections_Maneuver::default_instance_,
      TripDirections_Maneuver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripDirections_Maneuver));
  TripDirections_Maneuver_Sign_descriptor_ = TripDirections_Maneuver_descriptor_->nested_type(0);
  static const int TripDirections_Maneuver_Sign_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver_Sign, exit_number_elements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver_Sign, exit_branch_elements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver_Sign, exit_toward_elements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver_Sign, exit_name_elements_),
  };
  TripDirections_Maneuver_Sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripDirections_Maneuver_Sign_descriptor_,
      TripDirections_Maneuver_Sign::default_instance_,
      TripDirections_Maneuver_Sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver_Sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver_Sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripDirections_Maneuver_Sign));
  TripDirections_Maneuver_Sign_Element_descriptor_ = TripDirections_Maneuver_Sign_descriptor_->nested_type(0);
  static const int TripDirections_Maneuver_Sign_Element_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver_Sign_Element, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver_Sign_Element, consecutive_count_),
  };
  TripDirections_Maneuver_Sign_Element_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripDirections_Maneuver_Sign_Element_descriptor_,
      TripDirections_Maneuver_Sign_Element::default_instance_,
      TripDirections_Maneuver_Sign_Element_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver_Sign_Element, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDirections_Maneuver_Sign_Element, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripDirections_Maneuver_Sign_Element));
  TripDirections_Maneuver_CardinalDirection_descriptor_ = TripDirections_Maneuver_descriptor_->enum_type(0);
  TripDirections_Maneuver_Type_descriptor_ = TripDirections_Maneuver_descriptor_->enum_type(1);
  TripDirections_TravelMode_descriptor_ = TripDirections_descriptor_->enum_type(0);
  TripDirections_VehicleType_descriptor_ = TripDirections_descriptor_->enum_type(1);
  TripDirections_PedestrianType_descriptor_ = TripDirections_descriptor_->enum_type(2);
  TripDirections_BicycleType_descriptor_ = TripDirections_descriptor_->enum_type(3);
  TripDirections_TransitType_descriptor_ = TripDirections_descriptor_->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tripdirections_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripDirections_descriptor_, &TripDirections::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripDirections_LatLng_descriptor_, &TripDirections_LatLng::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripDirections_BoundingBox_descriptor_, &TripDirections_BoundingBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripDirections_Location_descriptor_, &TripDirections_Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripDirections_Summary_descriptor_, &TripDirections_Summary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripDirections_TransitStop_descriptor_, &TripDirections_TransitStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripDirections_TransitInfo_descriptor_, &TripDirections_TransitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripDirections_Maneuver_descriptor_, &TripDirections_Maneuver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripDirections_Maneuver_Sign_descriptor_, &TripDirections_Maneuver_Sign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripDirections_Maneuver_Sign_Element_descriptor_, &TripDirections_Maneuver_Sign_Element::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tripdirections_2eproto() {
  delete TripDirections::default_instance_;
  delete TripDirections_reflection_;
  delete TripDirections_LatLng::default_instance_;
  delete TripDirections_LatLng_reflection_;
  delete TripDirections_BoundingBox::default_instance_;
  delete TripDirections_BoundingBox_reflection_;
  delete TripDirections_Location::default_instance_;
  delete TripDirections_Location_reflection_;
  delete TripDirections_Summary::default_instance_;
  delete TripDirections_Summary_reflection_;
  delete TripDirections_TransitStop::default_instance_;
  delete TripDirections_TransitStop_reflection_;
  delete TripDirections_TransitInfo::default_instance_;
  delete TripDirections_TransitInfo_reflection_;
  delete TripDirections_Maneuver::default_instance_;
  delete TripDirections_Maneuver_reflection_;
  delete TripDirections_Maneuver_Sign::default_instance_;
  delete TripDirections_Maneuver_Sign_reflection_;
  delete TripDirections_Maneuver_Sign_Element::default_instance_;
  delete TripDirections_Maneuver_Sign_Element_reflection_;
}

void protobuf_AddDesc_tripdirections_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024tripdirections.proto\022\rvalhalla.odin\"\273!"
    "\n\016TripDirections\022\017\n\007trip_id\030\001 \001(\004\022\016\n\006leg"
    "_id\030\002 \001(\r\022\021\n\tleg_count\030\003 \001(\r\0228\n\010location"
    "\030\004 \003(\0132&.valhalla.odin.TripDirections.Lo"
    "cation\0226\n\007summary\030\005 \001(\0132%.valhalla.odin."
    "TripDirections.Summary\0228\n\010maneuver\030\006 \003(\013"
    "2&.valhalla.odin.TripDirections.Maneuver"
    "\022\r\n\005shape\030\007 \001(\t\032\"\n\006LatLng\022\013\n\003lat\030\001 \001(\002\022\013"
    "\n\003lng\030\002 \001(\002\032y\n\013BoundingBox\0224\n\006min_ll\030\001 \001"
    "(\0132$.valhalla.odin.TripDirections.LatLng"
    "\0224\n\006max_ll\030\002 \001(\0132$.valhalla.odin.TripDir"
    "ections.LatLng\032\235\003\n\010Location\0220\n\002ll\030\001 \001(\0132"
    "$.valhalla.odin.TripDirections.LatLng\0229\n"
    "\004type\030\002 \001(\0162+.valhalla.odin.TripDirectio"
    "ns.Location.Type\022\017\n\007heading\030\003 \001(\r\022\014\n\004nam"
    "e\030\004 \001(\t\022\016\n\006street\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\022\r\n"
    "\005state\030\007 \001(\t\022\023\n\013postal_code\030\010 \001(\t\022\017\n\007cou"
    "ntry\030\t \001(\t\022\021\n\tdate_time\030\n \001(\t\022K\n\016side_of"
    "_street\030\013 \001(\01623.valhalla.odin.TripDirect"
    "ions.Location.SideOfStreet\" \n\004Type\022\n\n\006kB"
    "reak\020\000\022\014\n\010kThrough\020\001\"0\n\014SideOfStreet\022\t\n\005"
    "kNone\020\000\022\t\n\005kLeft\020\001\022\n\n\006kRight\020\002\032`\n\007Summar"
    "y\022\016\n\006length\030\001 \001(\002\022\014\n\004time\030\002 \001(\r\0227\n\004bbox\030"
    "\003 \001(\0132).valhalla.odin.TripDirections.Bou"
    "ndingBox\032\252\002\n\013TransitStop\022<\n\004type\030\001 \001(\0162."
    ".valhalla.odin.TripDirections.TransitSto"
    "p.Type\022\022\n\nonestop_id\030\002 \001(\t\022\014\n\004name\030\003 \001(\t"
    "\022\031\n\021arrival_date_time\030\004 \001(\t\022\033\n\023departure"
    "_date_time\030\005 \001(\t\022\026\n\016is_parent_stop\030\006 \001(\010"
    "\022\030\n\020assumed_schedule\030\007 \001(\010\0220\n\002ll\030\010 \001(\0132$"
    ".valhalla.odin.TripDirections.LatLng\"\037\n\004"
    "Type\022\t\n\005kStop\020\000\022\014\n\010kStation\020\001\032\236\002\n\013Transi"
    "tInfo\022\022\n\nonestop_id\030\001 \001(\t\022\022\n\nshort_name\030"
    "\002 \001(\t\022\021\n\tlong_name\030\003 \001(\t\022\020\n\010headsign\030\004 \001"
    "(\t\022\r\n\005color\030\005 \001(\r\022\022\n\ntext_color\030\006 \001(\r\022\023\n"
    "\013description\030\007 \001(\t\022\033\n\023operator_onestop_i"
    "d\030\010 \001(\t\022\025\n\roperator_name\030\t \001(\t\022\024\n\014operat"
    "or_url\030\n \001(\t\022@\n\rtransit_stops\030\013 \003(\0132).va"
    "lhalla.odin.TripDirections.TransitStop\032\305"
    "\022\n\010Maneuver\0229\n\004type\030\001 \001(\0162+.valhalla.odi"
    "n.TripDirections.Maneuver.Type\022\030\n\020text_i"
    "nstruction\030\002 \001(\t\022\023\n\013street_name\030\003 \003(\t\022\016\n"
    "\006length\030\004 \001(\002\022\014\n\004time\030\005 \001(\r\022Z\n\030begin_car"
    "dinal_direction\030\006 \001(\01628.valhalla.odin.Tr"
    "ipDirections.Maneuver.CardinalDirection\022"
    "\025\n\rbegin_heading\030\007 \001(\r\022\031\n\021begin_shape_in"
    "dex\030\010 \001(\r\022\027\n\017end_shape_index\030\t \001(\r\022\025\n\rpo"
    "rtions_toll\030\n \001(\010\022\030\n\020portions_unpaved\030\013 "
    "\001(\010\022+\n#verbal_transition_alert_instructi"
    "on\030\014 \001(\t\022)\n!verbal_pre_transition_instru"
    "ction\030\r \001(\t\022*\n\"verbal_post_transition_in"
    "struction\030\016 \001(\t\022\031\n\021begin_street_name\030\017 \003"
    "(\t\0229\n\004sign\030\020 \001(\0132+.valhalla.odin.TripDir"
    "ections.Maneuver.Sign\022\035\n\025roundabout_exit"
    "_count\030\021 \001(\r\022\032\n\022depart_instruction\030\022 \001(\t"
    "\022!\n\031verbal_depart_instruction\030\023 \001(\t\022\032\n\022a"
    "rrive_instruction\030\024 \001(\t\022!\n\031verbal_arrive"
    "_instruction\030\025 \001(\t\022\?\n\014transit_info\030\026 \001(\013"
    "2).valhalla.odin.TripDirections.TransitI"
    "nfo\022\030\n\020verbal_multi_cue\030\027 \001(\010\022=\n\013travel_"
    "mode\030\030 \001(\0162(.valhalla.odin.TripDirection"
    "s.TravelMode\022\?\n\014vehicle_type\030\031 \001(\0162).val"
    "halla.odin.TripDirections.VehicleType\022E\n"
    "\017pedestrian_type\030\032 \001(\0162,.valhalla.odin.T"
    "ripDirections.PedestrianType\022\?\n\014bicycle_"
    "type\030\033 \001(\0162).valhalla.odin.TripDirection"
    "s.BicycleType\022\?\n\014transit_type\030\034 \001(\0162).va"
    "lhalla.odin.TripDirections.TransitType\032\204"
    "\003\n\004Sign\022Q\n\024exit_number_elements\030\001 \003(\01323."
    "valhalla.odin.TripDirections.Maneuver.Si"
    "gn.Element\022Q\n\024exit_branch_elements\030\002 \003(\013"
    "23.valhalla.odin.TripDirections.Maneuver"
    ".Sign.Element\022Q\n\024exit_toward_elements\030\003 "
    "\003(\01323.valhalla.odin.TripDirections.Maneu"
    "ver.Sign.Element\022O\n\022exit_name_elements\030\004"
    " \003(\01323.valhalla.odin.TripDirections.Mane"
    "uver.Sign.Element\0322\n\007Element\022\014\n\004text\030\001 \001"
    "(\t\022\031\n\021consecutive_count\030\002 \001(\r\"\201\001\n\021Cardin"
    "alDirection\022\n\n\006kNorth\020\000\022\016\n\nkNorthEast\020\001\022"
    "\t\n\005kEast\020\002\022\016\n\nkSouthEast\020\003\022\n\n\006kSouth\020\004\022\016"
    "\n\nkSouthWest\020\005\022\t\n\005kWest\020\006\022\016\n\nkNorthWest\020"
    "\007\"\262\005\n\004Type\022\t\n\005kNone\020\000\022\n\n\006kStart\020\001\022\017\n\013kSt"
    "artRight\020\002\022\016\n\nkStartLeft\020\003\022\020\n\014kDestinati"
    "on\020\004\022\025\n\021kDestinationRight\020\005\022\024\n\020kDestinat"
    "ionLeft\020\006\022\014\n\010kBecomes\020\007\022\r\n\tkContinue\020\010\022\020"
    "\n\014kSlightRight\020\t\022\n\n\006kRight\020\n\022\017\n\013kSharpRi"
    "ght\020\013\022\017\n\013kUturnRight\020\014\022\016\n\nkUturnLeft\020\r\022\016"
    "\n\nkSharpLeft\020\016\022\t\n\005kLeft\020\017\022\017\n\013kSlightLeft"
    "\020\020\022\021\n\rkRampStraight\020\021\022\016\n\nkRampRight\020\022\022\r\n"
    "\tkRampLeft\020\023\022\016\n\nkExitRight\020\024\022\r\n\tkExitLef"
    "t\020\025\022\021\n\rkStayStraight\020\026\022\016\n\nkStayRight\020\027\022\r"
    "\n\tkStayLeft\020\030\022\n\n\006kMerge\020\031\022\024\n\020kRoundabout"
    "Enter\020\032\022\023\n\017kRoundaboutExit\020\033\022\017\n\013kFerryEn"
    "ter\020\034\022\016\n\nkFerryExit\020\035\022\014\n\010kTransit\020\036\022\024\n\020k"
    "TransitTransfer\020\037\022\024\n\020kTransitRemainOn\020 \022"
    "\033\n\027kTransitConnectionStart\020!\022\036\n\032kTransit"
    "ConnectionTransfer\020\"\022!\n\035kTransitConnecti"
    "onDestination\020#\022%\n!kPostTransitConnectio"
    "nDestination\020$\"E\n\nTravelMode\022\n\n\006kDrive\020\000"
    "\022\017\n\013kPedestrian\020\001\022\014\n\010kBicycle\020\002\022\014\n\010kTran"
    "sit\020\003\"K\n\013VehicleType\022\010\n\004kCar\020\000\022\017\n\013kMotor"
    "cycle\020\001\022\014\n\010kAutoBus\020\002\022\023\n\017kTractorTrailer"
    "\020\003\"9\n\016PedestrianType\022\t\n\005kFoot\020\000\022\017\n\013kWhee"
    "lchair\020\001\022\013\n\007kSegway\020\002\"@\n\013BicycleType\022\t\n\005"
    "kRoad\020\000\022\n\n\006kCross\020\001\022\013\n\007kHybrid\020\002\022\r\n\tkMou"
    "ntain\020\003\"r\n\013TransitType\022\t\n\005kTram\020\000\022\n\n\006kMe"
    "tro\020\001\022\t\n\005kRail\020\002\022\010\n\004kBus\020\003\022\n\n\006kFerry\020\004\022\r"
    "\n\tkCableCar\020\005\022\014\n\010kGondola\020\006\022\016\n\nkFunicula"
    "r\020\007", 4323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tripdirections.proto", &protobuf_RegisterTypes);
  TripDirections::default_instance_ = new TripDirections();
  TripDirections_LatLng::default_instance_ = new TripDirections_LatLng();
  TripDirections_BoundingBox::default_instance_ = new TripDirections_BoundingBox();
  TripDirections_Location::default_instance_ = new TripDirections_Location();
  TripDirections_Summary::default_instance_ = new TripDirections_Summary();
  TripDirections_TransitStop::default_instance_ = new TripDirections_TransitStop();
  TripDirections_TransitInfo::default_instance_ = new TripDirections_TransitInfo();
  TripDirections_Maneuver::default_instance_ = new TripDirections_Maneuver();
  TripDirections_Maneuver_Sign::default_instance_ = new TripDirections_Maneuver_Sign();
  TripDirections_Maneuver_Sign_Element::default_instance_ = new TripDirections_Maneuver_Sign_Element();
  TripDirections::default_instance_->InitAsDefaultInstance();
  TripDirections_LatLng::default_instance_->InitAsDefaultInstance();
  TripDirections_BoundingBox::default_instance_->InitAsDefaultInstance();
  TripDirections_Location::default_instance_->InitAsDefaultInstance();
  TripDirections_Summary::default_instance_->InitAsDefaultInstance();
  TripDirections_TransitStop::default_instance_->InitAsDefaultInstance();
  TripDirections_TransitInfo::default_instance_->InitAsDefaultInstance();
  TripDirections_Maneuver::default_instance_->InitAsDefaultInstance();
  TripDirections_Maneuver_Sign::default_instance_->InitAsDefaultInstance();
  TripDirections_Maneuver_Sign_Element::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tripdirections_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tripdirections_2eproto {
  StaticDescriptorInitializer_tripdirections_2eproto() {
    protobuf_AddDesc_tripdirections_2eproto();
  }
} static_descriptor_initializer_tripdirections_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TripDirections_TravelMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_TravelMode_descriptor_;
}
bool TripDirections_TravelMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDirections_TravelMode TripDirections::kDrive;
const TripDirections_TravelMode TripDirections::kPedestrian;
const TripDirections_TravelMode TripDirections::kBicycle;
const TripDirections_TravelMode TripDirections::kTransit;
const TripDirections_TravelMode TripDirections::TravelMode_MIN;
const TripDirections_TravelMode TripDirections::TravelMode_MAX;
const int TripDirections::TravelMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripDirections_VehicleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_VehicleType_descriptor_;
}
bool TripDirections_VehicleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDirections_VehicleType TripDirections::kCar;
const TripDirections_VehicleType TripDirections::kMotorcycle;
const TripDirections_VehicleType TripDirections::kAutoBus;
const TripDirections_VehicleType TripDirections::kTractorTrailer;
const TripDirections_VehicleType TripDirections::VehicleType_MIN;
const TripDirections_VehicleType TripDirections::VehicleType_MAX;
const int TripDirections::VehicleType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripDirections_PedestrianType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_PedestrianType_descriptor_;
}
bool TripDirections_PedestrianType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDirections_PedestrianType TripDirections::kFoot;
const TripDirections_PedestrianType TripDirections::kWheelchair;
const TripDirections_PedestrianType TripDirections::kSegway;
const TripDirections_PedestrianType TripDirections::PedestrianType_MIN;
const TripDirections_PedestrianType TripDirections::PedestrianType_MAX;
const int TripDirections::PedestrianType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripDirections_BicycleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_BicycleType_descriptor_;
}
bool TripDirections_BicycleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDirections_BicycleType TripDirections::kRoad;
const TripDirections_BicycleType TripDirections::kCross;
const TripDirections_BicycleType TripDirections::kHybrid;
const TripDirections_BicycleType TripDirections::kMountain;
const TripDirections_BicycleType TripDirections::BicycleType_MIN;
const TripDirections_BicycleType TripDirections::BicycleType_MAX;
const int TripDirections::BicycleType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripDirections_TransitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_TransitType_descriptor_;
}
bool TripDirections_TransitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDirections_TransitType TripDirections::kTram;
const TripDirections_TransitType TripDirections::kMetro;
const TripDirections_TransitType TripDirections::kRail;
const TripDirections_TransitType TripDirections::kBus;
const TripDirections_TransitType TripDirections::kFerry;
const TripDirections_TransitType TripDirections::kCableCar;
const TripDirections_TransitType TripDirections::kGondola;
const TripDirections_TransitType TripDirections::kFunicular;
const TripDirections_TransitType TripDirections::TransitType_MIN;
const TripDirections_TransitType TripDirections::TransitType_MAX;
const int TripDirections::TransitType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TripDirections_LatLng::kLatFieldNumber;
const int TripDirections_LatLng::kLngFieldNumber;
#endif  // !_MSC_VER

TripDirections_LatLng::TripDirections_LatLng()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripDirections_LatLng::InitAsDefaultInstance() {
}

TripDirections_LatLng::TripDirections_LatLng(const TripDirections_LatLng& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripDirections_LatLng::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lng_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDirections_LatLng::~TripDirections_LatLng() {
  SharedDtor();
}

void TripDirections_LatLng::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TripDirections_LatLng::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDirections_LatLng::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_LatLng_descriptor_;
}

const TripDirections_LatLng& TripDirections_LatLng::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripdirections_2eproto();
  return *default_instance_;
}

TripDirections_LatLng* TripDirections_LatLng::default_instance_ = NULL;

TripDirections_LatLng* TripDirections_LatLng::New() const {
  return new TripDirections_LatLng;
}

void TripDirections_LatLng::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lat_ = 0;
    lng_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripDirections_LatLng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_lng;
        break;
      }

      // optional float lng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDirections_LatLng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lat(), output);
  }

  // optional float lng = 2;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lng(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripDirections_LatLng::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lat(), target);
  }

  // optional float lng = 2;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lng(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripDirections_LatLng::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float lat = 1;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lng = 2;
    if (has_lng()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDirections_LatLng::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripDirections_LatLng* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripDirections_LatLng*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripDirections_LatLng::MergeFrom(const TripDirections_LatLng& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripDirections_LatLng::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDirections_LatLng::CopyFrom(const TripDirections_LatLng& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDirections_LatLng::IsInitialized() const {

  return true;
}

void TripDirections_LatLng::Swap(TripDirections_LatLng* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripDirections_LatLng::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDirections_LatLng_descriptor_;
  metadata.reflection = TripDirections_LatLng_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripDirections_BoundingBox::kMinLlFieldNumber;
const int TripDirections_BoundingBox::kMaxLlFieldNumber;
#endif  // !_MSC_VER

TripDirections_BoundingBox::TripDirections_BoundingBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripDirections_BoundingBox::InitAsDefaultInstance() {
  min_ll_ = const_cast< ::valhalla::odin::TripDirections_LatLng*>(&::valhalla::odin::TripDirections_LatLng::default_instance());
  max_ll_ = const_cast< ::valhalla::odin::TripDirections_LatLng*>(&::valhalla::odin::TripDirections_LatLng::default_instance());
}

TripDirections_BoundingBox::TripDirections_BoundingBox(const TripDirections_BoundingBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripDirections_BoundingBox::SharedCtor() {
  _cached_size_ = 0;
  min_ll_ = NULL;
  max_ll_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDirections_BoundingBox::~TripDirections_BoundingBox() {
  SharedDtor();
}

void TripDirections_BoundingBox::SharedDtor() {
  if (this != default_instance_) {
    delete min_ll_;
    delete max_ll_;
  }
}

void TripDirections_BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDirections_BoundingBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_BoundingBox_descriptor_;
}

const TripDirections_BoundingBox& TripDirections_BoundingBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripdirections_2eproto();
  return *default_instance_;
}

TripDirections_BoundingBox* TripDirections_BoundingBox::default_instance_ = NULL;

TripDirections_BoundingBox* TripDirections_BoundingBox::New() const {
  return new TripDirections_BoundingBox;
}

void TripDirections_BoundingBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_min_ll()) {
      if (min_ll_ != NULL) min_ll_->::valhalla::odin::TripDirections_LatLng::Clear();
    }
    if (has_max_ll()) {
      if (max_ll_ != NULL) max_ll_->::valhalla::odin::TripDirections_LatLng::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripDirections_BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.odin.TripDirections.LatLng min_ll = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_max_ll;
        break;
      }

      // optional .valhalla.odin.TripDirections.LatLng max_ll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDirections_BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.odin.TripDirections.LatLng min_ll = 1;
  if (has_min_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->min_ll(), output);
  }

  // optional .valhalla.odin.TripDirections.LatLng max_ll = 2;
  if (has_max_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->max_ll(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripDirections_BoundingBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .valhalla.odin.TripDirections.LatLng min_ll = 1;
  if (has_min_ll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->min_ll(), target);
  }

  // optional .valhalla.odin.TripDirections.LatLng max_ll = 2;
  if (has_max_ll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->max_ll(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripDirections_BoundingBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.odin.TripDirections.LatLng min_ll = 1;
    if (has_min_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_ll());
    }

    // optional .valhalla.odin.TripDirections.LatLng max_ll = 2;
    if (has_max_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_ll());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDirections_BoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripDirections_BoundingBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripDirections_BoundingBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripDirections_BoundingBox::MergeFrom(const TripDirections_BoundingBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_ll()) {
      mutable_min_ll()->::valhalla::odin::TripDirections_LatLng::MergeFrom(from.min_ll());
    }
    if (from.has_max_ll()) {
      mutable_max_ll()->::valhalla::odin::TripDirections_LatLng::MergeFrom(from.max_ll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripDirections_BoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDirections_BoundingBox::CopyFrom(const TripDirections_BoundingBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDirections_BoundingBox::IsInitialized() const {

  return true;
}

void TripDirections_BoundingBox::Swap(TripDirections_BoundingBox* other) {
  if (other != this) {
    std::swap(min_ll_, other->min_ll_);
    std::swap(max_ll_, other->max_ll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripDirections_BoundingBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDirections_BoundingBox_descriptor_;
  metadata.reflection = TripDirections_BoundingBox_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* TripDirections_Location_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_Location_Type_descriptor_;
}
bool TripDirections_Location_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDirections_Location_Type TripDirections_Location::kBreak;
const TripDirections_Location_Type TripDirections_Location::kThrough;
const TripDirections_Location_Type TripDirections_Location::Type_MIN;
const TripDirections_Location_Type TripDirections_Location::Type_MAX;
const int TripDirections_Location::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripDirections_Location_SideOfStreet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_Location_SideOfStreet_descriptor_;
}
bool TripDirections_Location_SideOfStreet_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDirections_Location_SideOfStreet TripDirections_Location::kNone;
const TripDirections_Location_SideOfStreet TripDirections_Location::kLeft;
const TripDirections_Location_SideOfStreet TripDirections_Location::kRight;
const TripDirections_Location_SideOfStreet TripDirections_Location::SideOfStreet_MIN;
const TripDirections_Location_SideOfStreet TripDirections_Location::SideOfStreet_MAX;
const int TripDirections_Location::SideOfStreet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TripDirections_Location::kLlFieldNumber;
const int TripDirections_Location::kTypeFieldNumber;
const int TripDirections_Location::kHeadingFieldNumber;
const int TripDirections_Location::kNameFieldNumber;
const int TripDirections_Location::kStreetFieldNumber;
const int TripDirections_Location::kCityFieldNumber;
const int TripDirections_Location::kStateFieldNumber;
const int TripDirections_Location::kPostalCodeFieldNumber;
const int TripDirections_Location::kCountryFieldNumber;
const int TripDirections_Location::kDateTimeFieldNumber;
const int TripDirections_Location::kSideOfStreetFieldNumber;
#endif  // !_MSC_VER

TripDirections_Location::TripDirections_Location()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripDirections_Location::InitAsDefaultInstance() {
  ll_ = const_cast< ::valhalla::odin::TripDirections_LatLng*>(&::valhalla::odin::TripDirections_LatLng::default_instance());
}

TripDirections_Location::TripDirections_Location(const TripDirections_Location& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripDirections_Location::SharedCtor() {
  _cached_size_ = 0;
  ll_ = NULL;
  type_ = 0;
  heading_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_of_street_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDirections_Location::~TripDirections_Location() {
  SharedDtor();
}

void TripDirections_Location::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
    delete postal_code_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (date_time_ != &::google::protobuf::internal::kEmptyString) {
    delete date_time_;
  }
  if (this != default_instance_) {
    delete ll_;
  }
}

void TripDirections_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDirections_Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_Location_descriptor_;
}

const TripDirections_Location& TripDirections_Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripdirections_2eproto();
  return *default_instance_;
}

TripDirections_Location* TripDirections_Location::default_instance_ = NULL;

TripDirections_Location* TripDirections_Location::New() const {
  return new TripDirections_Location;
}

void TripDirections_Location::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ll()) {
      if (ll_ != NULL) ll_->::valhalla::odin::TripDirections_LatLng::Clear();
    }
    type_ = 0;
    heading_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::kEmptyString) {
        street_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
    if (has_postal_code()) {
      if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
        postal_code_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_date_time()) {
      if (date_time_ != &::google::protobuf::internal::kEmptyString) {
        date_time_->clear();
      }
    }
    side_of_street_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripDirections_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.odin.TripDirections.LatLng ll = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .valhalla.odin.TripDirections.Location.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripDirections_Location_Type_IsValid(value)) {
            set_type(static_cast< ::valhalla::odin::TripDirections_Location_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heading;
        break;
      }

      // optional uint32 heading = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_street;
        break;
      }

      // optional string street = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // optional string city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_state;
        break;
      }

      // optional string state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_postal_code;
        break;
      }

      // optional string postal_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postal_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postal_code().data(), this->postal_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_country;
        break;
      }

      // optional string country = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_date_time;
        break;
      }

      // optional string date_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date_time().data(), this->date_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_side_of_street;
        break;
      }

      // optional .valhalla.odin.TripDirections.Location.SideOfStreet side_of_street = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side_of_street:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripDirections_Location_SideOfStreet_IsValid(value)) {
            set_side_of_street(static_cast< ::valhalla::odin::TripDirections_Location_SideOfStreet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDirections_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.odin.TripDirections.LatLng ll = 1;
  if (has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ll(), output);
  }

  // optional .valhalla.odin.TripDirections.Location.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->heading(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string street = 5;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->street(), output);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->city(), output);
  }

  // optional string state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->state(), output);
  }

  // optional string postal_code = 8;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->postal_code(), output);
  }

  // optional string country = 9;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->country(), output);
  }

  // optional string date_time = 10;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->date_time(), output);
  }

  // optional .valhalla.odin.TripDirections.Location.SideOfStreet side_of_street = 11;
  if (has_side_of_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->side_of_street(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripDirections_Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .valhalla.odin.TripDirections.LatLng ll = 1;
  if (has_ll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ll(), target);
  }

  // optional .valhalla.odin.TripDirections.Location.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->heading(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string street = 5;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->street(), target);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  // optional string state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->state(), target);
  }

  // optional string postal_code = 8;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->postal_code(), target);
  }

  // optional string country = 9;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->country(), target);
  }

  // optional string date_time = 10;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->date_time(), target);
  }

  // optional .valhalla.odin.TripDirections.Location.SideOfStreet side_of_street = 11;
  if (has_side_of_street()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->side_of_street(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripDirections_Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.odin.TripDirections.LatLng ll = 1;
    if (has_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ll());
    }

    // optional .valhalla.odin.TripDirections.Location.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 heading = 3;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heading());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string street = 5;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string postal_code = 8;
    if (has_postal_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string country = 9;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string date_time = 10;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_time());
    }

    // optional .valhalla.odin.TripDirections.Location.SideOfStreet side_of_street = 11;
    if (has_side_of_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side_of_street());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDirections_Location::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripDirections_Location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripDirections_Location*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripDirections_Location::MergeFrom(const TripDirections_Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ll()) {
      mutable_ll()->::valhalla::odin::TripDirections_LatLng::MergeFrom(from.ll());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_postal_code()) {
      set_postal_code(from.postal_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_date_time()) {
      set_date_time(from.date_time());
    }
    if (from.has_side_of_street()) {
      set_side_of_street(from.side_of_street());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripDirections_Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDirections_Location::CopyFrom(const TripDirections_Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDirections_Location::IsInitialized() const {

  return true;
}

void TripDirections_Location::Swap(TripDirections_Location* other) {
  if (other != this) {
    std::swap(ll_, other->ll_);
    std::swap(type_, other->type_);
    std::swap(heading_, other->heading_);
    std::swap(name_, other->name_);
    std::swap(street_, other->street_);
    std::swap(city_, other->city_);
    std::swap(state_, other->state_);
    std::swap(postal_code_, other->postal_code_);
    std::swap(country_, other->country_);
    std::swap(date_time_, other->date_time_);
    std::swap(side_of_street_, other->side_of_street_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripDirections_Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDirections_Location_descriptor_;
  metadata.reflection = TripDirections_Location_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripDirections_Summary::kLengthFieldNumber;
const int TripDirections_Summary::kTimeFieldNumber;
const int TripDirections_Summary::kBboxFieldNumber;
#endif  // !_MSC_VER

TripDirections_Summary::TripDirections_Summary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripDirections_Summary::InitAsDefaultInstance() {
  bbox_ = const_cast< ::valhalla::odin::TripDirections_BoundingBox*>(&::valhalla::odin::TripDirections_BoundingBox::default_instance());
}

TripDirections_Summary::TripDirections_Summary(const TripDirections_Summary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripDirections_Summary::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  time_ = 0u;
  bbox_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDirections_Summary::~TripDirections_Summary() {
  SharedDtor();
}

void TripDirections_Summary::SharedDtor() {
  if (this != default_instance_) {
    delete bbox_;
  }
}

void TripDirections_Summary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDirections_Summary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_Summary_descriptor_;
}

const TripDirections_Summary& TripDirections_Summary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripdirections_2eproto();
  return *default_instance_;
}

TripDirections_Summary* TripDirections_Summary::default_instance_ = NULL;

TripDirections_Summary* TripDirections_Summary::New() const {
  return new TripDirections_Summary;
}

void TripDirections_Summary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0;
    time_ = 0u;
    if (has_bbox()) {
      if (bbox_ != NULL) bbox_->::valhalla::odin::TripDirections_BoundingBox::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripDirections_Summary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bbox;
        break;
      }

      // optional .valhalla.odin.TripDirections.BoundingBox bbox = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bbox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDirections_Summary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->length(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // optional .valhalla.odin.TripDirections.BoundingBox bbox = 3;
  if (has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bbox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripDirections_Summary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->length(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // optional .valhalla.odin.TripDirections.BoundingBox bbox = 3;
  if (has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bbox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripDirections_Summary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float length = 1;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .valhalla.odin.TripDirections.BoundingBox bbox = 3;
    if (has_bbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bbox());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDirections_Summary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripDirections_Summary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripDirections_Summary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripDirections_Summary::MergeFrom(const TripDirections_Summary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_bbox()) {
      mutable_bbox()->::valhalla::odin::TripDirections_BoundingBox::MergeFrom(from.bbox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripDirections_Summary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDirections_Summary::CopyFrom(const TripDirections_Summary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDirections_Summary::IsInitialized() const {

  return true;
}

void TripDirections_Summary::Swap(TripDirections_Summary* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(time_, other->time_);
    std::swap(bbox_, other->bbox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripDirections_Summary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDirections_Summary_descriptor_;
  metadata.reflection = TripDirections_Summary_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* TripDirections_TransitStop_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_TransitStop_Type_descriptor_;
}
bool TripDirections_TransitStop_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDirections_TransitStop_Type TripDirections_TransitStop::kStop;
const TripDirections_TransitStop_Type TripDirections_TransitStop::kStation;
const TripDirections_TransitStop_Type TripDirections_TransitStop::Type_MIN;
const TripDirections_TransitStop_Type TripDirections_TransitStop::Type_MAX;
const int TripDirections_TransitStop::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TripDirections_TransitStop::kTypeFieldNumber;
const int TripDirections_TransitStop::kOnestopIdFieldNumber;
const int TripDirections_TransitStop::kNameFieldNumber;
const int TripDirections_TransitStop::kArrivalDateTimeFieldNumber;
const int TripDirections_TransitStop::kDepartureDateTimeFieldNumber;
const int TripDirections_TransitStop::kIsParentStopFieldNumber;
const int TripDirections_TransitStop::kAssumedScheduleFieldNumber;
const int TripDirections_TransitStop::kLlFieldNumber;
#endif  // !_MSC_VER

TripDirections_TransitStop::TripDirections_TransitStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripDirections_TransitStop::InitAsDefaultInstance() {
  ll_ = const_cast< ::valhalla::odin::TripDirections_LatLng*>(&::valhalla::odin::TripDirections_LatLng::default_instance());
}

TripDirections_TransitStop::TripDirections_TransitStop(const TripDirections_TransitStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripDirections_TransitStop::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arrival_date_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  departure_date_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_parent_stop_ = false;
  assumed_schedule_ = false;
  ll_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDirections_TransitStop::~TripDirections_TransitStop() {
  SharedDtor();
}

void TripDirections_TransitStop::SharedDtor() {
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete onestop_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (arrival_date_time_ != &::google::protobuf::internal::kEmptyString) {
    delete arrival_date_time_;
  }
  if (departure_date_time_ != &::google::protobuf::internal::kEmptyString) {
    delete departure_date_time_;
  }
  if (this != default_instance_) {
    delete ll_;
  }
}

void TripDirections_TransitStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDirections_TransitStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_TransitStop_descriptor_;
}

const TripDirections_TransitStop& TripDirections_TransitStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripdirections_2eproto();
  return *default_instance_;
}

TripDirections_TransitStop* TripDirections_TransitStop::default_instance_ = NULL;

TripDirections_TransitStop* TripDirections_TransitStop::New() const {
  return new TripDirections_TransitStop;
}

void TripDirections_TransitStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_onestop_id()) {
      if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        onestop_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_arrival_date_time()) {
      if (arrival_date_time_ != &::google::protobuf::internal::kEmptyString) {
        arrival_date_time_->clear();
      }
    }
    if (has_departure_date_time()) {
      if (departure_date_time_ != &::google::protobuf::internal::kEmptyString) {
        departure_date_time_->clear();
      }
    }
    is_parent_stop_ = false;
    assumed_schedule_ = false;
    if (has_ll()) {
      if (ll_ != NULL) ll_->::valhalla::odin::TripDirections_LatLng::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripDirections_TransitStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.odin.TripDirections.TransitStop.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripDirections_TransitStop_Type_IsValid(value)) {
            set_type(static_cast< ::valhalla::odin::TripDirections_TransitStop_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_onestop_id;
        break;
      }

      // optional string onestop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onestop_id().data(), this->onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arrival_date_time;
        break;
      }

      // optional string arrival_date_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arrival_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arrival_date_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arrival_date_time().data(), this->arrival_date_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_departure_date_time;
        break;
      }

      // optional string departure_date_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_departure_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departure_date_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->departure_date_time().data(), this->departure_date_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_parent_stop;
        break;
      }

      // optional bool is_parent_stop = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_parent_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_parent_stop_)));
          set_has_is_parent_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_assumed_schedule;
        break;
      }

      // optional bool assumed_schedule = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assumed_schedule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assumed_schedule_)));
          set_has_assumed_schedule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ll;
        break;
      }

      // optional .valhalla.odin.TripDirections.LatLng ll = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDirections_TransitStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.odin.TripDirections.TransitStop.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string onestop_id = 2;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->onestop_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string arrival_date_time = 4;
  if (has_arrival_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arrival_date_time().data(), this->arrival_date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->arrival_date_time(), output);
  }

  // optional string departure_date_time = 5;
  if (has_departure_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->departure_date_time().data(), this->departure_date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->departure_date_time(), output);
  }

  // optional bool is_parent_stop = 6;
  if (has_is_parent_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_parent_stop(), output);
  }

  // optional bool assumed_schedule = 7;
  if (has_assumed_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->assumed_schedule(), output);
  }

  // optional .valhalla.odin.TripDirections.LatLng ll = 8;
  if (has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ll(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripDirections_TransitStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .valhalla.odin.TripDirections.TransitStop.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string onestop_id = 2;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->onestop_id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string arrival_date_time = 4;
  if (has_arrival_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arrival_date_time().data(), this->arrival_date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->arrival_date_time(), target);
  }

  // optional string departure_date_time = 5;
  if (has_departure_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->departure_date_time().data(), this->departure_date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->departure_date_time(), target);
  }

  // optional bool is_parent_stop = 6;
  if (has_is_parent_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_parent_stop(), target);
  }

  // optional bool assumed_schedule = 7;
  if (has_assumed_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->assumed_schedule(), target);
  }

  // optional .valhalla.odin.TripDirections.LatLng ll = 8;
  if (has_ll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ll(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripDirections_TransitStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.odin.TripDirections.TransitStop.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string onestop_id = 2;
    if (has_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string arrival_date_time = 4;
    if (has_arrival_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arrival_date_time());
    }

    // optional string departure_date_time = 5;
    if (has_departure_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->departure_date_time());
    }

    // optional bool is_parent_stop = 6;
    if (has_is_parent_stop()) {
      total_size += 1 + 1;
    }

    // optional bool assumed_schedule = 7;
    if (has_assumed_schedule()) {
      total_size += 1 + 1;
    }

    // optional .valhalla.odin.TripDirections.LatLng ll = 8;
    if (has_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ll());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDirections_TransitStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripDirections_TransitStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripDirections_TransitStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripDirections_TransitStop::MergeFrom(const TripDirections_TransitStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_onestop_id()) {
      set_onestop_id(from.onestop_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_arrival_date_time()) {
      set_arrival_date_time(from.arrival_date_time());
    }
    if (from.has_departure_date_time()) {
      set_departure_date_time(from.departure_date_time());
    }
    if (from.has_is_parent_stop()) {
      set_is_parent_stop(from.is_parent_stop());
    }
    if (from.has_assumed_schedule()) {
      set_assumed_schedule(from.assumed_schedule());
    }
    if (from.has_ll()) {
      mutable_ll()->::valhalla::odin::TripDirections_LatLng::MergeFrom(from.ll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripDirections_TransitStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDirections_TransitStop::CopyFrom(const TripDirections_TransitStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDirections_TransitStop::IsInitialized() const {

  return true;
}

void TripDirections_TransitStop::Swap(TripDirections_TransitStop* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(onestop_id_, other->onestop_id_);
    std::swap(name_, other->name_);
    std::swap(arrival_date_time_, other->arrival_date_time_);
    std::swap(departure_date_time_, other->departure_date_time_);
    std::swap(is_parent_stop_, other->is_parent_stop_);
    std::swap(assumed_schedule_, other->assumed_schedule_);
    std::swap(ll_, other->ll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripDirections_TransitStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDirections_TransitStop_descriptor_;
  metadata.reflection = TripDirections_TransitStop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripDirections_TransitInfo::kOnestopIdFieldNumber;
const int TripDirections_TransitInfo::kShortNameFieldNumber;
const int TripDirections_TransitInfo::kLongNameFieldNumber;
const int TripDirections_TransitInfo::kHeadsignFieldNumber;
const int TripDirections_TransitInfo::kColorFieldNumber;
const int TripDirections_TransitInfo::kTextColorFieldNumber;
const int TripDirections_TransitInfo::kDescriptionFieldNumber;
const int TripDirections_TransitInfo::kOperatorOnestopIdFieldNumber;
const int TripDirections_TransitInfo::kOperatorNameFieldNumber;
const int TripDirections_TransitInfo::kOperatorUrlFieldNumber;
const int TripDirections_TransitInfo::kTransitStopsFieldNumber;
#endif  // !_MSC_VER

TripDirections_TransitInfo::TripDirections_TransitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripDirections_TransitInfo::InitAsDefaultInstance() {
}

TripDirections_TransitInfo::TripDirections_TransitInfo(const TripDirections_TransitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripDirections_TransitInfo::SharedCtor() {
  _cached_size_ = 0;
  onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  long_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = 0u;
  text_color_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operator_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operator_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDirections_TransitInfo::~TripDirections_TransitInfo() {
  SharedDtor();
}

void TripDirections_TransitInfo::SharedDtor() {
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete onestop_id_;
  }
  if (short_name_ != &::google::protobuf::internal::kEmptyString) {
    delete short_name_;
  }
  if (long_name_ != &::google::protobuf::internal::kEmptyString) {
    delete long_name_;
  }
  if (headsign_ != &::google::protobuf::internal::kEmptyString) {
    delete headsign_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (operator_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete operator_onestop_id_;
  }
  if (operator_name_ != &::google::protobuf::internal::kEmptyString) {
    delete operator_name_;
  }
  if (operator_url_ != &::google::protobuf::internal::kEmptyString) {
    delete operator_url_;
  }
  if (this != default_instance_) {
  }
}

void TripDirections_TransitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDirections_TransitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_TransitInfo_descriptor_;
}

const TripDirections_TransitInfo& TripDirections_TransitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripdirections_2eproto();
  return *default_instance_;
}

TripDirections_TransitInfo* TripDirections_TransitInfo::default_instance_ = NULL;

TripDirections_TransitInfo* TripDirections_TransitInfo::New() const {
  return new TripDirections_TransitInfo;
}

void TripDirections_TransitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_onestop_id()) {
      if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        onestop_id_->clear();
      }
    }
    if (has_short_name()) {
      if (short_name_ != &::google::protobuf::internal::kEmptyString) {
        short_name_->clear();
      }
    }
    if (has_long_name()) {
      if (long_name_ != &::google::protobuf::internal::kEmptyString) {
        long_name_->clear();
      }
    }
    if (has_headsign()) {
      if (headsign_ != &::google::protobuf::internal::kEmptyString) {
        headsign_->clear();
      }
    }
    color_ = 0u;
    text_color_ = 0u;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_operator_onestop_id()) {
      if (operator_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        operator_onestop_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_operator_name()) {
      if (operator_name_ != &::google::protobuf::internal::kEmptyString) {
        operator_name_->clear();
      }
    }
    if (has_operator_url()) {
      if (operator_url_ != &::google::protobuf::internal::kEmptyString) {
        operator_url_->clear();
      }
    }
  }
  transit_stops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripDirections_TransitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string onestop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onestop_id().data(), this->onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_short_name;
        break;
      }

      // optional string short_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_short_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->short_name().data(), this->short_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_long_name;
        break;
      }

      // optional string long_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_long_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->long_name().data(), this->long_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_headsign;
        break;
      }

      // optional string headsign = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headsign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headsign().data(), this->headsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_color;
        break;
      }

      // optional uint32 color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_text_color;
        break;
      }

      // optional uint32 text_color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &text_color_)));
          set_has_text_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }

      // optional string description = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_operator_onestop_id;
        break;
      }

      // optional string operator_onestop_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operator_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operator_onestop_id().data(), this->operator_onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_operator_name;
        break;
      }

      // optional string operator_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operator_name().data(), this->operator_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_operator_url;
        break;
      }

      // optional string operator_url = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operator_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operator_url().data(), this->operator_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_transit_stops;
        break;
      }

      // repeated .valhalla.odin.TripDirections.TransitStop transit_stops = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transit_stops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transit_stops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_transit_stops;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDirections_TransitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string onestop_id = 1;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->onestop_id(), output);
  }

  // optional string short_name = 2;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->short_name(), output);
  }

  // optional string long_name = 3;
  if (has_long_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->long_name().data(), this->long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->long_name(), output);
  }

  // optional string headsign = 4;
  if (has_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headsign().data(), this->headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->headsign(), output);
  }

  // optional uint32 color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->color(), output);
  }

  // optional uint32 text_color = 6;
  if (has_text_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->text_color(), output);
  }

  // optional string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->description(), output);
  }

  // optional string operator_onestop_id = 8;
  if (has_operator_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_onestop_id().data(), this->operator_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->operator_onestop_id(), output);
  }

  // optional string operator_name = 9;
  if (has_operator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_name().data(), this->operator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->operator_name(), output);
  }

  // optional string operator_url = 10;
  if (has_operator_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_url().data(), this->operator_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->operator_url(), output);
  }

  // repeated .valhalla.odin.TripDirections.TransitStop transit_stops = 11;
  for (int i = 0; i < this->transit_stops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->transit_stops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripDirections_TransitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string onestop_id = 1;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->onestop_id(), target);
  }

  // optional string short_name = 2;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->short_name(), target);
  }

  // optional string long_name = 3;
  if (has_long_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->long_name().data(), this->long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->long_name(), target);
  }

  // optional string headsign = 4;
  if (has_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headsign().data(), this->headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->headsign(), target);
  }

  // optional uint32 color = 5;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->color(), target);
  }

  // optional uint32 text_color = 6;
  if (has_text_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->text_color(), target);
  }

  // optional string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  // optional string operator_onestop_id = 8;
  if (has_operator_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_onestop_id().data(), this->operator_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->operator_onestop_id(), target);
  }

  // optional string operator_name = 9;
  if (has_operator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_name().data(), this->operator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->operator_name(), target);
  }

  // optional string operator_url = 10;
  if (has_operator_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_url().data(), this->operator_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->operator_url(), target);
  }

  // repeated .valhalla.odin.TripDirections.TransitStop transit_stops = 11;
  for (int i = 0; i < this->transit_stops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->transit_stops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripDirections_TransitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string onestop_id = 1;
    if (has_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
    }

    // optional string short_name = 2;
    if (has_short_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
    }

    // optional string long_name = 3;
    if (has_long_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->long_name());
    }

    // optional string headsign = 4;
    if (has_headsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headsign());
    }

    // optional uint32 color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional uint32 text_color = 6;
    if (has_text_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->text_color());
    }

    // optional string description = 7;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string operator_onestop_id = 8;
    if (has_operator_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_onestop_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string operator_name = 9;
    if (has_operator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_name());
    }

    // optional string operator_url = 10;
    if (has_operator_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_url());
    }

  }
  // repeated .valhalla.odin.TripDirections.TransitStop transit_stops = 11;
  total_size += 1 * this->transit_stops_size();
  for (int i = 0; i < this->transit_stops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transit_stops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDirections_TransitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripDirections_TransitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripDirections_TransitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripDirections_TransitInfo::MergeFrom(const TripDirections_TransitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  transit_stops_.MergeFrom(from.transit_stops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onestop_id()) {
      set_onestop_id(from.onestop_id());
    }
    if (from.has_short_name()) {
      set_short_name(from.short_name());
    }
    if (from.has_long_name()) {
      set_long_name(from.long_name());
    }
    if (from.has_headsign()) {
      set_headsign(from.headsign());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_text_color()) {
      set_text_color(from.text_color());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_operator_onestop_id()) {
      set_operator_onestop_id(from.operator_onestop_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_operator_name()) {
      set_operator_name(from.operator_name());
    }
    if (from.has_operator_url()) {
      set_operator_url(from.operator_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripDirections_TransitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDirections_TransitInfo::CopyFrom(const TripDirections_TransitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDirections_TransitInfo::IsInitialized() const {

  return true;
}

void TripDirections_TransitInfo::Swap(TripDirections_TransitInfo* other) {
  if (other != this) {
    std::swap(onestop_id_, other->onestop_id_);
    std::swap(short_name_, other->short_name_);
    std::swap(long_name_, other->long_name_);
    std::swap(headsign_, other->headsign_);
    std::swap(color_, other->color_);
    std::swap(text_color_, other->text_color_);
    std::swap(description_, other->description_);
    std::swap(operator_onestop_id_, other->operator_onestop_id_);
    std::swap(operator_name_, other->operator_name_);
    std::swap(operator_url_, other->operator_url_);
    transit_stops_.Swap(&other->transit_stops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripDirections_TransitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDirections_TransitInfo_descriptor_;
  metadata.reflection = TripDirections_TransitInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* TripDirections_Maneuver_CardinalDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_Maneuver_CardinalDirection_descriptor_;
}
bool TripDirections_Maneuver_CardinalDirection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDirections_Maneuver_CardinalDirection TripDirections_Maneuver::kNorth;
const TripDirections_Maneuver_CardinalDirection TripDirections_Maneuver::kNorthEast;
const TripDirections_Maneuver_CardinalDirection TripDirections_Maneuver::kEast;
const TripDirections_Maneuver_CardinalDirection TripDirections_Maneuver::kSouthEast;
const TripDirections_Maneuver_CardinalDirection TripDirections_Maneuver::kSouth;
const TripDirections_Maneuver_CardinalDirection TripDirections_Maneuver::kSouthWest;
const TripDirections_Maneuver_CardinalDirection TripDirections_Maneuver::kWest;
const TripDirections_Maneuver_CardinalDirection TripDirections_Maneuver::kNorthWest;
const TripDirections_Maneuver_CardinalDirection TripDirections_Maneuver::CardinalDirection_MIN;
const TripDirections_Maneuver_CardinalDirection TripDirections_Maneuver::CardinalDirection_MAX;
const int TripDirections_Maneuver::CardinalDirection_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TripDirections_Maneuver_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_Maneuver_Type_descriptor_;
}
bool TripDirections_Maneuver_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDirections_Maneuver_Type TripDirections_Maneuver::kNone;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kStart;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kStartRight;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kStartLeft;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kDestination;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kDestinationRight;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kDestinationLeft;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kBecomes;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kContinue;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kSlightRight;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kRight;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kSharpRight;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kUturnRight;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kUturnLeft;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kSharpLeft;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kLeft;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kSlightLeft;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kRampStraight;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kRampRight;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kRampLeft;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kExitRight;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kExitLeft;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kStayStraight;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kStayRight;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kStayLeft;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kMerge;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kRoundaboutEnter;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kRoundaboutExit;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kFerryEnter;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kFerryExit;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kTransit;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kTransitTransfer;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kTransitRemainOn;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kTransitConnectionStart;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kTransitConnectionTransfer;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kTransitConnectionDestination;
const TripDirections_Maneuver_Type TripDirections_Maneuver::kPostTransitConnectionDestination;
const TripDirections_Maneuver_Type TripDirections_Maneuver::Type_MIN;
const TripDirections_Maneuver_Type TripDirections_Maneuver::Type_MAX;
const int TripDirections_Maneuver::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TripDirections_Maneuver_Sign_Element::kTextFieldNumber;
const int TripDirections_Maneuver_Sign_Element::kConsecutiveCountFieldNumber;
#endif  // !_MSC_VER

TripDirections_Maneuver_Sign_Element::TripDirections_Maneuver_Sign_Element()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripDirections_Maneuver_Sign_Element::InitAsDefaultInstance() {
}

TripDirections_Maneuver_Sign_Element::TripDirections_Maneuver_Sign_Element(const TripDirections_Maneuver_Sign_Element& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripDirections_Maneuver_Sign_Element::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  consecutive_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDirections_Maneuver_Sign_Element::~TripDirections_Maneuver_Sign_Element() {
  SharedDtor();
}

void TripDirections_Maneuver_Sign_Element::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void TripDirections_Maneuver_Sign_Element::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDirections_Maneuver_Sign_Element::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_Maneuver_Sign_Element_descriptor_;
}

const TripDirections_Maneuver_Sign_Element& TripDirections_Maneuver_Sign_Element::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripdirections_2eproto();
  return *default_instance_;
}

TripDirections_Maneuver_Sign_Element* TripDirections_Maneuver_Sign_Element::default_instance_ = NULL;

TripDirections_Maneuver_Sign_Element* TripDirections_Maneuver_Sign_Element::New() const {
  return new TripDirections_Maneuver_Sign_Element;
}

void TripDirections_Maneuver_Sign_Element::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    consecutive_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripDirections_Maneuver_Sign_Element::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_consecutive_count;
        break;
      }

      // optional uint32 consecutive_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consecutive_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consecutive_count_)));
          set_has_consecutive_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDirections_Maneuver_Sign_Element::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional uint32 consecutive_count = 2;
  if (has_consecutive_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consecutive_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripDirections_Maneuver_Sign_Element::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional uint32 consecutive_count = 2;
  if (has_consecutive_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consecutive_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripDirections_Maneuver_Sign_Element::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 consecutive_count = 2;
    if (has_consecutive_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consecutive_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDirections_Maneuver_Sign_Element::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripDirections_Maneuver_Sign_Element* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripDirections_Maneuver_Sign_Element*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripDirections_Maneuver_Sign_Element::MergeFrom(const TripDirections_Maneuver_Sign_Element& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_consecutive_count()) {
      set_consecutive_count(from.consecutive_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripDirections_Maneuver_Sign_Element::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDirections_Maneuver_Sign_Element::CopyFrom(const TripDirections_Maneuver_Sign_Element& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDirections_Maneuver_Sign_Element::IsInitialized() const {

  return true;
}

void TripDirections_Maneuver_Sign_Element::Swap(TripDirections_Maneuver_Sign_Element* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(consecutive_count_, other->consecutive_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripDirections_Maneuver_Sign_Element::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDirections_Maneuver_Sign_Element_descriptor_;
  metadata.reflection = TripDirections_Maneuver_Sign_Element_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripDirections_Maneuver_Sign::kExitNumberElementsFieldNumber;
const int TripDirections_Maneuver_Sign::kExitBranchElementsFieldNumber;
const int TripDirections_Maneuver_Sign::kExitTowardElementsFieldNumber;
const int TripDirections_Maneuver_Sign::kExitNameElementsFieldNumber;
#endif  // !_MSC_VER

TripDirections_Maneuver_Sign::TripDirections_Maneuver_Sign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripDirections_Maneuver_Sign::InitAsDefaultInstance() {
}

TripDirections_Maneuver_Sign::TripDirections_Maneuver_Sign(const TripDirections_Maneuver_Sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripDirections_Maneuver_Sign::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDirections_Maneuver_Sign::~TripDirections_Maneuver_Sign() {
  SharedDtor();
}

void TripDirections_Maneuver_Sign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TripDirections_Maneuver_Sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDirections_Maneuver_Sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_Maneuver_Sign_descriptor_;
}

const TripDirections_Maneuver_Sign& TripDirections_Maneuver_Sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripdirections_2eproto();
  return *default_instance_;
}

TripDirections_Maneuver_Sign* TripDirections_Maneuver_Sign::default_instance_ = NULL;

TripDirections_Maneuver_Sign* TripDirections_Maneuver_Sign::New() const {
  return new TripDirections_Maneuver_Sign;
}

void TripDirections_Maneuver_Sign::Clear() {
  exit_number_elements_.Clear();
  exit_branch_elements_.Clear();
  exit_toward_elements_.Clear();
  exit_name_elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripDirections_Maneuver_Sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_number_elements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exit_number_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exit_number_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_exit_number_elements;
        if (input->ExpectTag(18)) goto parse_exit_branch_elements;
        break;
      }

      // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_branch_elements = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exit_branch_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exit_branch_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exit_branch_elements;
        if (input->ExpectTag(26)) goto parse_exit_toward_elements;
        break;
      }

      // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_toward_elements = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exit_toward_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exit_toward_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_exit_toward_elements;
        if (input->ExpectTag(34)) goto parse_exit_name_elements;
        break;
      }

      // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_name_elements = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exit_name_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exit_name_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_exit_name_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDirections_Maneuver_Sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_number_elements = 1;
  for (int i = 0; i < this->exit_number_elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exit_number_elements(i), output);
  }

  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_branch_elements = 2;
  for (int i = 0; i < this->exit_branch_elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exit_branch_elements(i), output);
  }

  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_toward_elements = 3;
  for (int i = 0; i < this->exit_toward_elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->exit_toward_elements(i), output);
  }

  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_name_elements = 4;
  for (int i = 0; i < this->exit_name_elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->exit_name_elements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripDirections_Maneuver_Sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_number_elements = 1;
  for (int i = 0; i < this->exit_number_elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->exit_number_elements(i), target);
  }

  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_branch_elements = 2;
  for (int i = 0; i < this->exit_branch_elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exit_branch_elements(i), target);
  }

  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_toward_elements = 3;
  for (int i = 0; i < this->exit_toward_elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->exit_toward_elements(i), target);
  }

  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_name_elements = 4;
  for (int i = 0; i < this->exit_name_elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->exit_name_elements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripDirections_Maneuver_Sign::ByteSize() const {
  int total_size = 0;

  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_number_elements = 1;
  total_size += 1 * this->exit_number_elements_size();
  for (int i = 0; i < this->exit_number_elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_number_elements(i));
  }

  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_branch_elements = 2;
  total_size += 1 * this->exit_branch_elements_size();
  for (int i = 0; i < this->exit_branch_elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_branch_elements(i));
  }

  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_toward_elements = 3;
  total_size += 1 * this->exit_toward_elements_size();
  for (int i = 0; i < this->exit_toward_elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_toward_elements(i));
  }

  // repeated .valhalla.odin.TripDirections.Maneuver.Sign.Element exit_name_elements = 4;
  total_size += 1 * this->exit_name_elements_size();
  for (int i = 0; i < this->exit_name_elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_name_elements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDirections_Maneuver_Sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripDirections_Maneuver_Sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripDirections_Maneuver_Sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripDirections_Maneuver_Sign::MergeFrom(const TripDirections_Maneuver_Sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  exit_number_elements_.MergeFrom(from.exit_number_elements_);
  exit_branch_elements_.MergeFrom(from.exit_branch_elements_);
  exit_toward_elements_.MergeFrom(from.exit_toward_elements_);
  exit_name_elements_.MergeFrom(from.exit_name_elements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripDirections_Maneuver_Sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDirections_Maneuver_Sign::CopyFrom(const TripDirections_Maneuver_Sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDirections_Maneuver_Sign::IsInitialized() const {

  return true;
}

void TripDirections_Maneuver_Sign::Swap(TripDirections_Maneuver_Sign* other) {
  if (other != this) {
    exit_number_elements_.Swap(&other->exit_number_elements_);
    exit_branch_elements_.Swap(&other->exit_branch_elements_);
    exit_toward_elements_.Swap(&other->exit_toward_elements_);
    exit_name_elements_.Swap(&other->exit_name_elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripDirections_Maneuver_Sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDirections_Maneuver_Sign_descriptor_;
  metadata.reflection = TripDirections_Maneuver_Sign_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripDirections_Maneuver::kTypeFieldNumber;
const int TripDirections_Maneuver::kTextInstructionFieldNumber;
const int TripDirections_Maneuver::kStreetNameFieldNumber;
const int TripDirections_Maneuver::kLengthFieldNumber;
const int TripDirections_Maneuver::kTimeFieldNumber;
const int TripDirections_Maneuver::kBeginCardinalDirectionFieldNumber;
const int TripDirections_Maneuver::kBeginHeadingFieldNumber;
const int TripDirections_Maneuver::kBeginShapeIndexFieldNumber;
const int TripDirections_Maneuver::kEndShapeIndexFieldNumber;
const int TripDirections_Maneuver::kPortionsTollFieldNumber;
const int TripDirections_Maneuver::kPortionsUnpavedFieldNumber;
const int TripDirections_Maneuver::kVerbalTransitionAlertInstructionFieldNumber;
const int TripDirections_Maneuver::kVerbalPreTransitionInstructionFieldNumber;
const int TripDirections_Maneuver::kVerbalPostTransitionInstructionFieldNumber;
const int TripDirections_Maneuver::kBeginStreetNameFieldNumber;
const int TripDirections_Maneuver::kSignFieldNumber;
const int TripDirections_Maneuver::kRoundaboutExitCountFieldNumber;
const int TripDirections_Maneuver::kDepartInstructionFieldNumber;
const int TripDirections_Maneuver::kVerbalDepartInstructionFieldNumber;
const int TripDirections_Maneuver::kArriveInstructionFieldNumber;
const int TripDirections_Maneuver::kVerbalArriveInstructionFieldNumber;
const int TripDirections_Maneuver::kTransitInfoFieldNumber;
const int TripDirections_Maneuver::kVerbalMultiCueFieldNumber;
const int TripDirections_Maneuver::kTravelModeFieldNumber;
const int TripDirections_Maneuver::kVehicleTypeFieldNumber;
const int TripDirections_Maneuver::kPedestrianTypeFieldNumber;
const int TripDirections_Maneuver::kBicycleTypeFieldNumber;
const int TripDirections_Maneuver::kTransitTypeFieldNumber;
#endif  // !_MSC_VER

TripDirections_Maneuver::TripDirections_Maneuver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripDirections_Maneuver::InitAsDefaultInstance() {
  sign_ = const_cast< ::valhalla::odin::TripDirections_Maneuver_Sign*>(&::valhalla::odin::TripDirections_Maneuver_Sign::default_instance());
  transit_info_ = const_cast< ::valhalla::odin::TripDirections_TransitInfo*>(&::valhalla::odin::TripDirections_TransitInfo::default_instance());
}

TripDirections_Maneuver::TripDirections_Maneuver(const TripDirections_Maneuver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripDirections_Maneuver::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  text_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = 0;
  time_ = 0u;
  begin_cardinal_direction_ = 0;
  begin_heading_ = 0u;
  begin_shape_index_ = 0u;
  end_shape_index_ = 0u;
  portions_toll_ = false;
  portions_unpaved_ = false;
  verbal_transition_alert_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verbal_pre_transition_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verbal_post_transition_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = NULL;
  roundabout_exit_count_ = 0u;
  depart_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verbal_depart_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arrive_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verbal_arrive_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transit_info_ = NULL;
  verbal_multi_cue_ = false;
  travel_mode_ = 0;
  vehicle_type_ = 0;
  pedestrian_type_ = 0;
  bicycle_type_ = 0;
  transit_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDirections_Maneuver::~TripDirections_Maneuver() {
  SharedDtor();
}

void TripDirections_Maneuver::SharedDtor() {
  if (text_instruction_ != &::google::protobuf::internal::kEmptyString) {
    delete text_instruction_;
  }
  if (verbal_transition_alert_instruction_ != &::google::protobuf::internal::kEmptyString) {
    delete verbal_transition_alert_instruction_;
  }
  if (verbal_pre_transition_instruction_ != &::google::protobuf::internal::kEmptyString) {
    delete verbal_pre_transition_instruction_;
  }
  if (verbal_post_transition_instruction_ != &::google::protobuf::internal::kEmptyString) {
    delete verbal_post_transition_instruction_;
  }
  if (depart_instruction_ != &::google::protobuf::internal::kEmptyString) {
    delete depart_instruction_;
  }
  if (verbal_depart_instruction_ != &::google::protobuf::internal::kEmptyString) {
    delete verbal_depart_instruction_;
  }
  if (arrive_instruction_ != &::google::protobuf::internal::kEmptyString) {
    delete arrive_instruction_;
  }
  if (verbal_arrive_instruction_ != &::google::protobuf::internal::kEmptyString) {
    delete verbal_arrive_instruction_;
  }
  if (this != default_instance_) {
    delete sign_;
    delete transit_info_;
  }
}

void TripDirections_Maneuver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDirections_Maneuver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_Maneuver_descriptor_;
}

const TripDirections_Maneuver& TripDirections_Maneuver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripdirections_2eproto();
  return *default_instance_;
}

TripDirections_Maneuver* TripDirections_Maneuver::default_instance_ = NULL;

TripDirections_Maneuver* TripDirections_Maneuver::New() const {
  return new TripDirections_Maneuver;
}

void TripDirections_Maneuver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_text_instruction()) {
      if (text_instruction_ != &::google::protobuf::internal::kEmptyString) {
        text_instruction_->clear();
      }
    }
    length_ = 0;
    time_ = 0u;
    begin_cardinal_direction_ = 0;
    begin_heading_ = 0u;
    begin_shape_index_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    end_shape_index_ = 0u;
    portions_toll_ = false;
    portions_unpaved_ = false;
    if (has_verbal_transition_alert_instruction()) {
      if (verbal_transition_alert_instruction_ != &::google::protobuf::internal::kEmptyString) {
        verbal_transition_alert_instruction_->clear();
      }
    }
    if (has_verbal_pre_transition_instruction()) {
      if (verbal_pre_transition_instruction_ != &::google::protobuf::internal::kEmptyString) {
        verbal_pre_transition_instruction_->clear();
      }
    }
    if (has_verbal_post_transition_instruction()) {
      if (verbal_post_transition_instruction_ != &::google::protobuf::internal::kEmptyString) {
        verbal_post_transition_instruction_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != NULL) sign_->::valhalla::odin::TripDirections_Maneuver_Sign::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    roundabout_exit_count_ = 0u;
    if (has_depart_instruction()) {
      if (depart_instruction_ != &::google::protobuf::internal::kEmptyString) {
        depart_instruction_->clear();
      }
    }
    if (has_verbal_depart_instruction()) {
      if (verbal_depart_instruction_ != &::google::protobuf::internal::kEmptyString) {
        verbal_depart_instruction_->clear();
      }
    }
    if (has_arrive_instruction()) {
      if (arrive_instruction_ != &::google::protobuf::internal::kEmptyString) {
        arrive_instruction_->clear();
      }
    }
    if (has_verbal_arrive_instruction()) {
      if (verbal_arrive_instruction_ != &::google::protobuf::internal::kEmptyString) {
        verbal_arrive_instruction_->clear();
      }
    }
    if (has_transit_info()) {
      if (transit_info_ != NULL) transit_info_->::valhalla::odin::TripDirections_TransitInfo::Clear();
    }
    verbal_multi_cue_ = false;
    travel_mode_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    vehicle_type_ = 0;
    pedestrian_type_ = 0;
    bicycle_type_ = 0;
    transit_type_ = 0;
  }
  street_name_.Clear();
  begin_street_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripDirections_Maneuver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.odin.TripDirections.Maneuver.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripDirections_Maneuver_Type_IsValid(value)) {
            set_type(static_cast< ::valhalla::odin::TripDirections_Maneuver_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text_instruction;
        break;
      }

      // optional string text_instruction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text_instruction().data(), this->text_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_street_name;
        break;
      }

      // repeated string street_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_street_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->street_name(this->street_name_size() - 1).data(),
            this->street_name(this->street_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_street_name;
        if (input->ExpectTag(37)) goto parse_length;
        break;
      }

      // optional float length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_begin_cardinal_direction;
        break;
      }

      // optional .valhalla.odin.TripDirections.Maneuver.CardinalDirection begin_cardinal_direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_cardinal_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripDirections_Maneuver_CardinalDirection_IsValid(value)) {
            set_begin_cardinal_direction(static_cast< ::valhalla::odin::TripDirections_Maneuver_CardinalDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_begin_heading;
        break;
      }

      // optional uint32 begin_heading = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_heading_)));
          set_has_begin_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_begin_shape_index;
        break;
      }

      // optional uint32 begin_shape_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_shape_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_shape_index_)));
          set_has_begin_shape_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_end_shape_index;
        break;
      }

      // optional uint32 end_shape_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_shape_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_shape_index_)));
          set_has_end_shape_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_portions_toll;
        break;
      }

      // optional bool portions_toll = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portions_toll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &portions_toll_)));
          set_has_portions_toll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_portions_unpaved;
        break;
      }

      // optional bool portions_unpaved = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_portions_unpaved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &portions_unpaved_)));
          set_has_portions_unpaved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_verbal_transition_alert_instruction;
        break;
      }

      // optional string verbal_transition_alert_instruction = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verbal_transition_alert_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_transition_alert_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verbal_transition_alert_instruction().data(), this->verbal_transition_alert_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_verbal_pre_transition_instruction;
        break;
      }

      // optional string verbal_pre_transition_instruction = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verbal_pre_transition_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_pre_transition_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verbal_pre_transition_instruction().data(), this->verbal_pre_transition_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_verbal_post_transition_instruction;
        break;
      }

      // optional string verbal_post_transition_instruction = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verbal_post_transition_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_post_transition_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verbal_post_transition_instruction().data(), this->verbal_post_transition_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_begin_street_name;
        break;
      }

      // repeated string begin_street_name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_begin_street_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_begin_street_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->begin_street_name(this->begin_street_name_size() - 1).data(),
            this->begin_street_name(this->begin_street_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_begin_street_name;
        if (input->ExpectTag(130)) goto parse_sign;
        break;
      }

      // optional .valhalla.odin.TripDirections.Maneuver.Sign sign = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_roundabout_exit_count;
        break;
      }

      // optional uint32 roundabout_exit_count = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundabout_exit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roundabout_exit_count_)));
          set_has_roundabout_exit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_depart_instruction;
        break;
      }

      // optional string depart_instruction = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depart_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_depart_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->depart_instruction().data(), this->depart_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_verbal_depart_instruction;
        break;
      }

      // optional string verbal_depart_instruction = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verbal_depart_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_depart_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verbal_depart_instruction().data(), this->verbal_depart_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_arrive_instruction;
        break;
      }

      // optional string arrive_instruction = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arrive_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arrive_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arrive_instruction().data(), this->arrive_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_verbal_arrive_instruction;
        break;
      }

      // optional string verbal_arrive_instruction = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verbal_arrive_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_arrive_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verbal_arrive_instruction().data(), this->verbal_arrive_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_transit_info;
        break;
      }

      // optional .valhalla.odin.TripDirections.TransitInfo transit_info = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transit_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transit_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_verbal_multi_cue;
        break;
      }

      // optional bool verbal_multi_cue = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verbal_multi_cue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verbal_multi_cue_)));
          set_has_verbal_multi_cue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_travel_mode;
        break;
      }

      // optional .valhalla.odin.TripDirections.TravelMode travel_mode = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_travel_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripDirections_TravelMode_IsValid(value)) {
            set_travel_mode(static_cast< ::valhalla::odin::TripDirections_TravelMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_vehicle_type;
        break;
      }

      // optional .valhalla.odin.TripDirections.VehicleType vehicle_type = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vehicle_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripDirections_VehicleType_IsValid(value)) {
            set_vehicle_type(static_cast< ::valhalla::odin::TripDirections_VehicleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_pedestrian_type;
        break;
      }

      // optional .valhalla.odin.TripDirections.PedestrianType pedestrian_type = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pedestrian_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripDirections_PedestrianType_IsValid(value)) {
            set_pedestrian_type(static_cast< ::valhalla::odin::TripDirections_PedestrianType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(26, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_bicycle_type;
        break;
      }

      // optional .valhalla.odin.TripDirections.BicycleType bicycle_type = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bicycle_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripDirections_BicycleType_IsValid(value)) {
            set_bicycle_type(static_cast< ::valhalla::odin::TripDirections_BicycleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(27, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_transit_type;
        break;
      }

      // optional .valhalla.odin.TripDirections.TransitType transit_type = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transit_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::TripDirections_TransitType_IsValid(value)) {
            set_transit_type(static_cast< ::valhalla::odin::TripDirections_TransitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDirections_Maneuver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.odin.TripDirections.Maneuver.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string text_instruction = 2;
  if (has_text_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_instruction().data(), this->text_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text_instruction(), output);
  }

  // repeated string street_name = 3;
  for (int i = 0; i < this->street_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->street_name(i).data(), this->street_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->street_name(i), output);
  }

  // optional float length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->length(), output);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional .valhalla.odin.TripDirections.Maneuver.CardinalDirection begin_cardinal_direction = 6;
  if (has_begin_cardinal_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->begin_cardinal_direction(), output);
  }

  // optional uint32 begin_heading = 7;
  if (has_begin_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->begin_heading(), output);
  }

  // optional uint32 begin_shape_index = 8;
  if (has_begin_shape_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->begin_shape_index(), output);
  }

  // optional uint32 end_shape_index = 9;
  if (has_end_shape_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->end_shape_index(), output);
  }

  // optional bool portions_toll = 10;
  if (has_portions_toll()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->portions_toll(), output);
  }

  // optional bool portions_unpaved = 11;
  if (has_portions_unpaved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->portions_unpaved(), output);
  }

  // optional string verbal_transition_alert_instruction = 12;
  if (has_verbal_transition_alert_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbal_transition_alert_instruction().data(), this->verbal_transition_alert_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->verbal_transition_alert_instruction(), output);
  }

  // optional string verbal_pre_transition_instruction = 13;
  if (has_verbal_pre_transition_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbal_pre_transition_instruction().data(), this->verbal_pre_transition_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->verbal_pre_transition_instruction(), output);
  }

  // optional string verbal_post_transition_instruction = 14;
  if (has_verbal_post_transition_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbal_post_transition_instruction().data(), this->verbal_post_transition_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->verbal_post_transition_instruction(), output);
  }

  // repeated string begin_street_name = 15;
  for (int i = 0; i < this->begin_street_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->begin_street_name(i).data(), this->begin_street_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->begin_street_name(i), output);
  }

  // optional .valhalla.odin.TripDirections.Maneuver.Sign sign = 16;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->sign(), output);
  }

  // optional uint32 roundabout_exit_count = 17;
  if (has_roundabout_exit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->roundabout_exit_count(), output);
  }

  // optional string depart_instruction = 18;
  if (has_depart_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->depart_instruction().data(), this->depart_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->depart_instruction(), output);
  }

  // optional string verbal_depart_instruction = 19;
  if (has_verbal_depart_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbal_depart_instruction().data(), this->verbal_depart_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->verbal_depart_instruction(), output);
  }

  // optional string arrive_instruction = 20;
  if (has_arrive_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arrive_instruction().data(), this->arrive_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->arrive_instruction(), output);
  }

  // optional string verbal_arrive_instruction = 21;
  if (has_verbal_arrive_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbal_arrive_instruction().data(), this->verbal_arrive_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->verbal_arrive_instruction(), output);
  }

  // optional .valhalla.odin.TripDirections.TransitInfo transit_info = 22;
  if (has_transit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->transit_info(), output);
  }

  // optional bool verbal_multi_cue = 23;
  if (has_verbal_multi_cue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->verbal_multi_cue(), output);
  }

  // optional .valhalla.odin.TripDirections.TravelMode travel_mode = 24;
  if (has_travel_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->travel_mode(), output);
  }

  // optional .valhalla.odin.TripDirections.VehicleType vehicle_type = 25;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->vehicle_type(), output);
  }

  // optional .valhalla.odin.TripDirections.PedestrianType pedestrian_type = 26;
  if (has_pedestrian_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->pedestrian_type(), output);
  }

  // optional .valhalla.odin.TripDirections.BicycleType bicycle_type = 27;
  if (has_bicycle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->bicycle_type(), output);
  }

  // optional .valhalla.odin.TripDirections.TransitType transit_type = 28;
  if (has_transit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->transit_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripDirections_Maneuver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .valhalla.odin.TripDirections.Maneuver.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string text_instruction = 2;
  if (has_text_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_instruction().data(), this->text_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text_instruction(), target);
  }

  // repeated string street_name = 3;
  for (int i = 0; i < this->street_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street_name(i).data(), this->street_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->street_name(i), target);
  }

  // optional float length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->length(), target);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional .valhalla.odin.TripDirections.Maneuver.CardinalDirection begin_cardinal_direction = 6;
  if (has_begin_cardinal_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->begin_cardinal_direction(), target);
  }

  // optional uint32 begin_heading = 7;
  if (has_begin_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->begin_heading(), target);
  }

  // optional uint32 begin_shape_index = 8;
  if (has_begin_shape_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->begin_shape_index(), target);
  }

  // optional uint32 end_shape_index = 9;
  if (has_end_shape_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->end_shape_index(), target);
  }

  // optional bool portions_toll = 10;
  if (has_portions_toll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->portions_toll(), target);
  }

  // optional bool portions_unpaved = 11;
  if (has_portions_unpaved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->portions_unpaved(), target);
  }

  // optional string verbal_transition_alert_instruction = 12;
  if (has_verbal_transition_alert_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbal_transition_alert_instruction().data(), this->verbal_transition_alert_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->verbal_transition_alert_instruction(), target);
  }

  // optional string verbal_pre_transition_instruction = 13;
  if (has_verbal_pre_transition_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbal_pre_transition_instruction().data(), this->verbal_pre_transition_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->verbal_pre_transition_instruction(), target);
  }

  // optional string verbal_post_transition_instruction = 14;
  if (has_verbal_post_transition_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbal_post_transition_instruction().data(), this->verbal_post_transition_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->verbal_post_transition_instruction(), target);
  }

  // repeated string begin_street_name = 15;
  for (int i = 0; i < this->begin_street_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->begin_street_name(i).data(), this->begin_street_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->begin_street_name(i), target);
  }

  // optional .valhalla.odin.TripDirections.Maneuver.Sign sign = 16;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->sign(), target);
  }

  // optional uint32 roundabout_exit_count = 17;
  if (has_roundabout_exit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->roundabout_exit_count(), target);
  }

  // optional string depart_instruction = 18;
  if (has_depart_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->depart_instruction().data(), this->depart_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->depart_instruction(), target);
  }

  // optional string verbal_depart_instruction = 19;
  if (has_verbal_depart_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbal_depart_instruction().data(), this->verbal_depart_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->verbal_depart_instruction(), target);
  }

  // optional string arrive_instruction = 20;
  if (has_arrive_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arrive_instruction().data(), this->arrive_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->arrive_instruction(), target);
  }

  // optional string verbal_arrive_instruction = 21;
  if (has_verbal_arrive_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbal_arrive_instruction().data(), this->verbal_arrive_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->verbal_arrive_instruction(), target);
  }

  // optional .valhalla.odin.TripDirections.TransitInfo transit_info = 22;
  if (has_transit_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->transit_info(), target);
  }

  // optional bool verbal_multi_cue = 23;
  if (has_verbal_multi_cue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->verbal_multi_cue(), target);
  }

  // optional .valhalla.odin.TripDirections.TravelMode travel_mode = 24;
  if (has_travel_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->travel_mode(), target);
  }

  // optional .valhalla.odin.TripDirections.VehicleType vehicle_type = 25;
  if (has_vehicle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->vehicle_type(), target);
  }

  // optional .valhalla.odin.TripDirections.PedestrianType pedestrian_type = 26;
  if (has_pedestrian_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->pedestrian_type(), target);
  }

  // optional .valhalla.odin.TripDirections.BicycleType bicycle_type = 27;
  if (has_bicycle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->bicycle_type(), target);
  }

  // optional .valhalla.odin.TripDirections.TransitType transit_type = 28;
  if (has_transit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->transit_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripDirections_Maneuver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.odin.TripDirections.Maneuver.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string text_instruction = 2;
    if (has_text_instruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_instruction());
    }

    // optional float length = 4;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .valhalla.odin.TripDirections.Maneuver.CardinalDirection begin_cardinal_direction = 6;
    if (has_begin_cardinal_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->begin_cardinal_direction());
    }

    // optional uint32 begin_heading = 7;
    if (has_begin_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_heading());
    }

    // optional uint32 begin_shape_index = 8;
    if (has_begin_shape_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_shape_index());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 end_shape_index = 9;
    if (has_end_shape_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_shape_index());
    }

    // optional bool portions_toll = 10;
    if (has_portions_toll()) {
      total_size += 1 + 1;
    }

    // optional bool portions_unpaved = 11;
    if (has_portions_unpaved()) {
      total_size += 1 + 1;
    }

    // optional string verbal_transition_alert_instruction = 12;
    if (has_verbal_transition_alert_instruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_transition_alert_instruction());
    }

    // optional string verbal_pre_transition_instruction = 13;
    if (has_verbal_pre_transition_instruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_pre_transition_instruction());
    }

    // optional string verbal_post_transition_instruction = 14;
    if (has_verbal_post_transition_instruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_post_transition_instruction());
    }

    // optional .valhalla.odin.TripDirections.Maneuver.Sign sign = 16;
    if (has_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 roundabout_exit_count = 17;
    if (has_roundabout_exit_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roundabout_exit_count());
    }

    // optional string depart_instruction = 18;
    if (has_depart_instruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->depart_instruction());
    }

    // optional string verbal_depart_instruction = 19;
    if (has_verbal_depart_instruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_depart_instruction());
    }

    // optional string arrive_instruction = 20;
    if (has_arrive_instruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arrive_instruction());
    }

    // optional string verbal_arrive_instruction = 21;
    if (has_verbal_arrive_instruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_arrive_instruction());
    }

    // optional .valhalla.odin.TripDirections.TransitInfo transit_info = 22;
    if (has_transit_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transit_info());
    }

    // optional bool verbal_multi_cue = 23;
    if (has_verbal_multi_cue()) {
      total_size += 2 + 1;
    }

    // optional .valhalla.odin.TripDirections.TravelMode travel_mode = 24;
    if (has_travel_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->travel_mode());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .valhalla.odin.TripDirections.VehicleType vehicle_type = 25;
    if (has_vehicle_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehicle_type());
    }

    // optional .valhalla.odin.TripDirections.PedestrianType pedestrian_type = 26;
    if (has_pedestrian_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pedestrian_type());
    }

    // optional .valhalla.odin.TripDirections.BicycleType bicycle_type = 27;
    if (has_bicycle_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bicycle_type());
    }

    // optional .valhalla.odin.TripDirections.TransitType transit_type = 28;
    if (has_transit_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transit_type());
    }

  }
  // repeated string street_name = 3;
  total_size += 1 * this->street_name_size();
  for (int i = 0; i < this->street_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->street_name(i));
  }

  // repeated string begin_street_name = 15;
  total_size += 1 * this->begin_street_name_size();
  for (int i = 0; i < this->begin_street_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->begin_street_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDirections_Maneuver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripDirections_Maneuver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripDirections_Maneuver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripDirections_Maneuver::MergeFrom(const TripDirections_Maneuver& from) {
  GOOGLE_CHECK_NE(&from, this);
  street_name_.MergeFrom(from.street_name_);
  begin_street_name_.MergeFrom(from.begin_street_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_text_instruction()) {
      set_text_instruction(from.text_instruction());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_begin_cardinal_direction()) {
      set_begin_cardinal_direction(from.begin_cardinal_direction());
    }
    if (from.has_begin_heading()) {
      set_begin_heading(from.begin_heading());
    }
    if (from.has_begin_shape_index()) {
      set_begin_shape_index(from.begin_shape_index());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_shape_index()) {
      set_end_shape_index(from.end_shape_index());
    }
    if (from.has_portions_toll()) {
      set_portions_toll(from.portions_toll());
    }
    if (from.has_portions_unpaved()) {
      set_portions_unpaved(from.portions_unpaved());
    }
    if (from.has_verbal_transition_alert_instruction()) {
      set_verbal_transition_alert_instruction(from.verbal_transition_alert_instruction());
    }
    if (from.has_verbal_pre_transition_instruction()) {
      set_verbal_pre_transition_instruction(from.verbal_pre_transition_instruction());
    }
    if (from.has_verbal_post_transition_instruction()) {
      set_verbal_post_transition_instruction(from.verbal_post_transition_instruction());
    }
    if (from.has_sign()) {
      mutable_sign()->::valhalla::odin::TripDirections_Maneuver_Sign::MergeFrom(from.sign());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_roundabout_exit_count()) {
      set_roundabout_exit_count(from.roundabout_exit_count());
    }
    if (from.has_depart_instruction()) {
      set_depart_instruction(from.depart_instruction());
    }
    if (from.has_verbal_depart_instruction()) {
      set_verbal_depart_instruction(from.verbal_depart_instruction());
    }
    if (from.has_arrive_instruction()) {
      set_arrive_instruction(from.arrive_instruction());
    }
    if (from.has_verbal_arrive_instruction()) {
      set_verbal_arrive_instruction(from.verbal_arrive_instruction());
    }
    if (from.has_transit_info()) {
      mutable_transit_info()->::valhalla::odin::TripDirections_TransitInfo::MergeFrom(from.transit_info());
    }
    if (from.has_verbal_multi_cue()) {
      set_verbal_multi_cue(from.verbal_multi_cue());
    }
    if (from.has_travel_mode()) {
      set_travel_mode(from.travel_mode());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_vehicle_type()) {
      set_vehicle_type(from.vehicle_type());
    }
    if (from.has_pedestrian_type()) {
      set_pedestrian_type(from.pedestrian_type());
    }
    if (from.has_bicycle_type()) {
      set_bicycle_type(from.bicycle_type());
    }
    if (from.has_transit_type()) {
      set_transit_type(from.transit_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripDirections_Maneuver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDirections_Maneuver::CopyFrom(const TripDirections_Maneuver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDirections_Maneuver::IsInitialized() const {

  return true;
}

void TripDirections_Maneuver::Swap(TripDirections_Maneuver* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(text_instruction_, other->text_instruction_);
    street_name_.Swap(&other->street_name_);
    std::swap(length_, other->length_);
    std::swap(time_, other->time_);
    std::swap(begin_cardinal_direction_, other->begin_cardinal_direction_);
    std::swap(begin_heading_, other->begin_heading_);
    std::swap(begin_shape_index_, other->begin_shape_index_);
    std::swap(end_shape_index_, other->end_shape_index_);
    std::swap(portions_toll_, other->portions_toll_);
    std::swap(portions_unpaved_, other->portions_unpaved_);
    std::swap(verbal_transition_alert_instruction_, other->verbal_transition_alert_instruction_);
    std::swap(verbal_pre_transition_instruction_, other->verbal_pre_transition_instruction_);
    std::swap(verbal_post_transition_instruction_, other->verbal_post_transition_instruction_);
    begin_street_name_.Swap(&other->begin_street_name_);
    std::swap(sign_, other->sign_);
    std::swap(roundabout_exit_count_, other->roundabout_exit_count_);
    std::swap(depart_instruction_, other->depart_instruction_);
    std::swap(verbal_depart_instruction_, other->verbal_depart_instruction_);
    std::swap(arrive_instruction_, other->arrive_instruction_);
    std::swap(verbal_arrive_instruction_, other->verbal_arrive_instruction_);
    std::swap(transit_info_, other->transit_info_);
    std::swap(verbal_multi_cue_, other->verbal_multi_cue_);
    std::swap(travel_mode_, other->travel_mode_);
    std::swap(vehicle_type_, other->vehicle_type_);
    std::swap(pedestrian_type_, other->pedestrian_type_);
    std::swap(bicycle_type_, other->bicycle_type_);
    std::swap(transit_type_, other->transit_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripDirections_Maneuver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDirections_Maneuver_descriptor_;
  metadata.reflection = TripDirections_Maneuver_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripDirections::kTripIdFieldNumber;
const int TripDirections::kLegIdFieldNumber;
const int TripDirections::kLegCountFieldNumber;
const int TripDirections::kLocationFieldNumber;
const int TripDirections::kSummaryFieldNumber;
const int TripDirections::kManeuverFieldNumber;
const int TripDirections::kShapeFieldNumber;
#endif  // !_MSC_VER

TripDirections::TripDirections()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripDirections::InitAsDefaultInstance() {
  summary_ = const_cast< ::valhalla::odin::TripDirections_Summary*>(&::valhalla::odin::TripDirections_Summary::default_instance());
}

TripDirections::TripDirections(const TripDirections& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripDirections::SharedCtor() {
  _cached_size_ = 0;
  trip_id_ = GOOGLE_ULONGLONG(0);
  leg_id_ = 0u;
  leg_count_ = 0u;
  summary_ = NULL;
  shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDirections::~TripDirections() {
  SharedDtor();
}

void TripDirections::SharedDtor() {
  if (shape_ != &::google::protobuf::internal::kEmptyString) {
    delete shape_;
  }
  if (this != default_instance_) {
    delete summary_;
  }
}

void TripDirections::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDirections::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDirections_descriptor_;
}

const TripDirections& TripDirections::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripdirections_2eproto();
  return *default_instance_;
}

TripDirections* TripDirections::default_instance_ = NULL;

TripDirections* TripDirections::New() const {
  return new TripDirections;
}

void TripDirections::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trip_id_ = GOOGLE_ULONGLONG(0);
    leg_id_ = 0u;
    leg_count_ = 0u;
    if (has_summary()) {
      if (summary_ != NULL) summary_->::valhalla::odin::TripDirections_Summary::Clear();
    }
    if (has_shape()) {
      if (shape_ != &::google::protobuf::internal::kEmptyString) {
        shape_->clear();
      }
    }
  }
  location_.Clear();
  maneuver_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripDirections::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 trip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trip_id_)));
          set_has_trip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leg_id;
        break;
      }

      // optional uint32 leg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leg_id_)));
          set_has_leg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leg_count;
        break;
      }

      // optional uint32 leg_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leg_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leg_count_)));
          set_has_leg_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // repeated .valhalla.odin.TripDirections.Location location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location;
        if (input->ExpectTag(42)) goto parse_summary;
        break;
      }

      // optional .valhalla.odin.TripDirections.Summary summary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_maneuver;
        break;
      }

      // repeated .valhalla.odin.TripDirections.Maneuver maneuver = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maneuver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maneuver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_maneuver;
        if (input->ExpectTag(58)) goto parse_shape;
        break;
      }

      // optional string shape = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shape()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shape().data(), this->shape().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDirections::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 trip_id = 1;
  if (has_trip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trip_id(), output);
  }

  // optional uint32 leg_id = 2;
  if (has_leg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leg_id(), output);
  }

  // optional uint32 leg_count = 3;
  if (has_leg_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leg_count(), output);
  }

  // repeated .valhalla.odin.TripDirections.Location location = 4;
  for (int i = 0; i < this->location_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->location(i), output);
  }

  // optional .valhalla.odin.TripDirections.Summary summary = 5;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->summary(), output);
  }

  // repeated .valhalla.odin.TripDirections.Maneuver maneuver = 6;
  for (int i = 0; i < this->maneuver_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->maneuver(i), output);
  }

  // optional string shape = 7;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shape().data(), this->shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->shape(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripDirections::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 trip_id = 1;
  if (has_trip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trip_id(), target);
  }

  // optional uint32 leg_id = 2;
  if (has_leg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leg_id(), target);
  }

  // optional uint32 leg_count = 3;
  if (has_leg_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leg_count(), target);
  }

  // repeated .valhalla.odin.TripDirections.Location location = 4;
  for (int i = 0; i < this->location_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->location(i), target);
  }

  // optional .valhalla.odin.TripDirections.Summary summary = 5;
  if (has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->summary(), target);
  }

  // repeated .valhalla.odin.TripDirections.Maneuver maneuver = 6;
  for (int i = 0; i < this->maneuver_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->maneuver(i), target);
  }

  // optional string shape = 7;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shape().data(), this->shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->shape(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripDirections::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 trip_id = 1;
    if (has_trip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trip_id());
    }

    // optional uint32 leg_id = 2;
    if (has_leg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leg_id());
    }

    // optional uint32 leg_count = 3;
    if (has_leg_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leg_count());
    }

    // optional .valhalla.odin.TripDirections.Summary summary = 5;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summary());
    }

    // optional string shape = 7;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shape());
    }

  }
  // repeated .valhalla.odin.TripDirections.Location location = 4;
  total_size += 1 * this->location_size();
  for (int i = 0; i < this->location_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->location(i));
  }

  // repeated .valhalla.odin.TripDirections.Maneuver maneuver = 6;
  total_size += 1 * this->maneuver_size();
  for (int i = 0; i < this->maneuver_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maneuver(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDirections::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripDirections* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripDirections*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripDirections::MergeFrom(const TripDirections& from) {
  GOOGLE_CHECK_NE(&from, this);
  location_.MergeFrom(from.location_);
  maneuver_.MergeFrom(from.maneuver_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trip_id()) {
      set_trip_id(from.trip_id());
    }
    if (from.has_leg_id()) {
      set_leg_id(from.leg_id());
    }
    if (from.has_leg_count()) {
      set_leg_count(from.leg_count());
    }
    if (from.has_summary()) {
      mutable_summary()->::valhalla::odin::TripDirections_Summary::MergeFrom(from.summary());
    }
    if (from.has_shape()) {
      set_shape(from.shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripDirections::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDirections::CopyFrom(const TripDirections& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDirections::IsInitialized() const {

  return true;
}

void TripDirections::Swap(TripDirections* other) {
  if (other != this) {
    std::swap(trip_id_, other->trip_id_);
    std::swap(leg_id_, other->leg_id_);
    std::swap(leg_count_, other->leg_count_);
    location_.Swap(&other->location_);
    std::swap(summary_, other->summary_);
    maneuver_.Swap(&other->maneuver_);
    std::swap(shape_, other->shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripDirections::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDirections_descriptor_;
  metadata.reflection = TripDirections_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace odin
}  // namespace valhalla

// @@protoc_insertion_point(global_scope)
