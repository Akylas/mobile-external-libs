// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tripcommon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tripcommon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace valhalla {
namespace odin {

namespace {

const ::google::protobuf::Descriptor* LatLng_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatLng_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundingBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundingBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Location_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Location_SideOfStreet_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tripcommon_2eproto() {
  protobuf_AddDesc_tripcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tripcommon.proto");
  GOOGLE_CHECK(file != NULL);
  LatLng_descriptor_ = file->message_type(0);
  static const int LatLng_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLng, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLng, lng_),
  };
  LatLng_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LatLng_descriptor_,
      LatLng::default_instance_,
      LatLng_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLng, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatLng, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LatLng));
  BoundingBox_descriptor_ = file->message_type(1);
  static const int BoundingBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, min_ll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, max_ll_),
  };
  BoundingBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoundingBox_descriptor_,
      BoundingBox::default_instance_,
      BoundingBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoundingBox));
  Location_descriptor_ = file->message_type(2);
  static const int Location_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, ll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, postal_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, side_of_street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, original_index_),
  };
  Location_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Location_descriptor_,
      Location::default_instance_,
      Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Location));
  Location_Type_descriptor_ = Location_descriptor_->enum_type(0);
  Location_SideOfStreet_descriptor_ = Location_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tripcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LatLng_descriptor_, &LatLng::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoundingBox_descriptor_, &BoundingBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Location_descriptor_, &Location::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tripcommon_2eproto() {
  delete LatLng::default_instance_;
  delete LatLng_reflection_;
  delete BoundingBox::default_instance_;
  delete BoundingBox_reflection_;
  delete Location::default_instance_;
  delete Location_reflection_;
}

void protobuf_AddDesc_tripcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020tripcommon.proto\022\rvalhalla.odin\"\"\n\006Lat"
    "Lng\022\013\n\003lat\030\001 \001(\002\022\013\n\003lng\030\002 \001(\002\"[\n\013Boundin"
    "gBox\022%\n\006min_ll\030\001 \001(\0132\025.valhalla.odin.Lat"
    "Lng\022%\n\006max_ll\030\002 \001(\0132\025.valhalla.odin.LatL"
    "ng\"\210\003\n\010Location\022!\n\002ll\030\001 \001(\0132\025.valhalla.o"
    "din.LatLng\022*\n\004type\030\002 \001(\0162\034.valhalla.odin"
    ".Location.Type\022\017\n\007heading\030\003 \001(\r\022\014\n\004name\030"
    "\004 \001(\t\022\016\n\006street\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\022\r\n\005s"
    "tate\030\007 \001(\t\022\023\n\013postal_code\030\010 \001(\t\022\017\n\007count"
    "ry\030\t \001(\t\022\021\n\tdate_time\030\n \001(\t\022<\n\016side_of_s"
    "treet\030\013 \001(\0162$.valhalla.odin.Location.Sid"
    "eOfStreet\022\026\n\016original_index\030\014 \001(\r\" \n\004Typ"
    "e\022\n\n\006kBreak\020\000\022\014\n\010kThrough\020\001\"0\n\014SideOfStr"
    "eet\022\t\n\005kNone\020\000\022\t\n\005kLeft\020\001\022\n\n\006kRight\020\002", 557);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tripcommon.proto", &protobuf_RegisterTypes);
  LatLng::default_instance_ = new LatLng();
  BoundingBox::default_instance_ = new BoundingBox();
  Location::default_instance_ = new Location();
  LatLng::default_instance_->InitAsDefaultInstance();
  BoundingBox::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tripcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tripcommon_2eproto {
  StaticDescriptorInitializer_tripcommon_2eproto() {
    protobuf_AddDesc_tripcommon_2eproto();
  }
} static_descriptor_initializer_tripcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LatLng::kLatFieldNumber;
const int LatLng::kLngFieldNumber;
#endif  // !_MSC_VER

LatLng::LatLng()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LatLng::InitAsDefaultInstance() {
}

LatLng::LatLng(const LatLng& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LatLng::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lng_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatLng::~LatLng() {
  SharedDtor();
}

void LatLng::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LatLng::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatLng::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatLng_descriptor_;
}

const LatLng& LatLng::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
  return *default_instance_;
}

LatLng* LatLng::default_instance_ = NULL;

LatLng* LatLng::New() const {
  return new LatLng;
}

void LatLng::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lat_ = 0;
    lng_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LatLng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_lng;
        break;
      }

      // optional float lng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LatLng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lat(), output);
  }

  // optional float lng = 2;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lng(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LatLng::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lat(), target);
  }

  // optional float lng = 2;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lng(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LatLng::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float lat = 1;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lng = 2;
    if (has_lng()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatLng::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LatLng* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LatLng*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LatLng::MergeFrom(const LatLng& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LatLng::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatLng::CopyFrom(const LatLng& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatLng::IsInitialized() const {

  return true;
}

void LatLng::Swap(LatLng* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LatLng::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatLng_descriptor_;
  metadata.reflection = LatLng_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoundingBox::kMinLlFieldNumber;
const int BoundingBox::kMaxLlFieldNumber;
#endif  // !_MSC_VER

BoundingBox::BoundingBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoundingBox::InitAsDefaultInstance() {
  min_ll_ = const_cast< ::valhalla::odin::LatLng*>(&::valhalla::odin::LatLng::default_instance());
  max_ll_ = const_cast< ::valhalla::odin::LatLng*>(&::valhalla::odin::LatLng::default_instance());
}

BoundingBox::BoundingBox(const BoundingBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoundingBox::SharedCtor() {
  _cached_size_ = 0;
  min_ll_ = NULL;
  max_ll_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundingBox::~BoundingBox() {
  SharedDtor();
}

void BoundingBox::SharedDtor() {
  if (this != default_instance_) {
    delete min_ll_;
    delete max_ll_;
  }
}

void BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundingBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundingBox_descriptor_;
}

const BoundingBox& BoundingBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
  return *default_instance_;
}

BoundingBox* BoundingBox::default_instance_ = NULL;

BoundingBox* BoundingBox::New() const {
  return new BoundingBox;
}

void BoundingBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_min_ll()) {
      if (min_ll_ != NULL) min_ll_->::valhalla::odin::LatLng::Clear();
    }
    if (has_max_ll()) {
      if (max_ll_ != NULL) max_ll_->::valhalla::odin::LatLng::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.odin.LatLng min_ll = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_max_ll;
        break;
      }

      // optional .valhalla.odin.LatLng max_ll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.odin.LatLng min_ll = 1;
  if (has_min_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->min_ll(), output);
  }

  // optional .valhalla.odin.LatLng max_ll = 2;
  if (has_max_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->max_ll(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoundingBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .valhalla.odin.LatLng min_ll = 1;
  if (has_min_ll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->min_ll(), target);
  }

  // optional .valhalla.odin.LatLng max_ll = 2;
  if (has_max_ll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->max_ll(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoundingBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.odin.LatLng min_ll = 1;
    if (has_min_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_ll());
    }

    // optional .valhalla.odin.LatLng max_ll = 2;
    if (has_max_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_ll());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoundingBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoundingBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_ll()) {
      mutable_min_ll()->::valhalla::odin::LatLng::MergeFrom(from.min_ll());
    }
    if (from.has_max_ll()) {
      mutable_max_ll()->::valhalla::odin::LatLng::MergeFrom(from.max_ll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {

  return true;
}

void BoundingBox::Swap(BoundingBox* other) {
  if (other != this) {
    std::swap(min_ll_, other->min_ll_);
    std::swap(max_ll_, other->max_ll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoundingBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundingBox_descriptor_;
  metadata.reflection = BoundingBox_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Location_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_Type_descriptor_;
}
bool Location_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Location_Type Location::kBreak;
const Location_Type Location::kThrough;
const Location_Type Location::Type_MIN;
const Location_Type Location::Type_MAX;
const int Location::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Location_SideOfStreet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_SideOfStreet_descriptor_;
}
bool Location_SideOfStreet_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Location_SideOfStreet Location::kNone;
const Location_SideOfStreet Location::kLeft;
const Location_SideOfStreet Location::kRight;
const Location_SideOfStreet Location::SideOfStreet_MIN;
const Location_SideOfStreet Location::SideOfStreet_MAX;
const int Location::SideOfStreet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Location::kLlFieldNumber;
const int Location::kTypeFieldNumber;
const int Location::kHeadingFieldNumber;
const int Location::kNameFieldNumber;
const int Location::kStreetFieldNumber;
const int Location::kCityFieldNumber;
const int Location::kStateFieldNumber;
const int Location::kPostalCodeFieldNumber;
const int Location::kCountryFieldNumber;
const int Location::kDateTimeFieldNumber;
const int Location::kSideOfStreetFieldNumber;
const int Location::kOriginalIndexFieldNumber;
#endif  // !_MSC_VER

Location::Location()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Location::InitAsDefaultInstance() {
  ll_ = const_cast< ::valhalla::odin::LatLng*>(&::valhalla::odin::LatLng::default_instance());
}

Location::Location(const Location& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Location::SharedCtor() {
  _cached_size_ = 0;
  ll_ = NULL;
  type_ = 0;
  heading_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_of_street_ = 0;
  original_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location::~Location() {
  SharedDtor();
}

void Location::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
    delete postal_code_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (date_time_ != &::google::protobuf::internal::kEmptyString) {
    delete date_time_;
  }
  if (this != default_instance_) {
    delete ll_;
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_descriptor_;
}

const Location& Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New() const {
  return new Location;
}

void Location::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ll()) {
      if (ll_ != NULL) ll_->::valhalla::odin::LatLng::Clear();
    }
    type_ = 0;
    heading_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::kEmptyString) {
        street_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
    if (has_postal_code()) {
      if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
        postal_code_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_date_time()) {
      if (date_time_ != &::google::protobuf::internal::kEmptyString) {
        date_time_->clear();
      }
    }
    side_of_street_ = 0;
    original_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.odin.LatLng ll = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .valhalla.odin.Location.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::Location_Type_IsValid(value)) {
            set_type(static_cast< ::valhalla::odin::Location_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heading;
        break;
      }

      // optional uint32 heading = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_street;
        break;
      }

      // optional string street = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // optional string city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_state;
        break;
      }

      // optional string state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_postal_code;
        break;
      }

      // optional string postal_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postal_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postal_code().data(), this->postal_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_country;
        break;
      }

      // optional string country = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_date_time;
        break;
      }

      // optional string date_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date_time().data(), this->date_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_side_of_street;
        break;
      }

      // optional .valhalla.odin.Location.SideOfStreet side_of_street = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side_of_street:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::Location_SideOfStreet_IsValid(value)) {
            set_side_of_street(static_cast< ::valhalla::odin::Location_SideOfStreet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_original_index;
        break;
      }

      // optional uint32 original_index = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &original_index_)));
          set_has_original_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.odin.LatLng ll = 1;
  if (has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ll(), output);
  }

  // optional .valhalla.odin.Location.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->heading(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string street = 5;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->street(), output);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->city(), output);
  }

  // optional string state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->state(), output);
  }

  // optional string postal_code = 8;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->postal_code(), output);
  }

  // optional string country = 9;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->country(), output);
  }

  // optional string date_time = 10;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->date_time(), output);
  }

  // optional .valhalla.odin.Location.SideOfStreet side_of_street = 11;
  if (has_side_of_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->side_of_street(), output);
  }

  // optional uint32 original_index = 12;
  if (has_original_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->original_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .valhalla.odin.LatLng ll = 1;
  if (has_ll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ll(), target);
  }

  // optional .valhalla.odin.Location.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 heading = 3;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->heading(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string street = 5;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->street(), target);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  // optional string state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->state(), target);
  }

  // optional string postal_code = 8;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->postal_code(), target);
  }

  // optional string country = 9;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->country(), target);
  }

  // optional string date_time = 10;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->date_time(), target);
  }

  // optional .valhalla.odin.Location.SideOfStreet side_of_street = 11;
  if (has_side_of_street()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->side_of_street(), target);
  }

  // optional uint32 original_index = 12;
  if (has_original_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->original_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.odin.LatLng ll = 1;
    if (has_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ll());
    }

    // optional .valhalla.odin.Location.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 heading = 3;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heading());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string street = 5;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string postal_code = 8;
    if (has_postal_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string country = 9;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string date_time = 10;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_time());
    }

    // optional .valhalla.odin.Location.SideOfStreet side_of_street = 11;
    if (has_side_of_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side_of_street());
    }

    // optional uint32 original_index = 12;
    if (has_original_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->original_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Location*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ll()) {
      mutable_ll()->::valhalla::odin::LatLng::MergeFrom(from.ll());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_postal_code()) {
      set_postal_code(from.postal_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_date_time()) {
      set_date_time(from.date_time());
    }
    if (from.has_side_of_street()) {
      set_side_of_street(from.side_of_street());
    }
    if (from.has_original_index()) {
      set_original_index(from.original_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {

  return true;
}

void Location::Swap(Location* other) {
  if (other != this) {
    std::swap(ll_, other->ll_);
    std::swap(type_, other->type_);
    std::swap(heading_, other->heading_);
    std::swap(name_, other->name_);
    std::swap(street_, other->street_);
    std::swap(city_, other->city_);
    std::swap(state_, other->state_);
    std::swap(postal_code_, other->postal_code_);
    std::swap(country_, other->country_);
    std::swap(date_time_, other->date_time_);
    std::swap(side_of_street_, other->side_of_street_);
    std::swap(original_index_, other->original_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_descriptor_;
  metadata.reflection = Location_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace odin
}  // namespace valhalla

// @@protoc_insertion_point(global_scope)
