// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace valhalla {
namespace mjolnir {

namespace {

const ::google::protobuf::Descriptor* Transit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transit_Stop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transit_Stop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transit_StopPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transit_StopPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transit_Route_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transit_Route_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transit_Shape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transit_Shape_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Transit_VehicleType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_transit_2eproto() {
  protobuf_AddDesc_transit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "transit.proto");
  GOOGLE_CHECK(file != NULL);
  Transit_descriptor_ = file->message_type(0);
  static const int Transit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit, stops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit, stop_pairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit, shapes_),
  };
  Transit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transit_descriptor_,
      Transit::default_instance_,
      Transit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transit));
  Transit_Stop_descriptor_ = Transit_descriptor_->nested_type(0);
  static const int Transit_Stop_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Stop, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Stop, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Stop, graphid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Stop, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Stop, onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Stop, osm_way_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Stop, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Stop, wheelchair_boarding_),
  };
  Transit_Stop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transit_Stop_descriptor_,
      Transit_Stop::default_instance_,
      Transit_Stop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Stop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Stop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transit_Stop));
  Transit_StopPair_descriptor_ = Transit_descriptor_->nested_type(1);
  static const int Transit_StopPair_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, bikes_allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, destination_arrival_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, destination_graphid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, destination_onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, operated_by_onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, origin_departure_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, origin_graphid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, origin_onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, route_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, service_added_dates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, service_days_of_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, service_end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, service_except_dates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, service_start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, trip_headsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, trip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, wheelchair_accessible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, line_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, shape_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, origin_dist_traveled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, destination_dist_traveled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, frequency_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, frequency_headway_seconds_),
  };
  Transit_StopPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transit_StopPair_descriptor_,
      Transit_StopPair::default_instance_,
      Transit_StopPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_StopPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transit_StopPair));
  Transit_Route_descriptor_ = Transit_descriptor_->nested_type(2);
  static const int Transit_Route_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, operated_by_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, operated_by_onestop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, operated_by_website_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, route_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, route_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, route_long_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, route_text_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, vehicle_type_),
  };
  Transit_Route_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transit_Route_descriptor_,
      Transit_Route::default_instance_,
      Transit_Route_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Route, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transit_Route));
  Transit_Shape_descriptor_ = Transit_descriptor_->nested_type(3);
  static const int Transit_Shape_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Shape, shape_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Shape, encoded_shape_),
  };
  Transit_Shape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transit_Shape_descriptor_,
      Transit_Shape::default_instance_,
      Transit_Shape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Shape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transit_Shape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transit_Shape));
  Transit_VehicleType_descriptor_ = Transit_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_transit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transit_descriptor_, &Transit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transit_Stop_descriptor_, &Transit_Stop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transit_StopPair_descriptor_, &Transit_StopPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transit_Route_descriptor_, &Transit_Route::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transit_Shape_descriptor_, &Transit_Shape::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_transit_2eproto() {
  delete Transit::default_instance_;
  delete Transit_reflection_;
  delete Transit_Stop::default_instance_;
  delete Transit_Stop_reflection_;
  delete Transit_StopPair::default_instance_;
  delete Transit_StopPair_reflection_;
  delete Transit_Route::default_instance_;
  delete Transit_Route_reflection_;
  delete Transit_Shape::default_instance_;
  delete Transit_Shape_reflection_;
}

void protobuf_AddDesc_transit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtransit.proto\022\020valhalla.mjolnir\"\302\013\n\007Tr"
    "ansit\022-\n\005stops\030\001 \003(\0132\036.valhalla.mjolnir."
    "Transit.Stop\0226\n\nstop_pairs\030\002 \003(\0132\".valha"
    "lla.mjolnir.Transit.StopPair\022/\n\006routes\030\003"
    " \003(\0132\037.valhalla.mjolnir.Transit.Route\022/\n"
    "\006shapes\030\004 \003(\0132\037.valhalla.mjolnir.Transit"
    ".Shape\032\226\001\n\004Stop\022\013\n\003lon\030\001 \001(\002\022\013\n\003lat\030\002 \001("
    "\002\022\017\n\007graphid\030\003 \001(\004\022\014\n\004name\030\004 \001(\t\022\022\n\nones"
    "top_id\030\005 \001(\t\022\022\n\nosm_way_id\030\006 \001(\004\022\020\n\010time"
    "zone\030\010 \001(\r\022\033\n\023wheelchair_boarding\030\t \001(\010\032"
    "\222\005\n\010StopPair\022\025\n\rbikes_allowed\030\001 \001(\010\022\020\n\010b"
    "lock_id\030\002 \001(\r\022 \n\030destination_arrival_tim"
    "e\030\003 \001(\r\022\033\n\023destination_graphid\030\004 \001(\004\022\036\n\026"
    "destination_onestop_id\030\005 \001(\t\022\036\n\026operated"
    "_by_onestop_id\030\006 \001(\t\022\035\n\025origin_departure"
    "_time\030\007 \001(\r\022\026\n\016origin_graphid\030\010 \001(\004\022\031\n\021o"
    "rigin_onestop_id\030\t \001(\t\022\023\n\013route_index\030\n "
    "\001(\r\022\033\n\023service_added_dates\030\013 \003(\r\022\034\n\024serv"
    "ice_days_of_week\030\014 \003(\010\022\030\n\020service_end_da"
    "te\030\r \001(\r\022\034\n\024service_except_dates\030\016 \003(\r\022\032"
    "\n\022service_start_date\030\017 \001(\r\022\025\n\rtrip_heads"
    "ign\030\020 \001(\t\022\017\n\007trip_id\030\021 \001(\r\022\035\n\025wheelchair"
    "_accessible\030\022 \001(\010\022\017\n\007line_id\030\023 \001(\r\022\020\n\010sh"
    "ape_id\030\024 \001(\r\022\034\n\024origin_dist_traveled\030\025 \001"
    "(\002\022!\n\031destination_dist_traveled\030\026 \001(\002\022\032\n"
    "\022frequency_end_time\030\027 \001(\r\022!\n\031frequency_h"
    "eadway_seconds\030\030 \001(\r\032\231\002\n\005Route\022\014\n\004name\030\001"
    " \001(\t\022\022\n\nonestop_id\030\002 \001(\t\022\030\n\020operated_by_"
    "name\030\003 \001(\t\022\036\n\026operated_by_onestop_id\030\004 \001"
    "(\t\022\033\n\023operated_by_website\030\005 \001(\t\022\023\n\013route"
    "_color\030\006 \001(\r\022\022\n\nroute_desc\030\007 \001(\t\022\027\n\017rout"
    "e_long_name\030\010 \001(\t\022\030\n\020route_text_color\030\t "
    "\001(\r\022;\n\014vehicle_type\030\n \001(\0162%.valhalla.mjo"
    "lnir.Transit.VehicleType\0320\n\005Shape\022\020\n\010sha"
    "pe_id\030\001 \001(\r\022\025\n\rencoded_shape\030\002 \001(\014\"r\n\013Ve"
    "hicleType\022\t\n\005kTram\020\000\022\n\n\006kMetro\020\001\022\t\n\005kRai"
    "l\020\002\022\010\n\004kBus\020\003\022\n\n\006kFerry\020\004\022\r\n\tkCableCar\020\005"
    "\022\014\n\010kGondola\020\006\022\016\n\nkFunicular\020\007", 1510);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transit.proto", &protobuf_RegisterTypes);
  Transit::default_instance_ = new Transit();
  Transit_Stop::default_instance_ = new Transit_Stop();
  Transit_StopPair::default_instance_ = new Transit_StopPair();
  Transit_Route::default_instance_ = new Transit_Route();
  Transit_Shape::default_instance_ = new Transit_Shape();
  Transit::default_instance_->InitAsDefaultInstance();
  Transit_Stop::default_instance_->InitAsDefaultInstance();
  Transit_StopPair::default_instance_->InitAsDefaultInstance();
  Transit_Route::default_instance_->InitAsDefaultInstance();
  Transit_Shape::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transit_2eproto {
  StaticDescriptorInitializer_transit_2eproto() {
    protobuf_AddDesc_transit_2eproto();
  }
} static_descriptor_initializer_transit_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Transit_VehicleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transit_VehicleType_descriptor_;
}
bool Transit_VehicleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Transit_VehicleType Transit::kTram;
const Transit_VehicleType Transit::kMetro;
const Transit_VehicleType Transit::kRail;
const Transit_VehicleType Transit::kBus;
const Transit_VehicleType Transit::kFerry;
const Transit_VehicleType Transit::kCableCar;
const Transit_VehicleType Transit::kGondola;
const Transit_VehicleType Transit::kFunicular;
const Transit_VehicleType Transit::VehicleType_MIN;
const Transit_VehicleType Transit::VehicleType_MAX;
const int Transit::VehicleType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Transit_Stop::kLonFieldNumber;
const int Transit_Stop::kLatFieldNumber;
const int Transit_Stop::kGraphidFieldNumber;
const int Transit_Stop::kNameFieldNumber;
const int Transit_Stop::kOnestopIdFieldNumber;
const int Transit_Stop::kOsmWayIdFieldNumber;
const int Transit_Stop::kTimezoneFieldNumber;
const int Transit_Stop::kWheelchairBoardingFieldNumber;
#endif  // !_MSC_VER

Transit_Stop::Transit_Stop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transit_Stop::InitAsDefaultInstance() {
}

Transit_Stop::Transit_Stop(const Transit_Stop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transit_Stop::SharedCtor() {
  _cached_size_ = 0;
  lon_ = 0;
  lat_ = 0;
  graphid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  osm_way_id_ = GOOGLE_ULONGLONG(0);
  timezone_ = 0u;
  wheelchair_boarding_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transit_Stop::~Transit_Stop() {
  SharedDtor();
}

void Transit_Stop::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete onestop_id_;
  }
  if (this != default_instance_) {
  }
}

void Transit_Stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transit_Stop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transit_Stop_descriptor_;
}

const Transit_Stop& Transit_Stop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transit_2eproto();
  return *default_instance_;
}

Transit_Stop* Transit_Stop::default_instance_ = NULL;

Transit_Stop* Transit_Stop::New() const {
  return new Transit_Stop;
}

void Transit_Stop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lon_ = 0;
    lat_ = 0;
    graphid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_onestop_id()) {
      if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        onestop_id_->clear();
      }
    }
    osm_way_id_ = GOOGLE_ULONGLONG(0);
    timezone_ = 0u;
    wheelchair_boarding_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transit_Stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_lat;
        break;
      }

      // optional float lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_graphid;
        break;
      }

      // optional uint64 graphid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_graphid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &graphid_)));
          set_has_graphid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_onestop_id;
        break;
      }

      // optional string onestop_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onestop_id().data(), this->onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_osm_way_id;
        break;
      }

      // optional uint64 osm_way_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_osm_way_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &osm_way_id_)));
          set_has_osm_way_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_timezone;
        break;
      }

      // optional uint32 timezone = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timezone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timezone_)));
          set_has_timezone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_wheelchair_boarding;
        break;
      }

      // optional bool wheelchair_boarding = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wheelchair_boarding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheelchair_boarding_)));
          set_has_wheelchair_boarding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transit_Stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float lon = 1;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lon(), output);
  }

  // optional float lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lat(), output);
  }

  // optional uint64 graphid = 3;
  if (has_graphid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->graphid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string onestop_id = 5;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->onestop_id(), output);
  }

  // optional uint64 osm_way_id = 6;
  if (has_osm_way_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->osm_way_id(), output);
  }

  // optional uint32 timezone = 8;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timezone(), output);
  }

  // optional bool wheelchair_boarding = 9;
  if (has_wheelchair_boarding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->wheelchair_boarding(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transit_Stop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float lon = 1;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lon(), target);
  }

  // optional float lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lat(), target);
  }

  // optional uint64 graphid = 3;
  if (has_graphid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->graphid(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string onestop_id = 5;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->onestop_id(), target);
  }

  // optional uint64 osm_way_id = 6;
  if (has_osm_way_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->osm_way_id(), target);
  }

  // optional uint32 timezone = 8;
  if (has_timezone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timezone(), target);
  }

  // optional bool wheelchair_boarding = 9;
  if (has_wheelchair_boarding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->wheelchair_boarding(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transit_Stop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float lon = 1;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional float lat = 2;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional uint64 graphid = 3;
    if (has_graphid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->graphid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string onestop_id = 5;
    if (has_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
    }

    // optional uint64 osm_way_id = 6;
    if (has_osm_way_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->osm_way_id());
    }

    // optional uint32 timezone = 8;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timezone());
    }

    // optional bool wheelchair_boarding = 9;
    if (has_wheelchair_boarding()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transit_Stop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transit_Stop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transit_Stop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transit_Stop::MergeFrom(const Transit_Stop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_graphid()) {
      set_graphid(from.graphid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_onestop_id()) {
      set_onestop_id(from.onestop_id());
    }
    if (from.has_osm_way_id()) {
      set_osm_way_id(from.osm_way_id());
    }
    if (from.has_timezone()) {
      set_timezone(from.timezone());
    }
    if (from.has_wheelchair_boarding()) {
      set_wheelchair_boarding(from.wheelchair_boarding());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transit_Stop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transit_Stop::CopyFrom(const Transit_Stop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Stop::IsInitialized() const {

  return true;
}

void Transit_Stop::Swap(Transit_Stop* other) {
  if (other != this) {
    std::swap(lon_, other->lon_);
    std::swap(lat_, other->lat_);
    std::swap(graphid_, other->graphid_);
    std::swap(name_, other->name_);
    std::swap(onestop_id_, other->onestop_id_);
    std::swap(osm_way_id_, other->osm_way_id_);
    std::swap(timezone_, other->timezone_);
    std::swap(wheelchair_boarding_, other->wheelchair_boarding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transit_Stop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transit_Stop_descriptor_;
  metadata.reflection = Transit_Stop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Transit_StopPair::kBikesAllowedFieldNumber;
const int Transit_StopPair::kBlockIdFieldNumber;
const int Transit_StopPair::kDestinationArrivalTimeFieldNumber;
const int Transit_StopPair::kDestinationGraphidFieldNumber;
const int Transit_StopPair::kDestinationOnestopIdFieldNumber;
const int Transit_StopPair::kOperatedByOnestopIdFieldNumber;
const int Transit_StopPair::kOriginDepartureTimeFieldNumber;
const int Transit_StopPair::kOriginGraphidFieldNumber;
const int Transit_StopPair::kOriginOnestopIdFieldNumber;
const int Transit_StopPair::kRouteIndexFieldNumber;
const int Transit_StopPair::kServiceAddedDatesFieldNumber;
const int Transit_StopPair::kServiceDaysOfWeekFieldNumber;
const int Transit_StopPair::kServiceEndDateFieldNumber;
const int Transit_StopPair::kServiceExceptDatesFieldNumber;
const int Transit_StopPair::kServiceStartDateFieldNumber;
const int Transit_StopPair::kTripHeadsignFieldNumber;
const int Transit_StopPair::kTripIdFieldNumber;
const int Transit_StopPair::kWheelchairAccessibleFieldNumber;
const int Transit_StopPair::kLineIdFieldNumber;
const int Transit_StopPair::kShapeIdFieldNumber;
const int Transit_StopPair::kOriginDistTraveledFieldNumber;
const int Transit_StopPair::kDestinationDistTraveledFieldNumber;
const int Transit_StopPair::kFrequencyEndTimeFieldNumber;
const int Transit_StopPair::kFrequencyHeadwaySecondsFieldNumber;
#endif  // !_MSC_VER

Transit_StopPair::Transit_StopPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transit_StopPair::InitAsDefaultInstance() {
}

Transit_StopPair::Transit_StopPair(const Transit_StopPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transit_StopPair::SharedCtor() {
  _cached_size_ = 0;
  bikes_allowed_ = false;
  block_id_ = 0u;
  destination_arrival_time_ = 0u;
  destination_graphid_ = GOOGLE_ULONGLONG(0);
  destination_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operated_by_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  origin_departure_time_ = 0u;
  origin_graphid_ = GOOGLE_ULONGLONG(0);
  origin_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  route_index_ = 0u;
  service_end_date_ = 0u;
  service_start_date_ = 0u;
  trip_headsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trip_id_ = 0u;
  wheelchair_accessible_ = false;
  line_id_ = 0u;
  shape_id_ = 0u;
  origin_dist_traveled_ = 0;
  destination_dist_traveled_ = 0;
  frequency_end_time_ = 0u;
  frequency_headway_seconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transit_StopPair::~Transit_StopPair() {
  SharedDtor();
}

void Transit_StopPair::SharedDtor() {
  if (destination_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete destination_onestop_id_;
  }
  if (operated_by_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete operated_by_onestop_id_;
  }
  if (origin_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete origin_onestop_id_;
  }
  if (trip_headsign_ != &::google::protobuf::internal::kEmptyString) {
    delete trip_headsign_;
  }
  if (this != default_instance_) {
  }
}

void Transit_StopPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transit_StopPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transit_StopPair_descriptor_;
}

const Transit_StopPair& Transit_StopPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transit_2eproto();
  return *default_instance_;
}

Transit_StopPair* Transit_StopPair::default_instance_ = NULL;

Transit_StopPair* Transit_StopPair::New() const {
  return new Transit_StopPair;
}

void Transit_StopPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bikes_allowed_ = false;
    block_id_ = 0u;
    destination_arrival_time_ = 0u;
    destination_graphid_ = GOOGLE_ULONGLONG(0);
    if (has_destination_onestop_id()) {
      if (destination_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        destination_onestop_id_->clear();
      }
    }
    if (has_operated_by_onestop_id()) {
      if (operated_by_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        operated_by_onestop_id_->clear();
      }
    }
    origin_departure_time_ = 0u;
    origin_graphid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_origin_onestop_id()) {
      if (origin_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        origin_onestop_id_->clear();
      }
    }
    route_index_ = 0u;
    service_end_date_ = 0u;
    service_start_date_ = 0u;
    if (has_trip_headsign()) {
      if (trip_headsign_ != &::google::protobuf::internal::kEmptyString) {
        trip_headsign_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    trip_id_ = 0u;
    wheelchair_accessible_ = false;
    line_id_ = 0u;
    shape_id_ = 0u;
    origin_dist_traveled_ = 0;
    destination_dist_traveled_ = 0;
    frequency_end_time_ = 0u;
    frequency_headway_seconds_ = 0u;
  }
  service_added_dates_.Clear();
  service_days_of_week_.Clear();
  service_except_dates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transit_StopPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bikes_allowed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bikes_allowed_)));
          set_has_bikes_allowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_id;
        break;
      }

      // optional uint32 block_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
          set_has_block_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destination_arrival_time;
        break;
      }

      // optional uint32 destination_arrival_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination_arrival_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_arrival_time_)));
          set_has_destination_arrival_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_destination_graphid;
        break;
      }

      // optional uint64 destination_graphid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destination_graphid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destination_graphid_)));
          set_has_destination_graphid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_destination_onestop_id;
        break;
      }

      // optional string destination_onestop_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destination_onestop_id().data(), this->destination_onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_operated_by_onestop_id;
        break;
      }

      // optional string operated_by_onestop_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operated_by_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operated_by_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operated_by_onestop_id().data(), this->operated_by_onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_origin_departure_time;
        break;
      }

      // optional uint32 origin_departure_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_departure_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_departure_time_)));
          set_has_origin_departure_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_origin_graphid;
        break;
      }

      // optional uint64 origin_graphid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_graphid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &origin_graphid_)));
          set_has_origin_graphid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_origin_onestop_id;
        break;
      }

      // optional string origin_onestop_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->origin_onestop_id().data(), this->origin_onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_route_index;
        break;
      }

      // optional uint32 route_index = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_index_)));
          set_has_route_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_service_added_dates;
        break;
      }

      // repeated uint32 service_added_dates = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_added_dates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_service_added_dates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_added_dates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_service_added_dates;
        if (input->ExpectTag(96)) goto parse_service_days_of_week;
        break;
      }

      // repeated bool service_days_of_week = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_days_of_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 96, input, this->mutable_service_days_of_week())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_service_days_of_week())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_service_days_of_week;
        if (input->ExpectTag(104)) goto parse_service_end_date;
        break;
      }

      // optional uint32 service_end_date = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_end_date_)));
          set_has_service_end_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_service_except_dates;
        break;
      }

      // repeated uint32 service_except_dates = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_except_dates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_service_except_dates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_except_dates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_service_except_dates;
        if (input->ExpectTag(120)) goto parse_service_start_date;
        break;
      }

      // optional uint32 service_start_date = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_start_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_start_date_)));
          set_has_service_start_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_trip_headsign;
        break;
      }

      // optional string trip_headsign = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trip_headsign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trip_headsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trip_headsign().data(), this->trip_headsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_trip_id;
        break;
      }

      // optional uint32 trip_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trip_id_)));
          set_has_trip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_wheelchair_accessible;
        break;
      }

      // optional bool wheelchair_accessible = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wheelchair_accessible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheelchair_accessible_)));
          set_has_wheelchair_accessible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_line_id;
        break;
      }

      // optional uint32 line_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_id_)));
          set_has_line_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_shape_id;
        break;
      }

      // optional uint32 shape_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shape_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shape_id_)));
          set_has_shape_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_origin_dist_traveled;
        break;
      }

      // optional float origin_dist_traveled = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_origin_dist_traveled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &origin_dist_traveled_)));
          set_has_origin_dist_traveled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_destination_dist_traveled;
        break;
      }

      // optional float destination_dist_traveled = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_destination_dist_traveled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destination_dist_traveled_)));
          set_has_destination_dist_traveled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_frequency_end_time;
        break;
      }

      // optional uint32 frequency_end_time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frequency_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_end_time_)));
          set_has_frequency_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_frequency_headway_seconds;
        break;
      }

      // optional uint32 frequency_headway_seconds = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frequency_headway_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_headway_seconds_)));
          set_has_frequency_headway_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transit_StopPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bikes_allowed = 1;
  if (has_bikes_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bikes_allowed(), output);
  }

  // optional uint32 block_id = 2;
  if (has_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->block_id(), output);
  }

  // optional uint32 destination_arrival_time = 3;
  if (has_destination_arrival_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destination_arrival_time(), output);
  }

  // optional uint64 destination_graphid = 4;
  if (has_destination_graphid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->destination_graphid(), output);
  }

  // optional string destination_onestop_id = 5;
  if (has_destination_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination_onestop_id().data(), this->destination_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->destination_onestop_id(), output);
  }

  // optional string operated_by_onestop_id = 6;
  if (has_operated_by_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operated_by_onestop_id().data(), this->operated_by_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->operated_by_onestop_id(), output);
  }

  // optional uint32 origin_departure_time = 7;
  if (has_origin_departure_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->origin_departure_time(), output);
  }

  // optional uint64 origin_graphid = 8;
  if (has_origin_graphid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->origin_graphid(), output);
  }

  // optional string origin_onestop_id = 9;
  if (has_origin_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origin_onestop_id().data(), this->origin_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->origin_onestop_id(), output);
  }

  // optional uint32 route_index = 10;
  if (has_route_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->route_index(), output);
  }

  // repeated uint32 service_added_dates = 11;
  for (int i = 0; i < this->service_added_dates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->service_added_dates(i), output);
  }

  // repeated bool service_days_of_week = 12;
  for (int i = 0; i < this->service_days_of_week_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      12, this->service_days_of_week(i), output);
  }

  // optional uint32 service_end_date = 13;
  if (has_service_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->service_end_date(), output);
  }

  // repeated uint32 service_except_dates = 14;
  for (int i = 0; i < this->service_except_dates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->service_except_dates(i), output);
  }

  // optional uint32 service_start_date = 15;
  if (has_service_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->service_start_date(), output);
  }

  // optional string trip_headsign = 16;
  if (has_trip_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trip_headsign().data(), this->trip_headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->trip_headsign(), output);
  }

  // optional uint32 trip_id = 17;
  if (has_trip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->trip_id(), output);
  }

  // optional bool wheelchair_accessible = 18;
  if (has_wheelchair_accessible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->wheelchair_accessible(), output);
  }

  // optional uint32 line_id = 19;
  if (has_line_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->line_id(), output);
  }

  // optional uint32 shape_id = 20;
  if (has_shape_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->shape_id(), output);
  }

  // optional float origin_dist_traveled = 21;
  if (has_origin_dist_traveled()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->origin_dist_traveled(), output);
  }

  // optional float destination_dist_traveled = 22;
  if (has_destination_dist_traveled()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->destination_dist_traveled(), output);
  }

  // optional uint32 frequency_end_time = 23;
  if (has_frequency_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->frequency_end_time(), output);
  }

  // optional uint32 frequency_headway_seconds = 24;
  if (has_frequency_headway_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->frequency_headway_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transit_StopPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bikes_allowed = 1;
  if (has_bikes_allowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bikes_allowed(), target);
  }

  // optional uint32 block_id = 2;
  if (has_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->block_id(), target);
  }

  // optional uint32 destination_arrival_time = 3;
  if (has_destination_arrival_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->destination_arrival_time(), target);
  }

  // optional uint64 destination_graphid = 4;
  if (has_destination_graphid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->destination_graphid(), target);
  }

  // optional string destination_onestop_id = 5;
  if (has_destination_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destination_onestop_id().data(), this->destination_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->destination_onestop_id(), target);
  }

  // optional string operated_by_onestop_id = 6;
  if (has_operated_by_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operated_by_onestop_id().data(), this->operated_by_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->operated_by_onestop_id(), target);
  }

  // optional uint32 origin_departure_time = 7;
  if (has_origin_departure_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->origin_departure_time(), target);
  }

  // optional uint64 origin_graphid = 8;
  if (has_origin_graphid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->origin_graphid(), target);
  }

  // optional string origin_onestop_id = 9;
  if (has_origin_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origin_onestop_id().data(), this->origin_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->origin_onestop_id(), target);
  }

  // optional uint32 route_index = 10;
  if (has_route_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->route_index(), target);
  }

  // repeated uint32 service_added_dates = 11;
  for (int i = 0; i < this->service_added_dates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->service_added_dates(i), target);
  }

  // repeated bool service_days_of_week = 12;
  for (int i = 0; i < this->service_days_of_week_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(12, this->service_days_of_week(i), target);
  }

  // optional uint32 service_end_date = 13;
  if (has_service_end_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->service_end_date(), target);
  }

  // repeated uint32 service_except_dates = 14;
  for (int i = 0; i < this->service_except_dates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->service_except_dates(i), target);
  }

  // optional uint32 service_start_date = 15;
  if (has_service_start_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->service_start_date(), target);
  }

  // optional string trip_headsign = 16;
  if (has_trip_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trip_headsign().data(), this->trip_headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->trip_headsign(), target);
  }

  // optional uint32 trip_id = 17;
  if (has_trip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->trip_id(), target);
  }

  // optional bool wheelchair_accessible = 18;
  if (has_wheelchair_accessible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->wheelchair_accessible(), target);
  }

  // optional uint32 line_id = 19;
  if (has_line_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->line_id(), target);
  }

  // optional uint32 shape_id = 20;
  if (has_shape_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->shape_id(), target);
  }

  // optional float origin_dist_traveled = 21;
  if (has_origin_dist_traveled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->origin_dist_traveled(), target);
  }

  // optional float destination_dist_traveled = 22;
  if (has_destination_dist_traveled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->destination_dist_traveled(), target);
  }

  // optional uint32 frequency_end_time = 23;
  if (has_frequency_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->frequency_end_time(), target);
  }

  // optional uint32 frequency_headway_seconds = 24;
  if (has_frequency_headway_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->frequency_headway_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transit_StopPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bikes_allowed = 1;
    if (has_bikes_allowed()) {
      total_size += 1 + 1;
    }

    // optional uint32 block_id = 2;
    if (has_block_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_id());
    }

    // optional uint32 destination_arrival_time = 3;
    if (has_destination_arrival_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination_arrival_time());
    }

    // optional uint64 destination_graphid = 4;
    if (has_destination_graphid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destination_graphid());
    }

    // optional string destination_onestop_id = 5;
    if (has_destination_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_onestop_id());
    }

    // optional string operated_by_onestop_id = 6;
    if (has_operated_by_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operated_by_onestop_id());
    }

    // optional uint32 origin_departure_time = 7;
    if (has_origin_departure_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin_departure_time());
    }

    // optional uint64 origin_graphid = 8;
    if (has_origin_graphid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->origin_graphid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string origin_onestop_id = 9;
    if (has_origin_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin_onestop_id());
    }

    // optional uint32 route_index = 10;
    if (has_route_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->route_index());
    }

    // optional uint32 service_end_date = 13;
    if (has_service_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_end_date());
    }

    // optional uint32 service_start_date = 15;
    if (has_service_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_start_date());
    }

    // optional string trip_headsign = 16;
    if (has_trip_headsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trip_headsign());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 trip_id = 17;
    if (has_trip_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trip_id());
    }

    // optional bool wheelchair_accessible = 18;
    if (has_wheelchair_accessible()) {
      total_size += 2 + 1;
    }

    // optional uint32 line_id = 19;
    if (has_line_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_id());
    }

    // optional uint32 shape_id = 20;
    if (has_shape_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shape_id());
    }

    // optional float origin_dist_traveled = 21;
    if (has_origin_dist_traveled()) {
      total_size += 2 + 4;
    }

    // optional float destination_dist_traveled = 22;
    if (has_destination_dist_traveled()) {
      total_size += 2 + 4;
    }

    // optional uint32 frequency_end_time = 23;
    if (has_frequency_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency_end_time());
    }

    // optional uint32 frequency_headway_seconds = 24;
    if (has_frequency_headway_seconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency_headway_seconds());
    }

  }
  // repeated uint32 service_added_dates = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->service_added_dates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->service_added_dates(i));
    }
    total_size += 1 * this->service_added_dates_size() + data_size;
  }

  // repeated bool service_days_of_week = 12;
  {
    int data_size = 0;
    data_size = 1 * this->service_days_of_week_size();
    total_size += 1 * this->service_days_of_week_size() + data_size;
  }

  // repeated uint32 service_except_dates = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->service_except_dates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->service_except_dates(i));
    }
    total_size += 1 * this->service_except_dates_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transit_StopPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transit_StopPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transit_StopPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transit_StopPair::MergeFrom(const Transit_StopPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  service_added_dates_.MergeFrom(from.service_added_dates_);
  service_days_of_week_.MergeFrom(from.service_days_of_week_);
  service_except_dates_.MergeFrom(from.service_except_dates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bikes_allowed()) {
      set_bikes_allowed(from.bikes_allowed());
    }
    if (from.has_block_id()) {
      set_block_id(from.block_id());
    }
    if (from.has_destination_arrival_time()) {
      set_destination_arrival_time(from.destination_arrival_time());
    }
    if (from.has_destination_graphid()) {
      set_destination_graphid(from.destination_graphid());
    }
    if (from.has_destination_onestop_id()) {
      set_destination_onestop_id(from.destination_onestop_id());
    }
    if (from.has_operated_by_onestop_id()) {
      set_operated_by_onestop_id(from.operated_by_onestop_id());
    }
    if (from.has_origin_departure_time()) {
      set_origin_departure_time(from.origin_departure_time());
    }
    if (from.has_origin_graphid()) {
      set_origin_graphid(from.origin_graphid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_origin_onestop_id()) {
      set_origin_onestop_id(from.origin_onestop_id());
    }
    if (from.has_route_index()) {
      set_route_index(from.route_index());
    }
    if (from.has_service_end_date()) {
      set_service_end_date(from.service_end_date());
    }
    if (from.has_service_start_date()) {
      set_service_start_date(from.service_start_date());
    }
    if (from.has_trip_headsign()) {
      set_trip_headsign(from.trip_headsign());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_trip_id()) {
      set_trip_id(from.trip_id());
    }
    if (from.has_wheelchair_accessible()) {
      set_wheelchair_accessible(from.wheelchair_accessible());
    }
    if (from.has_line_id()) {
      set_line_id(from.line_id());
    }
    if (from.has_shape_id()) {
      set_shape_id(from.shape_id());
    }
    if (from.has_origin_dist_traveled()) {
      set_origin_dist_traveled(from.origin_dist_traveled());
    }
    if (from.has_destination_dist_traveled()) {
      set_destination_dist_traveled(from.destination_dist_traveled());
    }
    if (from.has_frequency_end_time()) {
      set_frequency_end_time(from.frequency_end_time());
    }
    if (from.has_frequency_headway_seconds()) {
      set_frequency_headway_seconds(from.frequency_headway_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transit_StopPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transit_StopPair::CopyFrom(const Transit_StopPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_StopPair::IsInitialized() const {

  return true;
}

void Transit_StopPair::Swap(Transit_StopPair* other) {
  if (other != this) {
    std::swap(bikes_allowed_, other->bikes_allowed_);
    std::swap(block_id_, other->block_id_);
    std::swap(destination_arrival_time_, other->destination_arrival_time_);
    std::swap(destination_graphid_, other->destination_graphid_);
    std::swap(destination_onestop_id_, other->destination_onestop_id_);
    std::swap(operated_by_onestop_id_, other->operated_by_onestop_id_);
    std::swap(origin_departure_time_, other->origin_departure_time_);
    std::swap(origin_graphid_, other->origin_graphid_);
    std::swap(origin_onestop_id_, other->origin_onestop_id_);
    std::swap(route_index_, other->route_index_);
    service_added_dates_.Swap(&other->service_added_dates_);
    service_days_of_week_.Swap(&other->service_days_of_week_);
    std::swap(service_end_date_, other->service_end_date_);
    service_except_dates_.Swap(&other->service_except_dates_);
    std::swap(service_start_date_, other->service_start_date_);
    std::swap(trip_headsign_, other->trip_headsign_);
    std::swap(trip_id_, other->trip_id_);
    std::swap(wheelchair_accessible_, other->wheelchair_accessible_);
    std::swap(line_id_, other->line_id_);
    std::swap(shape_id_, other->shape_id_);
    std::swap(origin_dist_traveled_, other->origin_dist_traveled_);
    std::swap(destination_dist_traveled_, other->destination_dist_traveled_);
    std::swap(frequency_end_time_, other->frequency_end_time_);
    std::swap(frequency_headway_seconds_, other->frequency_headway_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transit_StopPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transit_StopPair_descriptor_;
  metadata.reflection = Transit_StopPair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Transit_Route::kNameFieldNumber;
const int Transit_Route::kOnestopIdFieldNumber;
const int Transit_Route::kOperatedByNameFieldNumber;
const int Transit_Route::kOperatedByOnestopIdFieldNumber;
const int Transit_Route::kOperatedByWebsiteFieldNumber;
const int Transit_Route::kRouteColorFieldNumber;
const int Transit_Route::kRouteDescFieldNumber;
const int Transit_Route::kRouteLongNameFieldNumber;
const int Transit_Route::kRouteTextColorFieldNumber;
const int Transit_Route::kVehicleTypeFieldNumber;
#endif  // !_MSC_VER

Transit_Route::Transit_Route()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transit_Route::InitAsDefaultInstance() {
}

Transit_Route::Transit_Route(const Transit_Route& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transit_Route::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operated_by_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operated_by_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operated_by_website_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  route_color_ = 0u;
  route_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  route_long_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  route_text_color_ = 0u;
  vehicle_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transit_Route::~Transit_Route() {
  SharedDtor();
}

void Transit_Route::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete onestop_id_;
  }
  if (operated_by_name_ != &::google::protobuf::internal::kEmptyString) {
    delete operated_by_name_;
  }
  if (operated_by_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete operated_by_onestop_id_;
  }
  if (operated_by_website_ != &::google::protobuf::internal::kEmptyString) {
    delete operated_by_website_;
  }
  if (route_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete route_desc_;
  }
  if (route_long_name_ != &::google::protobuf::internal::kEmptyString) {
    delete route_long_name_;
  }
  if (this != default_instance_) {
  }
}

void Transit_Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transit_Route::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transit_Route_descriptor_;
}

const Transit_Route& Transit_Route::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transit_2eproto();
  return *default_instance_;
}

Transit_Route* Transit_Route::default_instance_ = NULL;

Transit_Route* Transit_Route::New() const {
  return new Transit_Route;
}

void Transit_Route::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_onestop_id()) {
      if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        onestop_id_->clear();
      }
    }
    if (has_operated_by_name()) {
      if (operated_by_name_ != &::google::protobuf::internal::kEmptyString) {
        operated_by_name_->clear();
      }
    }
    if (has_operated_by_onestop_id()) {
      if (operated_by_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        operated_by_onestop_id_->clear();
      }
    }
    if (has_operated_by_website()) {
      if (operated_by_website_ != &::google::protobuf::internal::kEmptyString) {
        operated_by_website_->clear();
      }
    }
    route_color_ = 0u;
    if (has_route_desc()) {
      if (route_desc_ != &::google::protobuf::internal::kEmptyString) {
        route_desc_->clear();
      }
    }
    if (has_route_long_name()) {
      if (route_long_name_ != &::google::protobuf::internal::kEmptyString) {
        route_long_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    route_text_color_ = 0u;
    vehicle_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transit_Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_onestop_id;
        break;
      }

      // optional string onestop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->onestop_id().data(), this->onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_operated_by_name;
        break;
      }

      // optional string operated_by_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operated_by_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operated_by_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operated_by_name().data(), this->operated_by_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_operated_by_onestop_id;
        break;
      }

      // optional string operated_by_onestop_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operated_by_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operated_by_onestop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operated_by_onestop_id().data(), this->operated_by_onestop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_operated_by_website;
        break;
      }

      // optional string operated_by_website = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operated_by_website:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operated_by_website()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operated_by_website().data(), this->operated_by_website().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_route_color;
        break;
      }

      // optional uint32 route_color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_color_)));
          set_has_route_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_route_desc;
        break;
      }

      // optional string route_desc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->route_desc().data(), this->route_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_route_long_name;
        break;
      }

      // optional string route_long_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_long_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_long_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->route_long_name().data(), this->route_long_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_route_text_color;
        break;
      }

      // optional uint32 route_text_color = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_text_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_text_color_)));
          set_has_route_text_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vehicle_type;
        break;
      }

      // optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vehicle_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::mjolnir::Transit_VehicleType_IsValid(value)) {
            set_vehicle_type(static_cast< ::valhalla::mjolnir::Transit_VehicleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transit_Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string onestop_id = 2;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->onestop_id(), output);
  }

  // optional string operated_by_name = 3;
  if (has_operated_by_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operated_by_name().data(), this->operated_by_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->operated_by_name(), output);
  }

  // optional string operated_by_onestop_id = 4;
  if (has_operated_by_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operated_by_onestop_id().data(), this->operated_by_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->operated_by_onestop_id(), output);
  }

  // optional string operated_by_website = 5;
  if (has_operated_by_website()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operated_by_website().data(), this->operated_by_website().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->operated_by_website(), output);
  }

  // optional uint32 route_color = 6;
  if (has_route_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->route_color(), output);
  }

  // optional string route_desc = 7;
  if (has_route_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_desc().data(), this->route_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->route_desc(), output);
  }

  // optional string route_long_name = 8;
  if (has_route_long_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_long_name().data(), this->route_long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->route_long_name(), output);
  }

  // optional uint32 route_text_color = 9;
  if (has_route_text_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->route_text_color(), output);
  }

  // optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->vehicle_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transit_Route::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string onestop_id = 2;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->onestop_id(), target);
  }

  // optional string operated_by_name = 3;
  if (has_operated_by_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operated_by_name().data(), this->operated_by_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operated_by_name(), target);
  }

  // optional string operated_by_onestop_id = 4;
  if (has_operated_by_onestop_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operated_by_onestop_id().data(), this->operated_by_onestop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->operated_by_onestop_id(), target);
  }

  // optional string operated_by_website = 5;
  if (has_operated_by_website()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operated_by_website().data(), this->operated_by_website().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->operated_by_website(), target);
  }

  // optional uint32 route_color = 6;
  if (has_route_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->route_color(), target);
  }

  // optional string route_desc = 7;
  if (has_route_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_desc().data(), this->route_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->route_desc(), target);
  }

  // optional string route_long_name = 8;
  if (has_route_long_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_long_name().data(), this->route_long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->route_long_name(), target);
  }

  // optional uint32 route_text_color = 9;
  if (has_route_text_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->route_text_color(), target);
  }

  // optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
  if (has_vehicle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->vehicle_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transit_Route::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string onestop_id = 2;
    if (has_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
    }

    // optional string operated_by_name = 3;
    if (has_operated_by_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operated_by_name());
    }

    // optional string operated_by_onestop_id = 4;
    if (has_operated_by_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operated_by_onestop_id());
    }

    // optional string operated_by_website = 5;
    if (has_operated_by_website()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operated_by_website());
    }

    // optional uint32 route_color = 6;
    if (has_route_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->route_color());
    }

    // optional string route_desc = 7;
    if (has_route_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_desc());
    }

    // optional string route_long_name = 8;
    if (has_route_long_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_long_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 route_text_color = 9;
    if (has_route_text_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->route_text_color());
    }

    // optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
    if (has_vehicle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehicle_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transit_Route::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transit_Route* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transit_Route*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transit_Route::MergeFrom(const Transit_Route& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_onestop_id()) {
      set_onestop_id(from.onestop_id());
    }
    if (from.has_operated_by_name()) {
      set_operated_by_name(from.operated_by_name());
    }
    if (from.has_operated_by_onestop_id()) {
      set_operated_by_onestop_id(from.operated_by_onestop_id());
    }
    if (from.has_operated_by_website()) {
      set_operated_by_website(from.operated_by_website());
    }
    if (from.has_route_color()) {
      set_route_color(from.route_color());
    }
    if (from.has_route_desc()) {
      set_route_desc(from.route_desc());
    }
    if (from.has_route_long_name()) {
      set_route_long_name(from.route_long_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_route_text_color()) {
      set_route_text_color(from.route_text_color());
    }
    if (from.has_vehicle_type()) {
      set_vehicle_type(from.vehicle_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transit_Route::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transit_Route::CopyFrom(const Transit_Route& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Route::IsInitialized() const {

  return true;
}

void Transit_Route::Swap(Transit_Route* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(onestop_id_, other->onestop_id_);
    std::swap(operated_by_name_, other->operated_by_name_);
    std::swap(operated_by_onestop_id_, other->operated_by_onestop_id_);
    std::swap(operated_by_website_, other->operated_by_website_);
    std::swap(route_color_, other->route_color_);
    std::swap(route_desc_, other->route_desc_);
    std::swap(route_long_name_, other->route_long_name_);
    std::swap(route_text_color_, other->route_text_color_);
    std::swap(vehicle_type_, other->vehicle_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transit_Route::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transit_Route_descriptor_;
  metadata.reflection = Transit_Route_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Transit_Shape::kShapeIdFieldNumber;
const int Transit_Shape::kEncodedShapeFieldNumber;
#endif  // !_MSC_VER

Transit_Shape::Transit_Shape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transit_Shape::InitAsDefaultInstance() {
}

Transit_Shape::Transit_Shape(const Transit_Shape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transit_Shape::SharedCtor() {
  _cached_size_ = 0;
  shape_id_ = 0u;
  encoded_shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transit_Shape::~Transit_Shape() {
  SharedDtor();
}

void Transit_Shape::SharedDtor() {
  if (encoded_shape_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_shape_;
  }
  if (this != default_instance_) {
  }
}

void Transit_Shape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transit_Shape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transit_Shape_descriptor_;
}

const Transit_Shape& Transit_Shape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transit_2eproto();
  return *default_instance_;
}

Transit_Shape* Transit_Shape::default_instance_ = NULL;

Transit_Shape* Transit_Shape::New() const {
  return new Transit_Shape;
}

void Transit_Shape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shape_id_ = 0u;
    if (has_encoded_shape()) {
      if (encoded_shape_ != &::google::protobuf::internal::kEmptyString) {
        encoded_shape_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transit_Shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shape_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shape_id_)));
          set_has_shape_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encoded_shape;
        break;
      }

      // optional bytes encoded_shape = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_shape()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transit_Shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 shape_id = 1;
  if (has_shape_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shape_id(), output);
  }

  // optional bytes encoded_shape = 2;
  if (has_encoded_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encoded_shape(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transit_Shape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 shape_id = 1;
  if (has_shape_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shape_id(), target);
  }

  // optional bytes encoded_shape = 2;
  if (has_encoded_shape()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encoded_shape(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transit_Shape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 shape_id = 1;
    if (has_shape_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shape_id());
    }

    // optional bytes encoded_shape = 2;
    if (has_encoded_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_shape());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transit_Shape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transit_Shape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transit_Shape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transit_Shape::MergeFrom(const Transit_Shape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape_id()) {
      set_shape_id(from.shape_id());
    }
    if (from.has_encoded_shape()) {
      set_encoded_shape(from.encoded_shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transit_Shape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transit_Shape::CopyFrom(const Transit_Shape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Shape::IsInitialized() const {

  return true;
}

void Transit_Shape::Swap(Transit_Shape* other) {
  if (other != this) {
    std::swap(shape_id_, other->shape_id_);
    std::swap(encoded_shape_, other->encoded_shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transit_Shape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transit_Shape_descriptor_;
  metadata.reflection = Transit_Shape_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Transit::kStopsFieldNumber;
const int Transit::kStopPairsFieldNumber;
const int Transit::kRoutesFieldNumber;
const int Transit::kShapesFieldNumber;
#endif  // !_MSC_VER

Transit::Transit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transit::InitAsDefaultInstance() {
}

Transit::Transit(const Transit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transit::~Transit() {
  SharedDtor();
}

void Transit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Transit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transit_descriptor_;
}

const Transit& Transit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transit_2eproto();
  return *default_instance_;
}

Transit* Transit::default_instance_ = NULL;

Transit* Transit::New() const {
  return new Transit;
}

void Transit::Clear() {
  stops_.Clear();
  stop_pairs_.Clear();
  routes_.Clear();
  shapes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .valhalla.mjolnir.Transit.Stop stops = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stops;
        if (input->ExpectTag(18)) goto parse_stop_pairs;
        break;
      }

      // repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stop_pairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stop_pairs;
        if (input->ExpectTag(26)) goto parse_routes;
        break;
      }

      // repeated .valhalla.mjolnir.Transit.Route routes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_routes;
        if (input->ExpectTag(34)) goto parse_shapes;
        break;
      }

      // repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shapes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shapes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .valhalla.mjolnir.Transit.Stop stops = 1;
  for (int i = 0; i < this->stops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stops(i), output);
  }

  // repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
  for (int i = 0; i < this->stop_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stop_pairs(i), output);
  }

  // repeated .valhalla.mjolnir.Transit.Route routes = 3;
  for (int i = 0; i < this->routes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->routes(i), output);
  }

  // repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
  for (int i = 0; i < this->shapes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shapes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .valhalla.mjolnir.Transit.Stop stops = 1;
  for (int i = 0; i < this->stops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stops(i), target);
  }

  // repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
  for (int i = 0; i < this->stop_pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stop_pairs(i), target);
  }

  // repeated .valhalla.mjolnir.Transit.Route routes = 3;
  for (int i = 0; i < this->routes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->routes(i), target);
  }

  // repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
  for (int i = 0; i < this->shapes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shapes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transit::ByteSize() const {
  int total_size = 0;

  // repeated .valhalla.mjolnir.Transit.Stop stops = 1;
  total_size += 1 * this->stops_size();
  for (int i = 0; i < this->stops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stops(i));
  }

  // repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
  total_size += 1 * this->stop_pairs_size();
  for (int i = 0; i < this->stop_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_pairs(i));
  }

  // repeated .valhalla.mjolnir.Transit.Route routes = 3;
  total_size += 1 * this->routes_size();
  for (int i = 0; i < this->routes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routes(i));
  }

  // repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
  total_size += 1 * this->shapes_size();
  for (int i = 0; i < this->shapes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shapes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transit::MergeFrom(const Transit& from) {
  GOOGLE_CHECK_NE(&from, this);
  stops_.MergeFrom(from.stops_);
  stop_pairs_.MergeFrom(from.stop_pairs_);
  routes_.MergeFrom(from.routes_);
  shapes_.MergeFrom(from.shapes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transit::CopyFrom(const Transit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit::IsInitialized() const {

  return true;
}

void Transit::Swap(Transit* other) {
  if (other != this) {
    stops_.Swap(&other->stops_);
    stop_pairs_.Swap(&other->stop_pairs_);
    routes_.Swap(&other->routes_);
    shapes_.Swap(&other->shapes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transit_descriptor_;
  metadata.reflection = Transit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mjolnir
}  // namespace valhalla

// @@protoc_insertion_point(global_scope)
