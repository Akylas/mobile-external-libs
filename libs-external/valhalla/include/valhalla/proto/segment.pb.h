// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: segment.proto

#ifndef PROTOBUF_segment_2eproto__INCLUDED
#define PROTOBUF_segment_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace opentraffic {
namespace osmlr {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_segment_2eproto();
void protobuf_AssignDesc_segment_2eproto();
void protobuf_ShutdownFile_segment_2eproto();

class Segment;
class Segment_LatLng;
class Segment_LocationReference;

enum Segment_RoadClass {
  Segment_RoadClass_ClassMotorway = 0,
  Segment_RoadClass_ClassTrunk = 1,
  Segment_RoadClass_ClassPrimary = 2,
  Segment_RoadClass_ClassSecondary = 3,
  Segment_RoadClass_ClassTertiary = 4,
  Segment_RoadClass_ClassUnclassified = 5,
  Segment_RoadClass_ClassResidential = 6,
  Segment_RoadClass_ClassServiceOther = 7
};
bool Segment_RoadClass_IsValid(int value);
const Segment_RoadClass Segment_RoadClass_RoadClass_MIN = Segment_RoadClass_ClassMotorway;
const Segment_RoadClass Segment_RoadClass_RoadClass_MAX = Segment_RoadClass_ClassServiceOther;
const int Segment_RoadClass_RoadClass_ARRAYSIZE = Segment_RoadClass_RoadClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* Segment_RoadClass_descriptor();
inline const ::std::string& Segment_RoadClass_Name(Segment_RoadClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    Segment_RoadClass_descriptor(), value);
}
inline bool Segment_RoadClass_Parse(
    const ::std::string& name, Segment_RoadClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Segment_RoadClass>(
    Segment_RoadClass_descriptor(), name, value);
}
enum Segment_FormOfWay {
  Segment_FormOfWay_FowUndefined = 0,
  Segment_FormOfWay_FowMotorway = 1,
  Segment_FormOfWay_FowMultipleCarriageway = 2,
  Segment_FormOfWay_FowSingleCarriageway = 3,
  Segment_FormOfWay_FowRoundabout = 4,
  Segment_FormOfWay_FowTrafficSquare = 5,
  Segment_FormOfWay_FowSlipRoad = 6,
  Segment_FormOfWay_FowOther = 7
};
bool Segment_FormOfWay_IsValid(int value);
const Segment_FormOfWay Segment_FormOfWay_FormOfWay_MIN = Segment_FormOfWay_FowUndefined;
const Segment_FormOfWay Segment_FormOfWay_FormOfWay_MAX = Segment_FormOfWay_FowOther;
const int Segment_FormOfWay_FormOfWay_ARRAYSIZE = Segment_FormOfWay_FormOfWay_MAX + 1;

const ::google::protobuf::EnumDescriptor* Segment_FormOfWay_descriptor();
inline const ::std::string& Segment_FormOfWay_Name(Segment_FormOfWay value) {
  return ::google::protobuf::internal::NameOfEnum(
    Segment_FormOfWay_descriptor(), value);
}
inline bool Segment_FormOfWay_Parse(
    const ::std::string& name, Segment_FormOfWay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Segment_FormOfWay>(
    Segment_FormOfWay_descriptor(), name, value);
}
// ===================================================================

class Segment_LatLng : public ::google::protobuf::Message {
 public:
  Segment_LatLng();
  virtual ~Segment_LatLng();

  Segment_LatLng(const Segment_LatLng& from);

  inline Segment_LatLng& operator=(const Segment_LatLng& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Segment_LatLng& default_instance();

  void Swap(Segment_LatLng* other);

  // implements Message ----------------------------------------------

  Segment_LatLng* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Segment_LatLng& from);
  void MergeFrom(const Segment_LatLng& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sfixed32 lat = 1;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 1;
  inline ::google::protobuf::int32 lat() const;
  inline void set_lat(::google::protobuf::int32 value);

  // optional sfixed32 lng = 2;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 2;
  inline ::google::protobuf::int32 lng() const;
  inline void set_lng(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:opentraffic.osmlr.Segment.LatLng)
 private:
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lng();
  inline void clear_has_lng();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 lat_;
  ::google::protobuf::int32 lng_;
  friend void  protobuf_AddDesc_segment_2eproto();
  friend void protobuf_AssignDesc_segment_2eproto();
  friend void protobuf_ShutdownFile_segment_2eproto();

  void InitAsDefaultInstance();
  static Segment_LatLng* default_instance_;
};
// -------------------------------------------------------------------

class Segment_LocationReference : public ::google::protobuf::Message {
 public:
  Segment_LocationReference();
  virtual ~Segment_LocationReference();

  Segment_LocationReference(const Segment_LocationReference& from);

  inline Segment_LocationReference& operator=(const Segment_LocationReference& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Segment_LocationReference& default_instance();

  void Swap(Segment_LocationReference* other);

  // implements Message ----------------------------------------------

  Segment_LocationReference* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Segment_LocationReference& from);
  void MergeFrom(const Segment_LocationReference& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .opentraffic.osmlr.Segment.LatLng coord = 1;
  inline bool has_coord() const;
  inline void clear_coord();
  static const int kCoordFieldNumber = 1;
  inline const ::opentraffic::osmlr::Segment_LatLng& coord() const;
  inline ::opentraffic::osmlr::Segment_LatLng* mutable_coord();
  inline ::opentraffic::osmlr::Segment_LatLng* release_coord();
  inline void set_allocated_coord(::opentraffic::osmlr::Segment_LatLng* coord);

  // optional uint32 bear = 2;
  inline bool has_bear() const;
  inline void clear_bear();
  static const int kBearFieldNumber = 2;
  inline ::google::protobuf::uint32 bear() const;
  inline void set_bear(::google::protobuf::uint32 value);

  // optional .opentraffic.osmlr.Segment.RoadClass start_frc = 3;
  inline bool has_start_frc() const;
  inline void clear_start_frc();
  static const int kStartFrcFieldNumber = 3;
  inline ::opentraffic::osmlr::Segment_RoadClass start_frc() const;
  inline void set_start_frc(::opentraffic::osmlr::Segment_RoadClass value);

  // optional .opentraffic.osmlr.Segment.FormOfWay start_fow = 4;
  inline bool has_start_fow() const;
  inline void clear_start_fow();
  static const int kStartFowFieldNumber = 4;
  inline ::opentraffic::osmlr::Segment_FormOfWay start_fow() const;
  inline void set_start_fow(::opentraffic::osmlr::Segment_FormOfWay value);

  // optional .opentraffic.osmlr.Segment.RoadClass least_frc = 5;
  inline bool has_least_frc() const;
  inline void clear_least_frc();
  static const int kLeastFrcFieldNumber = 5;
  inline ::opentraffic::osmlr::Segment_RoadClass least_frc() const;
  inline void set_least_frc(::opentraffic::osmlr::Segment_RoadClass value);

  // optional uint32 length = 6;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 6;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // optional bool at_node = 7;
  inline bool has_at_node() const;
  inline void clear_at_node();
  static const int kAtNodeFieldNumber = 7;
  inline bool at_node() const;
  inline void set_at_node(bool value);

  // @@protoc_insertion_point(class_scope:opentraffic.osmlr.Segment.LocationReference)
 private:
  inline void set_has_coord();
  inline void clear_has_coord();
  inline void set_has_bear();
  inline void clear_has_bear();
  inline void set_has_start_frc();
  inline void clear_has_start_frc();
  inline void set_has_start_fow();
  inline void clear_has_start_fow();
  inline void set_has_least_frc();
  inline void clear_has_least_frc();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_at_node();
  inline void clear_has_at_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::opentraffic::osmlr::Segment_LatLng* coord_;
  ::google::protobuf::uint32 bear_;
  int start_frc_;
  int start_fow_;
  int least_frc_;
  ::google::protobuf::uint32 length_;
  bool at_node_;
  friend void  protobuf_AddDesc_segment_2eproto();
  friend void protobuf_AssignDesc_segment_2eproto();
  friend void protobuf_ShutdownFile_segment_2eproto();

  void InitAsDefaultInstance();
  static Segment_LocationReference* default_instance_;
};
// -------------------------------------------------------------------

class Segment : public ::google::protobuf::Message {
 public:
  Segment();
  virtual ~Segment();

  Segment(const Segment& from);

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Segment& default_instance();

  void Swap(Segment* other);

  // implements Message ----------------------------------------------

  Segment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Segment& from);
  void MergeFrom(const Segment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Segment_LatLng LatLng;
  typedef Segment_LocationReference LocationReference;

  typedef Segment_RoadClass RoadClass;
  static const RoadClass ClassMotorway = Segment_RoadClass_ClassMotorway;
  static const RoadClass ClassTrunk = Segment_RoadClass_ClassTrunk;
  static const RoadClass ClassPrimary = Segment_RoadClass_ClassPrimary;
  static const RoadClass ClassSecondary = Segment_RoadClass_ClassSecondary;
  static const RoadClass ClassTertiary = Segment_RoadClass_ClassTertiary;
  static const RoadClass ClassUnclassified = Segment_RoadClass_ClassUnclassified;
  static const RoadClass ClassResidential = Segment_RoadClass_ClassResidential;
  static const RoadClass ClassServiceOther = Segment_RoadClass_ClassServiceOther;
  static inline bool RoadClass_IsValid(int value) {
    return Segment_RoadClass_IsValid(value);
  }
  static const RoadClass RoadClass_MIN =
    Segment_RoadClass_RoadClass_MIN;
  static const RoadClass RoadClass_MAX =
    Segment_RoadClass_RoadClass_MAX;
  static const int RoadClass_ARRAYSIZE =
    Segment_RoadClass_RoadClass_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoadClass_descriptor() {
    return Segment_RoadClass_descriptor();
  }
  static inline const ::std::string& RoadClass_Name(RoadClass value) {
    return Segment_RoadClass_Name(value);
  }
  static inline bool RoadClass_Parse(const ::std::string& name,
      RoadClass* value) {
    return Segment_RoadClass_Parse(name, value);
  }

  typedef Segment_FormOfWay FormOfWay;
  static const FormOfWay FowUndefined = Segment_FormOfWay_FowUndefined;
  static const FormOfWay FowMotorway = Segment_FormOfWay_FowMotorway;
  static const FormOfWay FowMultipleCarriageway = Segment_FormOfWay_FowMultipleCarriageway;
  static const FormOfWay FowSingleCarriageway = Segment_FormOfWay_FowSingleCarriageway;
  static const FormOfWay FowRoundabout = Segment_FormOfWay_FowRoundabout;
  static const FormOfWay FowTrafficSquare = Segment_FormOfWay_FowTrafficSquare;
  static const FormOfWay FowSlipRoad = Segment_FormOfWay_FowSlipRoad;
  static const FormOfWay FowOther = Segment_FormOfWay_FowOther;
  static inline bool FormOfWay_IsValid(int value) {
    return Segment_FormOfWay_IsValid(value);
  }
  static const FormOfWay FormOfWay_MIN =
    Segment_FormOfWay_FormOfWay_MIN;
  static const FormOfWay FormOfWay_MAX =
    Segment_FormOfWay_FormOfWay_MAX;
  static const int FormOfWay_ARRAYSIZE =
    Segment_FormOfWay_FormOfWay_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FormOfWay_descriptor() {
    return Segment_FormOfWay_descriptor();
  }
  static inline const ::std::string& FormOfWay_Name(FormOfWay value) {
    return Segment_FormOfWay_Name(value);
  }
  static inline bool FormOfWay_Parse(const ::std::string& name,
      FormOfWay* value) {
    return Segment_FormOfWay_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .opentraffic.osmlr.Segment.LocationReference lrps = 1;
  inline int lrps_size() const;
  inline void clear_lrps();
  static const int kLrpsFieldNumber = 1;
  inline const ::opentraffic::osmlr::Segment_LocationReference& lrps(int index) const;
  inline ::opentraffic::osmlr::Segment_LocationReference* mutable_lrps(int index);
  inline ::opentraffic::osmlr::Segment_LocationReference* add_lrps();
  inline const ::google::protobuf::RepeatedPtrField< ::opentraffic::osmlr::Segment_LocationReference >&
      lrps() const;
  inline ::google::protobuf::RepeatedPtrField< ::opentraffic::osmlr::Segment_LocationReference >*
      mutable_lrps();

  // @@protoc_insertion_point(class_scope:opentraffic.osmlr.Segment)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentraffic::osmlr::Segment_LocationReference > lrps_;
  friend void  protobuf_AddDesc_segment_2eproto();
  friend void protobuf_AssignDesc_segment_2eproto();
  friend void protobuf_ShutdownFile_segment_2eproto();

  void InitAsDefaultInstance();
  static Segment* default_instance_;
};
// ===================================================================


// ===================================================================

// Segment_LatLng

// optional sfixed32 lat = 1;
inline bool Segment_LatLng::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Segment_LatLng::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Segment_LatLng::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Segment_LatLng::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline ::google::protobuf::int32 Segment_LatLng::lat() const {
  // @@protoc_insertion_point(field_get:opentraffic.osmlr.Segment.LatLng.lat)
  return lat_;
}
inline void Segment_LatLng::set_lat(::google::protobuf::int32 value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:opentraffic.osmlr.Segment.LatLng.lat)
}

// optional sfixed32 lng = 2;
inline bool Segment_LatLng::has_lng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Segment_LatLng::set_has_lng() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Segment_LatLng::clear_has_lng() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Segment_LatLng::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline ::google::protobuf::int32 Segment_LatLng::lng() const {
  // @@protoc_insertion_point(field_get:opentraffic.osmlr.Segment.LatLng.lng)
  return lng_;
}
inline void Segment_LatLng::set_lng(::google::protobuf::int32 value) {
  set_has_lng();
  lng_ = value;
  // @@protoc_insertion_point(field_set:opentraffic.osmlr.Segment.LatLng.lng)
}

// -------------------------------------------------------------------

// Segment_LocationReference

// optional .opentraffic.osmlr.Segment.LatLng coord = 1;
inline bool Segment_LocationReference::has_coord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Segment_LocationReference::set_has_coord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Segment_LocationReference::clear_has_coord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Segment_LocationReference::clear_coord() {
  if (coord_ != NULL) coord_->::opentraffic::osmlr::Segment_LatLng::Clear();
  clear_has_coord();
}
inline const ::opentraffic::osmlr::Segment_LatLng& Segment_LocationReference::coord() const {
  // @@protoc_insertion_point(field_get:opentraffic.osmlr.Segment.LocationReference.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::opentraffic::osmlr::Segment_LatLng* Segment_LocationReference::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) coord_ = new ::opentraffic::osmlr::Segment_LatLng;
  // @@protoc_insertion_point(field_mutable:opentraffic.osmlr.Segment.LocationReference.coord)
  return coord_;
}
inline ::opentraffic::osmlr::Segment_LatLng* Segment_LocationReference::release_coord() {
  clear_has_coord();
  ::opentraffic::osmlr::Segment_LatLng* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void Segment_LocationReference::set_allocated_coord(::opentraffic::osmlr::Segment_LatLng* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:opentraffic.osmlr.Segment.LocationReference.coord)
}

// optional uint32 bear = 2;
inline bool Segment_LocationReference::has_bear() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Segment_LocationReference::set_has_bear() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Segment_LocationReference::clear_has_bear() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Segment_LocationReference::clear_bear() {
  bear_ = 0u;
  clear_has_bear();
}
inline ::google::protobuf::uint32 Segment_LocationReference::bear() const {
  // @@protoc_insertion_point(field_get:opentraffic.osmlr.Segment.LocationReference.bear)
  return bear_;
}
inline void Segment_LocationReference::set_bear(::google::protobuf::uint32 value) {
  set_has_bear();
  bear_ = value;
  // @@protoc_insertion_point(field_set:opentraffic.osmlr.Segment.LocationReference.bear)
}

// optional .opentraffic.osmlr.Segment.RoadClass start_frc = 3;
inline bool Segment_LocationReference::has_start_frc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Segment_LocationReference::set_has_start_frc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Segment_LocationReference::clear_has_start_frc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Segment_LocationReference::clear_start_frc() {
  start_frc_ = 0;
  clear_has_start_frc();
}
inline ::opentraffic::osmlr::Segment_RoadClass Segment_LocationReference::start_frc() const {
  // @@protoc_insertion_point(field_get:opentraffic.osmlr.Segment.LocationReference.start_frc)
  return static_cast< ::opentraffic::osmlr::Segment_RoadClass >(start_frc_);
}
inline void Segment_LocationReference::set_start_frc(::opentraffic::osmlr::Segment_RoadClass value) {
  assert(::opentraffic::osmlr::Segment_RoadClass_IsValid(value));
  set_has_start_frc();
  start_frc_ = value;
  // @@protoc_insertion_point(field_set:opentraffic.osmlr.Segment.LocationReference.start_frc)
}

// optional .opentraffic.osmlr.Segment.FormOfWay start_fow = 4;
inline bool Segment_LocationReference::has_start_fow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Segment_LocationReference::set_has_start_fow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Segment_LocationReference::clear_has_start_fow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Segment_LocationReference::clear_start_fow() {
  start_fow_ = 0;
  clear_has_start_fow();
}
inline ::opentraffic::osmlr::Segment_FormOfWay Segment_LocationReference::start_fow() const {
  // @@protoc_insertion_point(field_get:opentraffic.osmlr.Segment.LocationReference.start_fow)
  return static_cast< ::opentraffic::osmlr::Segment_FormOfWay >(start_fow_);
}
inline void Segment_LocationReference::set_start_fow(::opentraffic::osmlr::Segment_FormOfWay value) {
  assert(::opentraffic::osmlr::Segment_FormOfWay_IsValid(value));
  set_has_start_fow();
  start_fow_ = value;
  // @@protoc_insertion_point(field_set:opentraffic.osmlr.Segment.LocationReference.start_fow)
}

// optional .opentraffic.osmlr.Segment.RoadClass least_frc = 5;
inline bool Segment_LocationReference::has_least_frc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Segment_LocationReference::set_has_least_frc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Segment_LocationReference::clear_has_least_frc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Segment_LocationReference::clear_least_frc() {
  least_frc_ = 0;
  clear_has_least_frc();
}
inline ::opentraffic::osmlr::Segment_RoadClass Segment_LocationReference::least_frc() const {
  // @@protoc_insertion_point(field_get:opentraffic.osmlr.Segment.LocationReference.least_frc)
  return static_cast< ::opentraffic::osmlr::Segment_RoadClass >(least_frc_);
}
inline void Segment_LocationReference::set_least_frc(::opentraffic::osmlr::Segment_RoadClass value) {
  assert(::opentraffic::osmlr::Segment_RoadClass_IsValid(value));
  set_has_least_frc();
  least_frc_ = value;
  // @@protoc_insertion_point(field_set:opentraffic.osmlr.Segment.LocationReference.least_frc)
}

// optional uint32 length = 6;
inline bool Segment_LocationReference::has_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Segment_LocationReference::set_has_length() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Segment_LocationReference::clear_has_length() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Segment_LocationReference::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 Segment_LocationReference::length() const {
  // @@protoc_insertion_point(field_get:opentraffic.osmlr.Segment.LocationReference.length)
  return length_;
}
inline void Segment_LocationReference::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:opentraffic.osmlr.Segment.LocationReference.length)
}

// optional bool at_node = 7;
inline bool Segment_LocationReference::has_at_node() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Segment_LocationReference::set_has_at_node() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Segment_LocationReference::clear_has_at_node() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Segment_LocationReference::clear_at_node() {
  at_node_ = false;
  clear_has_at_node();
}
inline bool Segment_LocationReference::at_node() const {
  // @@protoc_insertion_point(field_get:opentraffic.osmlr.Segment.LocationReference.at_node)
  return at_node_;
}
inline void Segment_LocationReference::set_at_node(bool value) {
  set_has_at_node();
  at_node_ = value;
  // @@protoc_insertion_point(field_set:opentraffic.osmlr.Segment.LocationReference.at_node)
}

// -------------------------------------------------------------------

// Segment

// repeated .opentraffic.osmlr.Segment.LocationReference lrps = 1;
inline int Segment::lrps_size() const {
  return lrps_.size();
}
inline void Segment::clear_lrps() {
  lrps_.Clear();
}
inline const ::opentraffic::osmlr::Segment_LocationReference& Segment::lrps(int index) const {
  // @@protoc_insertion_point(field_get:opentraffic.osmlr.Segment.lrps)
  return lrps_.Get(index);
}
inline ::opentraffic::osmlr::Segment_LocationReference* Segment::mutable_lrps(int index) {
  // @@protoc_insertion_point(field_mutable:opentraffic.osmlr.Segment.lrps)
  return lrps_.Mutable(index);
}
inline ::opentraffic::osmlr::Segment_LocationReference* Segment::add_lrps() {
  // @@protoc_insertion_point(field_add:opentraffic.osmlr.Segment.lrps)
  return lrps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opentraffic::osmlr::Segment_LocationReference >&
Segment::lrps() const {
  // @@protoc_insertion_point(field_list:opentraffic.osmlr.Segment.lrps)
  return lrps_;
}
inline ::google::protobuf::RepeatedPtrField< ::opentraffic::osmlr::Segment_LocationReference >*
Segment::mutable_lrps() {
  // @@protoc_insertion_point(field_mutable_list:opentraffic.osmlr.Segment.lrps)
  return &lrps_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace osmlr
}  // namespace opentraffic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::opentraffic::osmlr::Segment_RoadClass> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentraffic::osmlr::Segment_RoadClass>() {
  return ::opentraffic::osmlr::Segment_RoadClass_descriptor();
}
template <> struct is_proto_enum< ::opentraffic::osmlr::Segment_FormOfWay> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentraffic::osmlr::Segment_FormOfWay>() {
  return ::opentraffic::osmlr::Segment_FormOfWay_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_segment_2eproto__INCLUDED
