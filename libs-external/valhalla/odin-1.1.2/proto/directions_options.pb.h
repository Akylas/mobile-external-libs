// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directions_options.proto

#ifndef PROTOBUF_directions_5foptions_2eproto__INCLUDED
#define PROTOBUF_directions_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace valhalla {
namespace odin {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_directions_5foptions_2eproto();
void protobuf_AssignDesc_directions_5foptions_2eproto();
void protobuf_ShutdownFile_directions_5foptions_2eproto();

class DirectionsOptions;

enum DirectionsOptions_Units {
  DirectionsOptions_Units_kKilometers = 0,
  DirectionsOptions_Units_kMiles = 1
};
bool DirectionsOptions_Units_IsValid(int value);
const DirectionsOptions_Units DirectionsOptions_Units_Units_MIN = DirectionsOptions_Units_kKilometers;
const DirectionsOptions_Units DirectionsOptions_Units_Units_MAX = DirectionsOptions_Units_kMiles;
const int DirectionsOptions_Units_Units_ARRAYSIZE = DirectionsOptions_Units_Units_MAX + 1;

const ::google::protobuf::EnumDescriptor* DirectionsOptions_Units_descriptor();
inline const ::std::string& DirectionsOptions_Units_Name(DirectionsOptions_Units value) {
  return ::google::protobuf::internal::NameOfEnum(
    DirectionsOptions_Units_descriptor(), value);
}
inline bool DirectionsOptions_Units_Parse(
    const ::std::string& name, DirectionsOptions_Units* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DirectionsOptions_Units>(
    DirectionsOptions_Units_descriptor(), name, value);
}
// ===================================================================

class DirectionsOptions : public ::google::protobuf::Message {
 public:
  DirectionsOptions();
  virtual ~DirectionsOptions();

  DirectionsOptions(const DirectionsOptions& from);

  inline DirectionsOptions& operator=(const DirectionsOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectionsOptions& default_instance();

  void Swap(DirectionsOptions* other);

  // implements Message ----------------------------------------------

  DirectionsOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DirectionsOptions& from);
  void MergeFrom(const DirectionsOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DirectionsOptions_Units Units;
  static const Units kKilometers = DirectionsOptions_Units_kKilometers;
  static const Units kMiles = DirectionsOptions_Units_kMiles;
  static inline bool Units_IsValid(int value) {
    return DirectionsOptions_Units_IsValid(value);
  }
  static const Units Units_MIN =
    DirectionsOptions_Units_Units_MIN;
  static const Units Units_MAX =
    DirectionsOptions_Units_Units_MAX;
  static const int Units_ARRAYSIZE =
    DirectionsOptions_Units_Units_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Units_descriptor() {
    return DirectionsOptions_Units_descriptor();
  }
  static inline const ::std::string& Units_Name(Units value) {
    return DirectionsOptions_Units_Name(value);
  }
  static inline bool Units_Parse(const ::std::string& name,
      Units* value) {
    return DirectionsOptions_Units_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .valhalla.odin.DirectionsOptions.Units units = 1;
  inline bool has_units() const;
  inline void clear_units();
  static const int kUnitsFieldNumber = 1;
  inline ::valhalla::odin::DirectionsOptions_Units units() const;
  inline void set_units(::valhalla::odin::DirectionsOptions_Units value);

  // optional string language = 2 [default = "en-US"];
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 2;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // optional bool narrative = 3 [default = true];
  inline bool has_narrative() const;
  inline void clear_narrative();
  static const int kNarrativeFieldNumber = 3;
  inline bool narrative() const;
  inline void set_narrative(bool value);

  // @@protoc_insertion_point(class_scope:valhalla.odin.DirectionsOptions)
 private:
  inline void set_has_units();
  inline void clear_has_units();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_narrative();
  inline void clear_has_narrative();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* language_;
  static ::std::string* _default_language_;
  int units_;
  bool narrative_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_directions_5foptions_2eproto();
  friend void protobuf_AssignDesc_directions_5foptions_2eproto();
  friend void protobuf_ShutdownFile_directions_5foptions_2eproto();

  void InitAsDefaultInstance();
  static DirectionsOptions* default_instance_;
};
// ===================================================================


// ===================================================================

// DirectionsOptions

// optional .valhalla.odin.DirectionsOptions.Units units = 1;
inline bool DirectionsOptions::has_units() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DirectionsOptions::set_has_units() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DirectionsOptions::clear_has_units() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DirectionsOptions::clear_units() {
  units_ = 0;
  clear_has_units();
}
inline ::valhalla::odin::DirectionsOptions_Units DirectionsOptions::units() const {
  return static_cast< ::valhalla::odin::DirectionsOptions_Units >(units_);
}
inline void DirectionsOptions::set_units(::valhalla::odin::DirectionsOptions_Units value) {
  assert(::valhalla::odin::DirectionsOptions_Units_IsValid(value));
  set_has_units();
  units_ = value;
}

// optional string language = 2 [default = "en-US"];
inline bool DirectionsOptions::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DirectionsOptions::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DirectionsOptions::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DirectionsOptions::clear_language() {
  if (language_ != _default_language_) {
    language_->assign(*_default_language_);
  }
  clear_has_language();
}
inline const ::std::string& DirectionsOptions::language() const {
  return *language_;
}
inline void DirectionsOptions::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == _default_language_) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void DirectionsOptions::set_language(const char* value) {
  set_has_language();
  if (language_ == _default_language_) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void DirectionsOptions::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == _default_language_) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DirectionsOptions::mutable_language() {
  set_has_language();
  if (language_ == _default_language_) {
    language_ = new ::std::string(*_default_language_);
  }
  return language_;
}
inline ::std::string* DirectionsOptions::release_language() {
  clear_has_language();
  if (language_ == _default_language_) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(_default_language_);
    return temp;
  }
}
inline void DirectionsOptions::set_allocated_language(::std::string* language) {
  if (language_ != _default_language_) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(_default_language_);
  }
}

// optional bool narrative = 3 [default = true];
inline bool DirectionsOptions::has_narrative() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DirectionsOptions::set_has_narrative() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DirectionsOptions::clear_has_narrative() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DirectionsOptions::clear_narrative() {
  narrative_ = true;
  clear_has_narrative();
}
inline bool DirectionsOptions::narrative() const {
  return narrative_;
}
inline void DirectionsOptions::set_narrative(bool value) {
  set_has_narrative();
  narrative_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace odin
}  // namespace valhalla

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::valhalla::odin::DirectionsOptions_Units>() {
  return ::valhalla::odin::DirectionsOptions_Units_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_directions_5foptions_2eproto__INCLUDED
