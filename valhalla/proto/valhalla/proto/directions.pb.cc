// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directions.proto

#include "directions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace valhalla {
constexpr DirectionsLeg_Summary::DirectionsLeg_Summary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bbox_(nullptr)
  , time_(0)
  , length_(0)
  , has_time_restrictions_(false){}
struct DirectionsLeg_SummaryDefaultTypeInternal {
  constexpr DirectionsLeg_SummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsLeg_SummaryDefaultTypeInternal() {}
  union {
    DirectionsLeg_Summary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsLeg_SummaryDefaultTypeInternal _DirectionsLeg_Summary_default_instance_;
constexpr DirectionsLeg_GuidanceView::DirectionsLeg_GuidanceView(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : overlay_ids_()
  , data_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct DirectionsLeg_GuidanceViewDefaultTypeInternal {
  constexpr DirectionsLeg_GuidanceViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsLeg_GuidanceViewDefaultTypeInternal() {}
  union {
    DirectionsLeg_GuidanceView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsLeg_GuidanceViewDefaultTypeInternal _DirectionsLeg_GuidanceView_default_instance_;
constexpr DirectionsLeg_Maneuver::DirectionsLeg_Maneuver(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : street_name_()
  , begin_street_name_()
  , roundabout_exit_street_names_()
  , guidance_views_()
  , text_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbal_transition_alert_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbal_pre_transition_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbal_post_transition_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , depart_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbal_depart_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , arrive_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbal_arrive_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbal_succinct_transition_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sign_(nullptr)
  , transit_info_(nullptr)
  , bss_info_(nullptr)
  , type_(0)

  , length_(0)
  , time_(0)
  , begin_cardinal_direction_(0)

  , begin_heading_(0u)
  , begin_shape_index_(0u)
  , end_shape_index_(0u)
  , roundabout_exit_count_(0u)
  , portions_toll_(false)
  , portions_unpaved_(false)
  , verbal_multi_cue_(false)
  , to_stay_on_(false)
  , travel_mode_(0)

  , vehicle_type_(0)

  , pedestrian_type_(0)

  , bicycle_type_(0)

  , transit_type_(0)

  , begin_path_index_(0u)
  , end_path_index_(0u)
  , turn_degree_(0u)
  , has_time_restrictions_(false)
  , bss_maneuver_type_(0)
{}
struct DirectionsLeg_ManeuverDefaultTypeInternal {
  constexpr DirectionsLeg_ManeuverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsLeg_ManeuverDefaultTypeInternal() {}
  union {
    DirectionsLeg_Maneuver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsLeg_ManeuverDefaultTypeInternal _DirectionsLeg_Maneuver_default_instance_;
constexpr DirectionsLeg::DirectionsLeg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_()
  , maneuver_()
  , shape_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , summary_(nullptr)
  , trip_id_(uint64_t{0u})
  , leg_id_(0u)
  , leg_count_(0u){}
struct DirectionsLegDefaultTypeInternal {
  constexpr DirectionsLegDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsLegDefaultTypeInternal() {}
  union {
    DirectionsLeg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsLegDefaultTypeInternal _DirectionsLeg_default_instance_;
constexpr DirectionsRoute::DirectionsRoute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : legs_(){}
struct DirectionsRouteDefaultTypeInternal {
  constexpr DirectionsRouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsRouteDefaultTypeInternal() {}
  union {
    DirectionsRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsRouteDefaultTypeInternal _DirectionsRoute_default_instance_;
constexpr Directions::Directions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routes_(){}
struct DirectionsDefaultTypeInternal {
  constexpr DirectionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsDefaultTypeInternal() {}
  union {
    Directions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsDefaultTypeInternal _Directions_default_instance_;
}  // namespace valhalla
namespace valhalla {
bool DirectionsLeg_GuidanceView_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_GuidanceView_Type_strings[9] = {};

static const char DirectionsLeg_GuidanceView_Type_names[] =
  "kAftertoll"
  "kCityreal"
  "kDirectionboard"
  "kEnt"
  "kExit"
  "kJunction"
  "kSapa"
  "kSignboard"
  "kTollbranch";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_GuidanceView_Type_entries[] = {
  { {DirectionsLeg_GuidanceView_Type_names + 0, 10}, 3 },
  { {DirectionsLeg_GuidanceView_Type_names + 10, 9}, 6 },
  { {DirectionsLeg_GuidanceView_Type_names + 19, 15}, 7 },
  { {DirectionsLeg_GuidanceView_Type_names + 34, 4}, 4 },
  { {DirectionsLeg_GuidanceView_Type_names + 38, 5}, 5 },
  { {DirectionsLeg_GuidanceView_Type_names + 43, 9}, 0 },
  { {DirectionsLeg_GuidanceView_Type_names + 52, 5}, 1 },
  { {DirectionsLeg_GuidanceView_Type_names + 57, 10}, 8 },
  { {DirectionsLeg_GuidanceView_Type_names + 67, 11}, 2 },
};

static const int DirectionsLeg_GuidanceView_Type_entries_by_number[] = {
  5, // 0 -> kJunction
  6, // 1 -> kSapa
  8, // 2 -> kTollbranch
  0, // 3 -> kAftertoll
  3, // 4 -> kEnt
  4, // 5 -> kExit
  1, // 6 -> kCityreal
  2, // 7 -> kDirectionboard
  7, // 8 -> kSignboard
};

const std::string& DirectionsLeg_GuidanceView_Type_Name(
    DirectionsLeg_GuidanceView_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_GuidanceView_Type_entries,
          DirectionsLeg_GuidanceView_Type_entries_by_number,
          9, DirectionsLeg_GuidanceView_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_GuidanceView_Type_entries,
      DirectionsLeg_GuidanceView_Type_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_GuidanceView_Type_strings[idx].get();
}
bool DirectionsLeg_GuidanceView_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_GuidanceView_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_GuidanceView_Type_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_GuidanceView_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kJunction;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kSapa;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kTollbranch;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kAftertoll;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kEnt;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kExit;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kCityreal;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kDirectionboard;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kSignboard;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::Type_MIN;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::Type_MAX;
constexpr int DirectionsLeg_GuidanceView::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DirectionsLeg_Maneuver_CardinalDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_Maneuver_CardinalDirection_strings[8] = {};

static const char DirectionsLeg_Maneuver_CardinalDirection_names[] =
  "kEast"
  "kNorth"
  "kNorthEast"
  "kNorthWest"
  "kSouth"
  "kSouthEast"
  "kSouthWest"
  "kWest";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_Maneuver_CardinalDirection_entries[] = {
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 0, 5}, 2 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 5, 6}, 0 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 11, 10}, 1 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 21, 10}, 7 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 31, 6}, 4 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 37, 10}, 3 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 47, 10}, 5 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 57, 5}, 6 },
};

static const int DirectionsLeg_Maneuver_CardinalDirection_entries_by_number[] = {
  1, // 0 -> kNorth
  2, // 1 -> kNorthEast
  0, // 2 -> kEast
  5, // 3 -> kSouthEast
  4, // 4 -> kSouth
  6, // 5 -> kSouthWest
  7, // 6 -> kWest
  3, // 7 -> kNorthWest
};

const std::string& DirectionsLeg_Maneuver_CardinalDirection_Name(
    DirectionsLeg_Maneuver_CardinalDirection value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_Maneuver_CardinalDirection_entries,
          DirectionsLeg_Maneuver_CardinalDirection_entries_by_number,
          8, DirectionsLeg_Maneuver_CardinalDirection_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_Maneuver_CardinalDirection_entries,
      DirectionsLeg_Maneuver_CardinalDirection_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_Maneuver_CardinalDirection_strings[idx].get();
}
bool DirectionsLeg_Maneuver_CardinalDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_Maneuver_CardinalDirection* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_Maneuver_CardinalDirection_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_Maneuver_CardinalDirection>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kNorth;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kNorthEast;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kEast;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kSouthEast;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kSouth;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kSouthWest;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kWest;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kNorthWest;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::CardinalDirection_MIN;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::CardinalDirection_MAX;
constexpr int DirectionsLeg_Maneuver::CardinalDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DirectionsLeg_Maneuver_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_Maneuver_Type_strings[44] = {};

static const char DirectionsLeg_Maneuver_Type_names[] =
  "kBecomes"
  "kBuildingEnter"
  "kBuildingExit"
  "kContinue"
  "kDestination"
  "kDestinationLeft"
  "kDestinationRight"
  "kElevatorEnter"
  "kEscalatorEnter"
  "kExitLeft"
  "kExitRight"
  "kFerryEnter"
  "kFerryExit"
  "kLeft"
  "kMerge"
  "kMergeLeft"
  "kMergeRight"
  "kNone"
  "kPostTransitConnectionDestination"
  "kRampLeft"
  "kRampRight"
  "kRampStraight"
  "kRight"
  "kRoundaboutEnter"
  "kRoundaboutExit"
  "kSharpLeft"
  "kSharpRight"
  "kSlightLeft"
  "kSlightRight"
  "kStart"
  "kStartLeft"
  "kStartRight"
  "kStayLeft"
  "kStayRight"
  "kStayStraight"
  "kStepsEnter"
  "kTransit"
  "kTransitConnectionDestination"
  "kTransitConnectionStart"
  "kTransitConnectionTransfer"
  "kTransitRemainOn"
  "kTransitTransfer"
  "kUturnLeft"
  "kUturnRight";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_Maneuver_Type_entries[] = {
  { {DirectionsLeg_Maneuver_Type_names + 0, 8}, 7 },
  { {DirectionsLeg_Maneuver_Type_names + 8, 14}, 42 },
  { {DirectionsLeg_Maneuver_Type_names + 22, 13}, 43 },
  { {DirectionsLeg_Maneuver_Type_names + 35, 9}, 8 },
  { {DirectionsLeg_Maneuver_Type_names + 44, 12}, 4 },
  { {DirectionsLeg_Maneuver_Type_names + 56, 16}, 6 },
  { {DirectionsLeg_Maneuver_Type_names + 72, 17}, 5 },
  { {DirectionsLeg_Maneuver_Type_names + 89, 14}, 39 },
  { {DirectionsLeg_Maneuver_Type_names + 103, 15}, 41 },
  { {DirectionsLeg_Maneuver_Type_names + 118, 9}, 21 },
  { {DirectionsLeg_Maneuver_Type_names + 127, 10}, 20 },
  { {DirectionsLeg_Maneuver_Type_names + 137, 11}, 28 },
  { {DirectionsLeg_Maneuver_Type_names + 148, 10}, 29 },
  { {DirectionsLeg_Maneuver_Type_names + 158, 5}, 15 },
  { {DirectionsLeg_Maneuver_Type_names + 163, 6}, 25 },
  { {DirectionsLeg_Maneuver_Type_names + 169, 10}, 38 },
  { {DirectionsLeg_Maneuver_Type_names + 179, 11}, 37 },
  { {DirectionsLeg_Maneuver_Type_names + 190, 5}, 0 },
  { {DirectionsLeg_Maneuver_Type_names + 195, 33}, 36 },
  { {DirectionsLeg_Maneuver_Type_names + 228, 9}, 19 },
  { {DirectionsLeg_Maneuver_Type_names + 237, 10}, 18 },
  { {DirectionsLeg_Maneuver_Type_names + 247, 13}, 17 },
  { {DirectionsLeg_Maneuver_Type_names + 260, 6}, 10 },
  { {DirectionsLeg_Maneuver_Type_names + 266, 16}, 26 },
  { {DirectionsLeg_Maneuver_Type_names + 282, 15}, 27 },
  { {DirectionsLeg_Maneuver_Type_names + 297, 10}, 14 },
  { {DirectionsLeg_Maneuver_Type_names + 307, 11}, 11 },
  { {DirectionsLeg_Maneuver_Type_names + 318, 11}, 16 },
  { {DirectionsLeg_Maneuver_Type_names + 329, 12}, 9 },
  { {DirectionsLeg_Maneuver_Type_names + 341, 6}, 1 },
  { {DirectionsLeg_Maneuver_Type_names + 347, 10}, 3 },
  { {DirectionsLeg_Maneuver_Type_names + 357, 11}, 2 },
  { {DirectionsLeg_Maneuver_Type_names + 368, 9}, 24 },
  { {DirectionsLeg_Maneuver_Type_names + 377, 10}, 23 },
  { {DirectionsLeg_Maneuver_Type_names + 387, 13}, 22 },
  { {DirectionsLeg_Maneuver_Type_names + 400, 11}, 40 },
  { {DirectionsLeg_Maneuver_Type_names + 411, 8}, 30 },
  { {DirectionsLeg_Maneuver_Type_names + 419, 29}, 35 },
  { {DirectionsLeg_Maneuver_Type_names + 448, 23}, 33 },
  { {DirectionsLeg_Maneuver_Type_names + 471, 26}, 34 },
  { {DirectionsLeg_Maneuver_Type_names + 497, 16}, 32 },
  { {DirectionsLeg_Maneuver_Type_names + 513, 16}, 31 },
  { {DirectionsLeg_Maneuver_Type_names + 529, 10}, 13 },
  { {DirectionsLeg_Maneuver_Type_names + 539, 11}, 12 },
};

static const int DirectionsLeg_Maneuver_Type_entries_by_number[] = {
  17, // 0 -> kNone
  29, // 1 -> kStart
  31, // 2 -> kStartRight
  30, // 3 -> kStartLeft
  4, // 4 -> kDestination
  6, // 5 -> kDestinationRight
  5, // 6 -> kDestinationLeft
  0, // 7 -> kBecomes
  3, // 8 -> kContinue
  28, // 9 -> kSlightRight
  22, // 10 -> kRight
  26, // 11 -> kSharpRight
  43, // 12 -> kUturnRight
  42, // 13 -> kUturnLeft
  25, // 14 -> kSharpLeft
  13, // 15 -> kLeft
  27, // 16 -> kSlightLeft
  21, // 17 -> kRampStraight
  20, // 18 -> kRampRight
  19, // 19 -> kRampLeft
  10, // 20 -> kExitRight
  9, // 21 -> kExitLeft
  34, // 22 -> kStayStraight
  33, // 23 -> kStayRight
  32, // 24 -> kStayLeft
  14, // 25 -> kMerge
  23, // 26 -> kRoundaboutEnter
  24, // 27 -> kRoundaboutExit
  11, // 28 -> kFerryEnter
  12, // 29 -> kFerryExit
  36, // 30 -> kTransit
  41, // 31 -> kTransitTransfer
  40, // 32 -> kTransitRemainOn
  38, // 33 -> kTransitConnectionStart
  39, // 34 -> kTransitConnectionTransfer
  37, // 35 -> kTransitConnectionDestination
  18, // 36 -> kPostTransitConnectionDestination
  16, // 37 -> kMergeRight
  15, // 38 -> kMergeLeft
  7, // 39 -> kElevatorEnter
  35, // 40 -> kStepsEnter
  8, // 41 -> kEscalatorEnter
  1, // 42 -> kBuildingEnter
  2, // 43 -> kBuildingExit
};

const std::string& DirectionsLeg_Maneuver_Type_Name(
    DirectionsLeg_Maneuver_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_Maneuver_Type_entries,
          DirectionsLeg_Maneuver_Type_entries_by_number,
          44, DirectionsLeg_Maneuver_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_Maneuver_Type_entries,
      DirectionsLeg_Maneuver_Type_entries_by_number,
      44, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_Maneuver_Type_strings[idx].get();
}
bool DirectionsLeg_Maneuver_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_Maneuver_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_Maneuver_Type_entries, 44, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_Maneuver_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kNone;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStart;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStartRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStartLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kDestination;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kDestinationRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kDestinationLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kBecomes;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kContinue;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSlightRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSharpRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kUturnRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kUturnLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSharpLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSlightLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRampStraight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRampRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRampLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kExitRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kExitLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStayStraight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStayRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStayLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kMerge;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRoundaboutEnter;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRoundaboutExit;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kFerryEnter;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kFerryExit;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransit;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitTransfer;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitRemainOn;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitConnectionStart;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitConnectionTransfer;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitConnectionDestination;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kPostTransitConnectionDestination;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kMergeRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kMergeLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kElevatorEnter;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStepsEnter;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kEscalatorEnter;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kBuildingEnter;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kBuildingExit;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::Type_MIN;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::Type_MAX;
constexpr int DirectionsLeg_Maneuver::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DirectionsLeg_Maneuver_BssManeuverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_Maneuver_BssManeuverType_strings[3] = {};

static const char DirectionsLeg_Maneuver_BssManeuverType_names[] =
  "kNoneAction"
  "kRentBikeAtBikeShare"
  "kReturnBikeAtBikeShare";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_Maneuver_BssManeuverType_entries[] = {
  { {DirectionsLeg_Maneuver_BssManeuverType_names + 0, 11}, 0 },
  { {DirectionsLeg_Maneuver_BssManeuverType_names + 11, 20}, 1 },
  { {DirectionsLeg_Maneuver_BssManeuverType_names + 31, 22}, 2 },
};

static const int DirectionsLeg_Maneuver_BssManeuverType_entries_by_number[] = {
  0, // 0 -> kNoneAction
  1, // 1 -> kRentBikeAtBikeShare
  2, // 2 -> kReturnBikeAtBikeShare
};

const std::string& DirectionsLeg_Maneuver_BssManeuverType_Name(
    DirectionsLeg_Maneuver_BssManeuverType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_Maneuver_BssManeuverType_entries,
          DirectionsLeg_Maneuver_BssManeuverType_entries_by_number,
          3, DirectionsLeg_Maneuver_BssManeuverType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_Maneuver_BssManeuverType_entries,
      DirectionsLeg_Maneuver_BssManeuverType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_Maneuver_BssManeuverType_strings[idx].get();
}
bool DirectionsLeg_Maneuver_BssManeuverType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_Maneuver_BssManeuverType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_Maneuver_BssManeuverType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_Maneuver_BssManeuverType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::kNoneAction;
constexpr DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::kRentBikeAtBikeShare;
constexpr DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::kReturnBikeAtBikeShare;
constexpr DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::BssManeuverType_MIN;
constexpr DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::BssManeuverType_MAX;
constexpr int DirectionsLeg_Maneuver::BssManeuverType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DirectionsLeg_Summary::_Internal {
 public:
  static const ::valhalla::BoundingBox& bbox(const DirectionsLeg_Summary* msg);
};

const ::valhalla::BoundingBox&
DirectionsLeg_Summary::_Internal::bbox(const DirectionsLeg_Summary* msg) {
  return *msg->bbox_;
}
void DirectionsLeg_Summary::clear_bbox() {
  if (GetArenaForAllocation() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
}
DirectionsLeg_Summary::DirectionsLeg_Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsLeg.Summary)
}
DirectionsLeg_Summary::DirectionsLeg_Summary(const DirectionsLeg_Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_bbox()) {
    bbox_ = new ::valhalla::BoundingBox(*from.bbox_);
  } else {
    bbox_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_time_restrictions_) -
    reinterpret_cast<char*>(&time_)) + sizeof(has_time_restrictions_));
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.Summary)
}

inline void DirectionsLeg_Summary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bbox_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_time_restrictions_) -
    reinterpret_cast<char*>(&bbox_)) + sizeof(has_time_restrictions_));
}

DirectionsLeg_Summary::~DirectionsLeg_Summary() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.Summary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void DirectionsLeg_Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bbox_;
}

void DirectionsLeg_Summary::ArenaDtor(void* object) {
  DirectionsLeg_Summary* _this = reinterpret_cast< DirectionsLeg_Summary* >(object);
  (void)_this;
}
void DirectionsLeg_Summary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsLeg_Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsLeg_Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.Summary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && bbox_ != nullptr) {
    delete bbox_;
  }
  bbox_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_time_restrictions_) -
      reinterpret_cast<char*>(&time_)) + sizeof(has_time_restrictions_));
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsLeg_Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .valhalla.BoundingBox bbox = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_time_restrictions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          has_time_restrictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectionsLeg_Summary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsLeg.Summary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float length = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_length(), target);
  }

  // double time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_time(), target);
  }

  // .valhalla.BoundingBox bbox = 3;
  if (this->_internal_has_bbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bbox(this), target, stream);
  }

  // bool has_time_restrictions = 4;
  if (this->_internal_has_time_restrictions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_time_restrictions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsLeg.Summary)
  return target;
}

size_t DirectionsLeg_Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.Summary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .valhalla.BoundingBox bbox = 3;
  if (this->_internal_has_bbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  // double time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 1 + 8;
  }

  // float length = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 4;
  }

  // bool has_time_restrictions = 4;
  if (this->_internal_has_time_restrictions() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsLeg_Summary::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsLeg_Summary*>(
      &from));
}

void DirectionsLeg_Summary::MergeFrom(const DirectionsLeg_Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bbox()) {
    _internal_mutable_bbox()->::valhalla::BoundingBox::MergeFrom(from._internal_bbox());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = from._internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _internal_set_time(from._internal_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = from._internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from._internal_has_time_restrictions() != 0) {
    _internal_set_has_time_restrictions(from._internal_has_time_restrictions());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DirectionsLeg_Summary::CopyFrom(const DirectionsLeg_Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_Summary::IsInitialized() const {
  return true;
}

void DirectionsLeg_Summary::InternalSwap(DirectionsLeg_Summary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionsLeg_Summary, has_time_restrictions_)
      + sizeof(DirectionsLeg_Summary::has_time_restrictions_)
      - PROTOBUF_FIELD_OFFSET(DirectionsLeg_Summary, bbox_)>(
          reinterpret_cast<char*>(&bbox_),
          reinterpret_cast<char*>(&other->bbox_));
}

std::string DirectionsLeg_Summary::GetTypeName() const {
  return "valhalla.DirectionsLeg.Summary";
}


// ===================================================================

class DirectionsLeg_GuidanceView::_Internal {
 public:
};

DirectionsLeg_GuidanceView::DirectionsLeg_GuidanceView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  overlay_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsLeg.GuidanceView)
}
DirectionsLeg_GuidanceView::DirectionsLeg_GuidanceView(const DirectionsLeg_GuidanceView& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      overlay_ids_(from.overlay_ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  data_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_id().empty()) {
    data_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_id(), 
      GetArenaForAllocation());
  }
  base_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    base_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_id().empty()) {
    base_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base_id(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.GuidanceView)
}

inline void DirectionsLeg_GuidanceView::SharedCtor() {
data_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
base_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  base_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

DirectionsLeg_GuidanceView::~DirectionsLeg_GuidanceView() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.GuidanceView)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void DirectionsLeg_GuidanceView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectionsLeg_GuidanceView::ArenaDtor(void* object) {
  DirectionsLeg_GuidanceView* _this = reinterpret_cast< DirectionsLeg_GuidanceView* >(object);
  (void)_this;
}
void DirectionsLeg_GuidanceView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsLeg_GuidanceView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsLeg_GuidanceView::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.GuidanceView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlay_ids_.Clear();
  data_id_.ClearToEmpty();
  base_id_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsLeg_GuidanceView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .valhalla.DirectionsLeg.GuidanceView.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::valhalla::DirectionsLeg_GuidanceView_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string base_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_base_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string overlay_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_overlay_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectionsLeg_GuidanceView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsLeg.GuidanceView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data_id = 1;
  if (!this->_internal_data_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_id().data(), static_cast<int>(this->_internal_data_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.GuidanceView.data_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data_id(), target);
  }

  // .valhalla.DirectionsLeg.GuidanceView.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string base_id = 3;
  if (!this->_internal_base_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_id().data(), static_cast<int>(this->_internal_base_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.GuidanceView.base_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_base_id(), target);
  }

  // repeated string overlay_ids = 4;
  for (int i = 0, n = this->_internal_overlay_ids_size(); i < n; i++) {
    const auto& s = this->_internal_overlay_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.GuidanceView.overlay_ids");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsLeg.GuidanceView)
  return target;
}

size_t DirectionsLeg_GuidanceView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.GuidanceView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string overlay_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(overlay_ids_.size());
  for (int i = 0, n = overlay_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      overlay_ids_.Get(i));
  }

  // string data_id = 1;
  if (!this->_internal_data_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_id());
  }

  // string base_id = 3;
  if (!this->_internal_base_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_id());
  }

  // .valhalla.DirectionsLeg.GuidanceView.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsLeg_GuidanceView::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsLeg_GuidanceView*>(
      &from));
}

void DirectionsLeg_GuidanceView::MergeFrom(const DirectionsLeg_GuidanceView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.GuidanceView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  overlay_ids_.MergeFrom(from.overlay_ids_);
  if (!from._internal_data_id().empty()) {
    _internal_set_data_id(from._internal_data_id());
  }
  if (!from._internal_base_id().empty()) {
    _internal_set_base_id(from._internal_base_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DirectionsLeg_GuidanceView::CopyFrom(const DirectionsLeg_GuidanceView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.GuidanceView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_GuidanceView::IsInitialized() const {
  return true;
}

void DirectionsLeg_GuidanceView::InternalSwap(DirectionsLeg_GuidanceView* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  overlay_ids_.InternalSwap(&other->overlay_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_id_, lhs_arena,
      &other->data_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &base_id_, lhs_arena,
      &other->base_id_, rhs_arena
  );
  swap(type_, other->type_);
}

std::string DirectionsLeg_GuidanceView::GetTypeName() const {
  return "valhalla.DirectionsLeg.GuidanceView";
}


// ===================================================================

class DirectionsLeg_Maneuver::_Internal {
 public:
  static const ::valhalla::TripSign& sign(const DirectionsLeg_Maneuver* msg);
  static const ::valhalla::TransitRouteInfo& transit_info(const DirectionsLeg_Maneuver* msg);
  static const ::valhalla::BikeShareStationInfo& bss_info(const DirectionsLeg_Maneuver* msg);
};

const ::valhalla::TripSign&
DirectionsLeg_Maneuver::_Internal::sign(const DirectionsLeg_Maneuver* msg) {
  return *msg->sign_;
}
const ::valhalla::TransitRouteInfo&
DirectionsLeg_Maneuver::_Internal::transit_info(const DirectionsLeg_Maneuver* msg) {
  return *msg->transit_info_;
}
const ::valhalla::BikeShareStationInfo&
DirectionsLeg_Maneuver::_Internal::bss_info(const DirectionsLeg_Maneuver* msg) {
  return *msg->bss_info_;
}
void DirectionsLeg_Maneuver::clear_street_name() {
  street_name_.Clear();
}
void DirectionsLeg_Maneuver::clear_begin_street_name() {
  begin_street_name_.Clear();
}
void DirectionsLeg_Maneuver::clear_sign() {
  if (GetArenaForAllocation() == nullptr && sign_ != nullptr) {
    delete sign_;
  }
  sign_ = nullptr;
}
void DirectionsLeg_Maneuver::clear_transit_info() {
  if (GetArenaForAllocation() == nullptr && transit_info_ != nullptr) {
    delete transit_info_;
  }
  transit_info_ = nullptr;
}
void DirectionsLeg_Maneuver::clear_roundabout_exit_street_names() {
  roundabout_exit_street_names_.Clear();
}
void DirectionsLeg_Maneuver::clear_bss_info() {
  if (GetArenaForAllocation() == nullptr && bss_info_ != nullptr) {
    delete bss_info_;
  }
  bss_info_ = nullptr;
}
DirectionsLeg_Maneuver::DirectionsLeg_Maneuver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  street_name_(arena),
  begin_street_name_(arena),
  roundabout_exit_street_names_(arena),
  guidance_views_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsLeg.Maneuver)
}
DirectionsLeg_Maneuver::DirectionsLeg_Maneuver(const DirectionsLeg_Maneuver& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      street_name_(from.street_name_),
      begin_street_name_(from.begin_street_name_),
      roundabout_exit_street_names_(from.roundabout_exit_street_names_),
      guidance_views_(from.guidance_views_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  text_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text_instruction().empty()) {
    text_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text_instruction(), 
      GetArenaForAllocation());
  }
  verbal_transition_alert_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    verbal_transition_alert_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verbal_transition_alert_instruction().empty()) {
    verbal_transition_alert_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbal_transition_alert_instruction(), 
      GetArenaForAllocation());
  }
  verbal_pre_transition_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    verbal_pre_transition_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verbal_pre_transition_instruction().empty()) {
    verbal_pre_transition_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbal_pre_transition_instruction(), 
      GetArenaForAllocation());
  }
  verbal_post_transition_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    verbal_post_transition_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verbal_post_transition_instruction().empty()) {
    verbal_post_transition_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbal_post_transition_instruction(), 
      GetArenaForAllocation());
  }
  depart_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    depart_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_depart_instruction().empty()) {
    depart_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_depart_instruction(), 
      GetArenaForAllocation());
  }
  verbal_depart_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    verbal_depart_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verbal_depart_instruction().empty()) {
    verbal_depart_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbal_depart_instruction(), 
      GetArenaForAllocation());
  }
  arrive_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    arrive_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arrive_instruction().empty()) {
    arrive_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_arrive_instruction(), 
      GetArenaForAllocation());
  }
  verbal_arrive_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    verbal_arrive_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verbal_arrive_instruction().empty()) {
    verbal_arrive_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbal_arrive_instruction(), 
      GetArenaForAllocation());
  }
  verbal_succinct_transition_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    verbal_succinct_transition_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verbal_succinct_transition_instruction().empty()) {
    verbal_succinct_transition_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbal_succinct_transition_instruction(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sign()) {
    sign_ = new ::valhalla::TripSign(*from.sign_);
  } else {
    sign_ = nullptr;
  }
  if (from._internal_has_transit_info()) {
    transit_info_ = new ::valhalla::TransitRouteInfo(*from.transit_info_);
  } else {
    transit_info_ = nullptr;
  }
  if (from._internal_has_bss_info()) {
    bss_info_ = new ::valhalla::BikeShareStationInfo(*from.bss_info_);
  } else {
    bss_info_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bss_maneuver_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bss_maneuver_type_));
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.Maneuver)
}

inline void DirectionsLeg_Maneuver::SharedCtor() {
text_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
verbal_transition_alert_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  verbal_transition_alert_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
verbal_pre_transition_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  verbal_pre_transition_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
verbal_post_transition_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  verbal_post_transition_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
depart_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  depart_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
verbal_depart_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  verbal_depart_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
arrive_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  arrive_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
verbal_arrive_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  verbal_arrive_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
verbal_succinct_transition_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  verbal_succinct_transition_instruction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sign_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bss_maneuver_type_) -
    reinterpret_cast<char*>(&sign_)) + sizeof(bss_maneuver_type_));
}

DirectionsLeg_Maneuver::~DirectionsLeg_Maneuver() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.Maneuver)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void DirectionsLeg_Maneuver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbal_transition_alert_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbal_pre_transition_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbal_post_transition_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  depart_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbal_depart_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arrive_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbal_arrive_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbal_succinct_transition_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sign_;
  if (this != internal_default_instance()) delete transit_info_;
  if (this != internal_default_instance()) delete bss_info_;
}

void DirectionsLeg_Maneuver::ArenaDtor(void* object) {
  DirectionsLeg_Maneuver* _this = reinterpret_cast< DirectionsLeg_Maneuver* >(object);
  (void)_this;
}
void DirectionsLeg_Maneuver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsLeg_Maneuver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsLeg_Maneuver::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.Maneuver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  street_name_.Clear();
  begin_street_name_.Clear();
  roundabout_exit_street_names_.Clear();
  guidance_views_.Clear();
  text_instruction_.ClearToEmpty();
  verbal_transition_alert_instruction_.ClearToEmpty();
  verbal_pre_transition_instruction_.ClearToEmpty();
  verbal_post_transition_instruction_.ClearToEmpty();
  depart_instruction_.ClearToEmpty();
  verbal_depart_instruction_.ClearToEmpty();
  arrive_instruction_.ClearToEmpty();
  verbal_arrive_instruction_.ClearToEmpty();
  verbal_succinct_transition_instruction_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sign_ != nullptr) {
    delete sign_;
  }
  sign_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transit_info_ != nullptr) {
    delete transit_info_;
  }
  transit_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bss_info_ != nullptr) {
    delete bss_info_;
  }
  bss_info_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bss_maneuver_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(bss_maneuver_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsLeg_Maneuver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .valhalla.DirectionsLeg.Maneuver.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::valhalla::DirectionsLeg_Maneuver_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string text_instruction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.StreetName street_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_street_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .valhalla.DirectionsLeg.Maneuver.CardinalDirection begin_cardinal_direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_begin_cardinal_direction(static_cast<::valhalla::DirectionsLeg_Maneuver_CardinalDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 begin_heading = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          begin_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 begin_shape_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          begin_shape_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 end_shape_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          end_shape_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool portions_toll = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          portions_toll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool portions_unpaved = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          portions_unpaved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string verbal_transition_alert_instruction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_verbal_transition_alert_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string verbal_pre_transition_instruction = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_verbal_pre_transition_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string verbal_post_transition_instruction = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_verbal_post_transition_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.StreetName begin_street_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_begin_street_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .valhalla.TripSign sign = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 roundabout_exit_count = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          roundabout_exit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string depart_instruction = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_depart_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string verbal_depart_instruction = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_verbal_depart_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string arrive_instruction = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_arrive_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string verbal_arrive_instruction = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_verbal_arrive_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .valhalla.TransitRouteInfo transit_info = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_transit_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool verbal_multi_cue = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          verbal_multi_cue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .valhalla.TravelMode travel_mode = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_travel_mode(static_cast<::valhalla::TravelMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .valhalla.VehicleType vehicle_type = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vehicle_type(static_cast<::valhalla::VehicleType>(val));
        } else
          goto handle_unusual;
        continue;
      // .valhalla.PedestrianType pedestrian_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pedestrian_type(static_cast<::valhalla::PedestrianType>(val));
        } else
          goto handle_unusual;
        continue;
      // .valhalla.BicycleType bicycle_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bicycle_type(static_cast<::valhalla::BicycleType>(val));
        } else
          goto handle_unusual;
        continue;
      // .valhalla.TransitType transit_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_transit_type(static_cast<::valhalla::TransitType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 begin_path_index = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          begin_path_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 end_path_index = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          end_path_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool to_stay_on = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          to_stay_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.StreetName roundabout_exit_street_names = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_roundabout_exit_street_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 turn_degree = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          turn_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_time_restrictions = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          has_time_restrictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.DirectionsLeg.GuidanceView guidance_views = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_guidance_views(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .valhalla.DirectionsLeg.Maneuver.BssManeuverType bss_maneuver_type = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bss_maneuver_type(static_cast<::valhalla::DirectionsLeg_Maneuver_BssManeuverType>(val));
        } else
          goto handle_unusual;
        continue;
      // string verbal_succinct_transition_instruction = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_verbal_succinct_transition_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .valhalla.BikeShareStationInfo bss_info = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bss_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectionsLeg_Maneuver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsLeg.Maneuver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .valhalla.DirectionsLeg.Maneuver.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string text_instruction = 2;
  if (!this->_internal_text_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_instruction().data(), static_cast<int>(this->_internal_text_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.text_instruction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text_instruction(), target);
  }

  // repeated .valhalla.StreetName street_name = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_street_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_street_name(i), target, stream);
  }

  // float length = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_length(), target);
  }

  // double time = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_time(), target);
  }

  // .valhalla.DirectionsLeg.Maneuver.CardinalDirection begin_cardinal_direction = 6;
  if (this->_internal_begin_cardinal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_begin_cardinal_direction(), target);
  }

  // uint32 begin_heading = 7;
  if (this->_internal_begin_heading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_begin_heading(), target);
  }

  // uint32 begin_shape_index = 8;
  if (this->_internal_begin_shape_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_begin_shape_index(), target);
  }

  // uint32 end_shape_index = 9;
  if (this->_internal_end_shape_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_end_shape_index(), target);
  }

  // bool portions_toll = 10;
  if (this->_internal_portions_toll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_portions_toll(), target);
  }

  // bool portions_unpaved = 11;
  if (this->_internal_portions_unpaved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_portions_unpaved(), target);
  }

  // string verbal_transition_alert_instruction = 12;
  if (!this->_internal_verbal_transition_alert_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verbal_transition_alert_instruction().data(), static_cast<int>(this->_internal_verbal_transition_alert_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_transition_alert_instruction");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_verbal_transition_alert_instruction(), target);
  }

  // string verbal_pre_transition_instruction = 13;
  if (!this->_internal_verbal_pre_transition_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verbal_pre_transition_instruction().data(), static_cast<int>(this->_internal_verbal_pre_transition_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_pre_transition_instruction");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_verbal_pre_transition_instruction(), target);
  }

  // string verbal_post_transition_instruction = 14;
  if (!this->_internal_verbal_post_transition_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verbal_post_transition_instruction().data(), static_cast<int>(this->_internal_verbal_post_transition_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_post_transition_instruction");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_verbal_post_transition_instruction(), target);
  }

  // repeated .valhalla.StreetName begin_street_name = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_begin_street_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_begin_street_name(i), target, stream);
  }

  // .valhalla.TripSign sign = 16;
  if (this->_internal_has_sign()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::sign(this), target, stream);
  }

  // uint32 roundabout_exit_count = 17;
  if (this->_internal_roundabout_exit_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_roundabout_exit_count(), target);
  }

  // string depart_instruction = 18;
  if (!this->_internal_depart_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_depart_instruction().data(), static_cast<int>(this->_internal_depart_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.depart_instruction");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_depart_instruction(), target);
  }

  // string verbal_depart_instruction = 19;
  if (!this->_internal_verbal_depart_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verbal_depart_instruction().data(), static_cast<int>(this->_internal_verbal_depart_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_depart_instruction");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_verbal_depart_instruction(), target);
  }

  // string arrive_instruction = 20;
  if (!this->_internal_arrive_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arrive_instruction().data(), static_cast<int>(this->_internal_arrive_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.arrive_instruction");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_arrive_instruction(), target);
  }

  // string verbal_arrive_instruction = 21;
  if (!this->_internal_verbal_arrive_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verbal_arrive_instruction().data(), static_cast<int>(this->_internal_verbal_arrive_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_arrive_instruction");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_verbal_arrive_instruction(), target);
  }

  // .valhalla.TransitRouteInfo transit_info = 22;
  if (this->_internal_has_transit_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::transit_info(this), target, stream);
  }

  // bool verbal_multi_cue = 23;
  if (this->_internal_verbal_multi_cue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_verbal_multi_cue(), target);
  }

  // .valhalla.TravelMode travel_mode = 24;
  if (this->_internal_travel_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_travel_mode(), target);
  }

  // .valhalla.VehicleType vehicle_type = 25;
  if (this->_internal_vehicle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_vehicle_type(), target);
  }

  // .valhalla.PedestrianType pedestrian_type = 26;
  if (this->_internal_pedestrian_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_pedestrian_type(), target);
  }

  // .valhalla.BicycleType bicycle_type = 27;
  if (this->_internal_bicycle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_bicycle_type(), target);
  }

  // .valhalla.TransitType transit_type = 28;
  if (this->_internal_transit_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->_internal_transit_type(), target);
  }

  // uint32 begin_path_index = 29;
  if (this->_internal_begin_path_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_begin_path_index(), target);
  }

  // uint32 end_path_index = 30;
  if (this->_internal_end_path_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_end_path_index(), target);
  }

  // bool to_stay_on = 31;
  if (this->_internal_to_stay_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_to_stay_on(), target);
  }

  // repeated .valhalla.StreetName roundabout_exit_street_names = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roundabout_exit_street_names_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_roundabout_exit_street_names(i), target, stream);
  }

  // uint32 turn_degree = 33;
  if (this->_internal_turn_degree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_turn_degree(), target);
  }

  // bool has_time_restrictions = 34;
  if (this->_internal_has_time_restrictions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_has_time_restrictions(), target);
  }

  // repeated .valhalla.DirectionsLeg.GuidanceView guidance_views = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_guidance_views_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, this->_internal_guidance_views(i), target, stream);
  }

  // .valhalla.DirectionsLeg.Maneuver.BssManeuverType bss_maneuver_type = 36;
  if (this->_internal_bss_maneuver_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      36, this->_internal_bss_maneuver_type(), target);
  }

  // string verbal_succinct_transition_instruction = 37;
  if (!this->_internal_verbal_succinct_transition_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verbal_succinct_transition_instruction().data(), static_cast<int>(this->_internal_verbal_succinct_transition_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_succinct_transition_instruction");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_verbal_succinct_transition_instruction(), target);
  }

  // .valhalla.BikeShareStationInfo bss_info = 38;
  if (this->_internal_has_bss_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::bss_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsLeg.Maneuver)
  return target;
}

size_t DirectionsLeg_Maneuver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.Maneuver)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.StreetName street_name = 3;
  total_size += 1UL * this->_internal_street_name_size();
  for (const auto& msg : this->street_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.StreetName begin_street_name = 15;
  total_size += 1UL * this->_internal_begin_street_name_size();
  for (const auto& msg : this->begin_street_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.StreetName roundabout_exit_street_names = 32;
  total_size += 2UL * this->_internal_roundabout_exit_street_names_size();
  for (const auto& msg : this->roundabout_exit_street_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.DirectionsLeg.GuidanceView guidance_views = 35;
  total_size += 2UL * this->_internal_guidance_views_size();
  for (const auto& msg : this->guidance_views_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text_instruction = 2;
  if (!this->_internal_text_instruction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text_instruction());
  }

  // string verbal_transition_alert_instruction = 12;
  if (!this->_internal_verbal_transition_alert_instruction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verbal_transition_alert_instruction());
  }

  // string verbal_pre_transition_instruction = 13;
  if (!this->_internal_verbal_pre_transition_instruction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verbal_pre_transition_instruction());
  }

  // string verbal_post_transition_instruction = 14;
  if (!this->_internal_verbal_post_transition_instruction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verbal_post_transition_instruction());
  }

  // string depart_instruction = 18;
  if (!this->_internal_depart_instruction().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_depart_instruction());
  }

  // string verbal_depart_instruction = 19;
  if (!this->_internal_verbal_depart_instruction().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verbal_depart_instruction());
  }

  // string arrive_instruction = 20;
  if (!this->_internal_arrive_instruction().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arrive_instruction());
  }

  // string verbal_arrive_instruction = 21;
  if (!this->_internal_verbal_arrive_instruction().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verbal_arrive_instruction());
  }

  // string verbal_succinct_transition_instruction = 37;
  if (!this->_internal_verbal_succinct_transition_instruction().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verbal_succinct_transition_instruction());
  }

  // .valhalla.TripSign sign = 16;
  if (this->_internal_has_sign()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sign_);
  }

  // .valhalla.TransitRouteInfo transit_info = 22;
  if (this->_internal_has_transit_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transit_info_);
  }

  // .valhalla.BikeShareStationInfo bss_info = 38;
  if (this->_internal_has_bss_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bss_info_);
  }

  // .valhalla.DirectionsLeg.Maneuver.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float length = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 4;
  }

  // double time = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 1 + 8;
  }

  // .valhalla.DirectionsLeg.Maneuver.CardinalDirection begin_cardinal_direction = 6;
  if (this->_internal_begin_cardinal_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_begin_cardinal_direction());
  }

  // uint32 begin_heading = 7;
  if (this->_internal_begin_heading() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_begin_heading());
  }

  // uint32 begin_shape_index = 8;
  if (this->_internal_begin_shape_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_begin_shape_index());
  }

  // uint32 end_shape_index = 9;
  if (this->_internal_end_shape_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_end_shape_index());
  }

  // uint32 roundabout_exit_count = 17;
  if (this->_internal_roundabout_exit_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_roundabout_exit_count());
  }

  // bool portions_toll = 10;
  if (this->_internal_portions_toll() != 0) {
    total_size += 1 + 1;
  }

  // bool portions_unpaved = 11;
  if (this->_internal_portions_unpaved() != 0) {
    total_size += 1 + 1;
  }

  // bool verbal_multi_cue = 23;
  if (this->_internal_verbal_multi_cue() != 0) {
    total_size += 2 + 1;
  }

  // bool to_stay_on = 31;
  if (this->_internal_to_stay_on() != 0) {
    total_size += 2 + 1;
  }

  // .valhalla.TravelMode travel_mode = 24;
  if (this->_internal_travel_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_travel_mode());
  }

  // .valhalla.VehicleType vehicle_type = 25;
  if (this->_internal_vehicle_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vehicle_type());
  }

  // .valhalla.PedestrianType pedestrian_type = 26;
  if (this->_internal_pedestrian_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pedestrian_type());
  }

  // .valhalla.BicycleType bicycle_type = 27;
  if (this->_internal_bicycle_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bicycle_type());
  }

  // .valhalla.TransitType transit_type = 28;
  if (this->_internal_transit_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_transit_type());
  }

  // uint32 begin_path_index = 29;
  if (this->_internal_begin_path_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_begin_path_index());
  }

  // uint32 end_path_index = 30;
  if (this->_internal_end_path_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end_path_index());
  }

  // uint32 turn_degree = 33;
  if (this->_internal_turn_degree() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_turn_degree());
  }

  // bool has_time_restrictions = 34;
  if (this->_internal_has_time_restrictions() != 0) {
    total_size += 2 + 1;
  }

  // .valhalla.DirectionsLeg.Maneuver.BssManeuverType bss_maneuver_type = 36;
  if (this->_internal_bss_maneuver_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bss_maneuver_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsLeg_Maneuver::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsLeg_Maneuver*>(
      &from));
}

void DirectionsLeg_Maneuver::MergeFrom(const DirectionsLeg_Maneuver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.Maneuver)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  street_name_.MergeFrom(from.street_name_);
  begin_street_name_.MergeFrom(from.begin_street_name_);
  roundabout_exit_street_names_.MergeFrom(from.roundabout_exit_street_names_);
  guidance_views_.MergeFrom(from.guidance_views_);
  if (!from._internal_text_instruction().empty()) {
    _internal_set_text_instruction(from._internal_text_instruction());
  }
  if (!from._internal_verbal_transition_alert_instruction().empty()) {
    _internal_set_verbal_transition_alert_instruction(from._internal_verbal_transition_alert_instruction());
  }
  if (!from._internal_verbal_pre_transition_instruction().empty()) {
    _internal_set_verbal_pre_transition_instruction(from._internal_verbal_pre_transition_instruction());
  }
  if (!from._internal_verbal_post_transition_instruction().empty()) {
    _internal_set_verbal_post_transition_instruction(from._internal_verbal_post_transition_instruction());
  }
  if (!from._internal_depart_instruction().empty()) {
    _internal_set_depart_instruction(from._internal_depart_instruction());
  }
  if (!from._internal_verbal_depart_instruction().empty()) {
    _internal_set_verbal_depart_instruction(from._internal_verbal_depart_instruction());
  }
  if (!from._internal_arrive_instruction().empty()) {
    _internal_set_arrive_instruction(from._internal_arrive_instruction());
  }
  if (!from._internal_verbal_arrive_instruction().empty()) {
    _internal_set_verbal_arrive_instruction(from._internal_verbal_arrive_instruction());
  }
  if (!from._internal_verbal_succinct_transition_instruction().empty()) {
    _internal_set_verbal_succinct_transition_instruction(from._internal_verbal_succinct_transition_instruction());
  }
  if (from._internal_has_sign()) {
    _internal_mutable_sign()->::valhalla::TripSign::MergeFrom(from._internal_sign());
  }
  if (from._internal_has_transit_info()) {
    _internal_mutable_transit_info()->::valhalla::TransitRouteInfo::MergeFrom(from._internal_transit_info());
  }
  if (from._internal_has_bss_info()) {
    _internal_mutable_bss_info()->::valhalla::BikeShareStationInfo::MergeFrom(from._internal_bss_info());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = from._internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _internal_set_length(from._internal_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = from._internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_begin_cardinal_direction() != 0) {
    _internal_set_begin_cardinal_direction(from._internal_begin_cardinal_direction());
  }
  if (from._internal_begin_heading() != 0) {
    _internal_set_begin_heading(from._internal_begin_heading());
  }
  if (from._internal_begin_shape_index() != 0) {
    _internal_set_begin_shape_index(from._internal_begin_shape_index());
  }
  if (from._internal_end_shape_index() != 0) {
    _internal_set_end_shape_index(from._internal_end_shape_index());
  }
  if (from._internal_roundabout_exit_count() != 0) {
    _internal_set_roundabout_exit_count(from._internal_roundabout_exit_count());
  }
  if (from._internal_portions_toll() != 0) {
    _internal_set_portions_toll(from._internal_portions_toll());
  }
  if (from._internal_portions_unpaved() != 0) {
    _internal_set_portions_unpaved(from._internal_portions_unpaved());
  }
  if (from._internal_verbal_multi_cue() != 0) {
    _internal_set_verbal_multi_cue(from._internal_verbal_multi_cue());
  }
  if (from._internal_to_stay_on() != 0) {
    _internal_set_to_stay_on(from._internal_to_stay_on());
  }
  if (from._internal_travel_mode() != 0) {
    _internal_set_travel_mode(from._internal_travel_mode());
  }
  if (from._internal_vehicle_type() != 0) {
    _internal_set_vehicle_type(from._internal_vehicle_type());
  }
  if (from._internal_pedestrian_type() != 0) {
    _internal_set_pedestrian_type(from._internal_pedestrian_type());
  }
  if (from._internal_bicycle_type() != 0) {
    _internal_set_bicycle_type(from._internal_bicycle_type());
  }
  if (from._internal_transit_type() != 0) {
    _internal_set_transit_type(from._internal_transit_type());
  }
  if (from._internal_begin_path_index() != 0) {
    _internal_set_begin_path_index(from._internal_begin_path_index());
  }
  if (from._internal_end_path_index() != 0) {
    _internal_set_end_path_index(from._internal_end_path_index());
  }
  if (from._internal_turn_degree() != 0) {
    _internal_set_turn_degree(from._internal_turn_degree());
  }
  if (from._internal_has_time_restrictions() != 0) {
    _internal_set_has_time_restrictions(from._internal_has_time_restrictions());
  }
  if (from._internal_bss_maneuver_type() != 0) {
    _internal_set_bss_maneuver_type(from._internal_bss_maneuver_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DirectionsLeg_Maneuver::CopyFrom(const DirectionsLeg_Maneuver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.Maneuver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_Maneuver::IsInitialized() const {
  return true;
}

void DirectionsLeg_Maneuver::InternalSwap(DirectionsLeg_Maneuver* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  street_name_.InternalSwap(&other->street_name_);
  begin_street_name_.InternalSwap(&other->begin_street_name_);
  roundabout_exit_street_names_.InternalSwap(&other->roundabout_exit_street_names_);
  guidance_views_.InternalSwap(&other->guidance_views_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_instruction_, lhs_arena,
      &other->text_instruction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &verbal_transition_alert_instruction_, lhs_arena,
      &other->verbal_transition_alert_instruction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &verbal_pre_transition_instruction_, lhs_arena,
      &other->verbal_pre_transition_instruction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &verbal_post_transition_instruction_, lhs_arena,
      &other->verbal_post_transition_instruction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &depart_instruction_, lhs_arena,
      &other->depart_instruction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &verbal_depart_instruction_, lhs_arena,
      &other->verbal_depart_instruction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &arrive_instruction_, lhs_arena,
      &other->arrive_instruction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &verbal_arrive_instruction_, lhs_arena,
      &other->verbal_arrive_instruction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &verbal_succinct_transition_instruction_, lhs_arena,
      &other->verbal_succinct_transition_instruction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionsLeg_Maneuver, bss_maneuver_type_)
      + sizeof(DirectionsLeg_Maneuver::bss_maneuver_type_)
      - PROTOBUF_FIELD_OFFSET(DirectionsLeg_Maneuver, sign_)>(
          reinterpret_cast<char*>(&sign_),
          reinterpret_cast<char*>(&other->sign_));
}

std::string DirectionsLeg_Maneuver::GetTypeName() const {
  return "valhalla.DirectionsLeg.Maneuver";
}


// ===================================================================

class DirectionsLeg::_Internal {
 public:
  static const ::valhalla::DirectionsLeg_Summary& summary(const DirectionsLeg* msg);
};

const ::valhalla::DirectionsLeg_Summary&
DirectionsLeg::_Internal::summary(const DirectionsLeg* msg) {
  return *msg->summary_;
}
void DirectionsLeg::clear_location() {
  location_.Clear();
}
DirectionsLeg::DirectionsLeg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  location_(arena),
  maneuver_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsLeg)
}
DirectionsLeg::DirectionsLeg(const DirectionsLeg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      location_(from.location_),
      maneuver_(from.maneuver_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    shape_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shape().empty()) {
    shape_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shape(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_summary()) {
    summary_ = new ::valhalla::DirectionsLeg_Summary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  ::memcpy(&trip_id_, &from.trip_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leg_count_) -
    reinterpret_cast<char*>(&trip_id_)) + sizeof(leg_count_));
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg)
}

inline void DirectionsLeg::SharedCtor() {
shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  shape_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&summary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leg_count_) -
    reinterpret_cast<char*>(&summary_)) + sizeof(leg_count_));
}

DirectionsLeg::~DirectionsLeg() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void DirectionsLeg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shape_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete summary_;
}

void DirectionsLeg::ArenaDtor(void* object) {
  DirectionsLeg* _this = reinterpret_cast< DirectionsLeg* >(object);
  (void)_this;
}
void DirectionsLeg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsLeg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsLeg::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.Clear();
  maneuver_.Clear();
  shape_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && summary_ != nullptr) {
    delete summary_;
  }
  summary_ = nullptr;
  ::memset(&trip_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leg_count_) -
      reinterpret_cast<char*>(&trip_id_)) + sizeof(leg_count_));
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsLeg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 trip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          trip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 leg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          leg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 leg_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          leg_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.Location location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .valhalla.DirectionsLeg.Summary summary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.DirectionsLeg.Maneuver maneuver = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maneuver(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string shape = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_shape();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectionsLeg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsLeg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 trip_id = 1;
  if (this->_internal_trip_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trip_id(), target);
  }

  // uint32 leg_id = 2;
  if (this->_internal_leg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leg_id(), target);
  }

  // uint32 leg_count = 3;
  if (this->_internal_leg_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_leg_count(), target);
  }

  // repeated .valhalla.Location location = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_location_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_location(i), target, stream);
  }

  // .valhalla.DirectionsLeg.Summary summary = 5;
  if (this->_internal_has_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::summary(this), target, stream);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver maneuver = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_maneuver_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_maneuver(i), target, stream);
  }

  // string shape = 7;
  if (!this->_internal_shape().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shape().data(), static_cast<int>(this->_internal_shape().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.shape");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_shape(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsLeg)
  return target;
}

size_t DirectionsLeg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.Location location = 4;
  total_size += 1UL * this->_internal_location_size();
  for (const auto& msg : this->location_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver maneuver = 6;
  total_size += 1UL * this->_internal_maneuver_size();
  for (const auto& msg : this->maneuver_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string shape = 7;
  if (!this->_internal_shape().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shape());
  }

  // .valhalla.DirectionsLeg.Summary summary = 5;
  if (this->_internal_has_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  // uint64 trip_id = 1;
  if (this->_internal_trip_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_trip_id());
  }

  // uint32 leg_id = 2;
  if (this->_internal_leg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_leg_id());
  }

  // uint32 leg_count = 3;
  if (this->_internal_leg_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_leg_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsLeg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsLeg*>(
      &from));
}

void DirectionsLeg::MergeFrom(const DirectionsLeg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  location_.MergeFrom(from.location_);
  maneuver_.MergeFrom(from.maneuver_);
  if (!from._internal_shape().empty()) {
    _internal_set_shape(from._internal_shape());
  }
  if (from._internal_has_summary()) {
    _internal_mutable_summary()->::valhalla::DirectionsLeg_Summary::MergeFrom(from._internal_summary());
  }
  if (from._internal_trip_id() != 0) {
    _internal_set_trip_id(from._internal_trip_id());
  }
  if (from._internal_leg_id() != 0) {
    _internal_set_leg_id(from._internal_leg_id());
  }
  if (from._internal_leg_count() != 0) {
    _internal_set_leg_count(from._internal_leg_count());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DirectionsLeg::CopyFrom(const DirectionsLeg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg::IsInitialized() const {
  return true;
}

void DirectionsLeg::InternalSwap(DirectionsLeg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  location_.InternalSwap(&other->location_);
  maneuver_.InternalSwap(&other->maneuver_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shape_, lhs_arena,
      &other->shape_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionsLeg, leg_count_)
      + sizeof(DirectionsLeg::leg_count_)
      - PROTOBUF_FIELD_OFFSET(DirectionsLeg, summary_)>(
          reinterpret_cast<char*>(&summary_),
          reinterpret_cast<char*>(&other->summary_));
}

std::string DirectionsLeg::GetTypeName() const {
  return "valhalla.DirectionsLeg";
}


// ===================================================================

class DirectionsRoute::_Internal {
 public:
};

DirectionsRoute::DirectionsRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  legs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsRoute)
}
DirectionsRoute::DirectionsRoute(const DirectionsRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      legs_(from.legs_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsRoute)
}

inline void DirectionsRoute::SharedCtor() {
}

DirectionsRoute::~DirectionsRoute() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsRoute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void DirectionsRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DirectionsRoute::ArenaDtor(void* object) {
  DirectionsRoute* _this = reinterpret_cast< DirectionsRoute* >(object);
  (void)_this;
}
void DirectionsRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsRoute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  legs_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .valhalla.DirectionsLeg legs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_legs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectionsRoute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsRoute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .valhalla.DirectionsLeg legs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_legs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_legs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsRoute)
  return target;
}

size_t DirectionsRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsRoute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.DirectionsLeg legs = 1;
  total_size += 1UL * this->_internal_legs_size();
  for (const auto& msg : this->legs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsRoute::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsRoute*>(
      &from));
}

void DirectionsRoute::MergeFrom(const DirectionsRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsRoute)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  legs_.MergeFrom(from.legs_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DirectionsRoute::CopyFrom(const DirectionsRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsRoute::IsInitialized() const {
  return true;
}

void DirectionsRoute::InternalSwap(DirectionsRoute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  legs_.InternalSwap(&other->legs_);
}

std::string DirectionsRoute::GetTypeName() const {
  return "valhalla.DirectionsRoute";
}


// ===================================================================

class Directions::_Internal {
 public:
};

Directions::Directions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  routes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.Directions)
}
Directions::Directions(const Directions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:valhalla.Directions)
}

inline void Directions::SharedCtor() {
}

Directions::~Directions() {
  // @@protoc_insertion_point(destructor:valhalla.Directions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Directions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Directions::ArenaDtor(void* object) {
  Directions* _this = reinterpret_cast< Directions* >(object);
  (void)_this;
}
void Directions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Directions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Directions::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Directions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Directions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .valhalla.DirectionsRoute routes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Directions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Directions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .valhalla.DirectionsRoute routes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_routes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Directions)
  return target;
}

size_t Directions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Directions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.DirectionsRoute routes = 1;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Directions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Directions*>(
      &from));
}

void Directions::MergeFrom(const Directions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Directions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Directions::CopyFrom(const Directions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Directions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Directions::IsInitialized() const {
  return true;
}

void Directions::InternalSwap(Directions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  routes_.InternalSwap(&other->routes_);
}

std::string Directions::GetTypeName() const {
  return "valhalla.Directions";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsLeg_Summary* Arena::CreateMaybeMessage< ::valhalla::DirectionsLeg_Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsLeg_Summary >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsLeg_GuidanceView* Arena::CreateMaybeMessage< ::valhalla::DirectionsLeg_GuidanceView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsLeg_GuidanceView >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsLeg_Maneuver* Arena::CreateMaybeMessage< ::valhalla::DirectionsLeg_Maneuver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsLeg_Maneuver >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsLeg* Arena::CreateMaybeMessage< ::valhalla::DirectionsLeg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsLeg >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsRoute* Arena::CreateMaybeMessage< ::valhalla::DirectionsRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::Directions* Arena::CreateMaybeMessage< ::valhalla::Directions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::Directions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
