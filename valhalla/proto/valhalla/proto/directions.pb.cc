// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directions.proto

#include "directions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace valhalla {
constexpr DirectionsLeg_Summary::DirectionsLeg_Summary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bbox_(nullptr)
  , time_(0)
  , length_(0)
  , has_time_restrictions_(false){}
struct DirectionsLeg_SummaryDefaultTypeInternal {
  constexpr DirectionsLeg_SummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsLeg_SummaryDefaultTypeInternal() {}
  union {
    DirectionsLeg_Summary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsLeg_SummaryDefaultTypeInternal _DirectionsLeg_Summary_default_instance_;
constexpr DirectionsLeg_TransitInfo::DirectionsLeg_TransitInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transit_stops_()
  , onestop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , short_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , long_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headsign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operator_onestop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operator_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operator_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(0u)
  , text_color_(0u){}
struct DirectionsLeg_TransitInfoDefaultTypeInternal {
  constexpr DirectionsLeg_TransitInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsLeg_TransitInfoDefaultTypeInternal() {}
  union {
    DirectionsLeg_TransitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsLeg_TransitInfoDefaultTypeInternal _DirectionsLeg_TransitInfo_default_instance_;
constexpr DirectionsLeg_GuidanceView::DirectionsLeg_GuidanceView(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : overlay_ids_()
  , data_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct DirectionsLeg_GuidanceViewDefaultTypeInternal {
  constexpr DirectionsLeg_GuidanceViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsLeg_GuidanceViewDefaultTypeInternal() {}
  union {
    DirectionsLeg_GuidanceView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsLeg_GuidanceViewDefaultTypeInternal _DirectionsLeg_GuidanceView_default_instance_;
constexpr DirectionsLeg_Maneuver_SignElement::DirectionsLeg_Maneuver_SignElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_route_number_(false)
  , consecutive_count_(0u){}
struct DirectionsLeg_Maneuver_SignElementDefaultTypeInternal {
  constexpr DirectionsLeg_Maneuver_SignElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsLeg_Maneuver_SignElementDefaultTypeInternal() {}
  union {
    DirectionsLeg_Maneuver_SignElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsLeg_Maneuver_SignElementDefaultTypeInternal _DirectionsLeg_Maneuver_SignElement_default_instance_;
constexpr DirectionsLeg_Maneuver_Sign::DirectionsLeg_Maneuver_Sign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exit_numbers_()
  , exit_onto_streets_()
  , exit_toward_locations_()
  , exit_names_()
  , guide_onto_streets_()
  , guide_toward_locations_()
  , junction_names_(){}
struct DirectionsLeg_Maneuver_SignDefaultTypeInternal {
  constexpr DirectionsLeg_Maneuver_SignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsLeg_Maneuver_SignDefaultTypeInternal() {}
  union {
    DirectionsLeg_Maneuver_Sign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsLeg_Maneuver_SignDefaultTypeInternal _DirectionsLeg_Maneuver_Sign_default_instance_;
constexpr DirectionsLeg_Maneuver::DirectionsLeg_Maneuver(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : street_name_()
  , begin_street_name_()
  , roundabout_exit_street_names_()
  , guidance_views_()
  , text_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbal_transition_alert_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbal_pre_transition_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbal_post_transition_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , depart_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbal_depart_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , arrive_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbal_arrive_instruction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sign_(nullptr)
  , transit_info_(nullptr)
  , type_(0)

  , length_(0)
  , time_(0)
  , begin_cardinal_direction_(0)

  , begin_heading_(0u)
  , begin_shape_index_(0u)
  , end_shape_index_(0u)
  , roundabout_exit_count_(0u)
  , portions_toll_(false)
  , portions_unpaved_(false)
  , verbal_multi_cue_(false)
  , to_stay_on_(false)
  , travel_mode_(0)

  , vehicle_type_(0)

  , pedestrian_type_(0)

  , bicycle_type_(0)

  , transit_type_(0)

  , begin_path_index_(0u)
  , end_path_index_(0u)
  , turn_degree_(0u)
  , has_time_restrictions_(false)
  , bss_maneuver_type_(1)
{}
struct DirectionsLeg_ManeuverDefaultTypeInternal {
  constexpr DirectionsLeg_ManeuverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsLeg_ManeuverDefaultTypeInternal() {}
  union {
    DirectionsLeg_Maneuver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsLeg_ManeuverDefaultTypeInternal _DirectionsLeg_Maneuver_default_instance_;
constexpr DirectionsLeg::DirectionsLeg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_()
  , maneuver_()
  , shape_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , summary_(nullptr)
  , trip_id_(PROTOBUF_ULONGLONG(0))
  , leg_id_(0u)
  , leg_count_(0u){}
struct DirectionsLegDefaultTypeInternal {
  constexpr DirectionsLegDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsLegDefaultTypeInternal() {}
  union {
    DirectionsLeg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsLegDefaultTypeInternal _DirectionsLeg_default_instance_;
constexpr DirectionsRoute::DirectionsRoute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : legs_(){}
struct DirectionsRouteDefaultTypeInternal {
  constexpr DirectionsRouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsRouteDefaultTypeInternal() {}
  union {
    DirectionsRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsRouteDefaultTypeInternal _DirectionsRoute_default_instance_;
constexpr Directions::Directions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routes_(){}
struct DirectionsDefaultTypeInternal {
  constexpr DirectionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionsDefaultTypeInternal() {}
  union {
    Directions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionsDefaultTypeInternal _Directions_default_instance_;
}  // namespace valhalla
namespace valhalla {
bool DirectionsLeg_GuidanceView_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_GuidanceView_Type_strings[9] = {};

static const char DirectionsLeg_GuidanceView_Type_names[] =
  "kAftertoll"
  "kCityreal"
  "kDirectionboard"
  "kEnt"
  "kExit"
  "kJunction"
  "kSapa"
  "kSignboard"
  "kTollbranch";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_GuidanceView_Type_entries[] = {
  { {DirectionsLeg_GuidanceView_Type_names + 0, 10}, 3 },
  { {DirectionsLeg_GuidanceView_Type_names + 10, 9}, 6 },
  { {DirectionsLeg_GuidanceView_Type_names + 19, 15}, 7 },
  { {DirectionsLeg_GuidanceView_Type_names + 34, 4}, 4 },
  { {DirectionsLeg_GuidanceView_Type_names + 38, 5}, 5 },
  { {DirectionsLeg_GuidanceView_Type_names + 43, 9}, 0 },
  { {DirectionsLeg_GuidanceView_Type_names + 52, 5}, 1 },
  { {DirectionsLeg_GuidanceView_Type_names + 57, 10}, 8 },
  { {DirectionsLeg_GuidanceView_Type_names + 67, 11}, 2 },
};

static const int DirectionsLeg_GuidanceView_Type_entries_by_number[] = {
  5, // 0 -> kJunction
  6, // 1 -> kSapa
  8, // 2 -> kTollbranch
  0, // 3 -> kAftertoll
  3, // 4 -> kEnt
  4, // 5 -> kExit
  1, // 6 -> kCityreal
  2, // 7 -> kDirectionboard
  7, // 8 -> kSignboard
};

const std::string& DirectionsLeg_GuidanceView_Type_Name(
    DirectionsLeg_GuidanceView_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_GuidanceView_Type_entries,
          DirectionsLeg_GuidanceView_Type_entries_by_number,
          9, DirectionsLeg_GuidanceView_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_GuidanceView_Type_entries,
      DirectionsLeg_GuidanceView_Type_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_GuidanceView_Type_strings[idx].get();
}
bool DirectionsLeg_GuidanceView_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_GuidanceView_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_GuidanceView_Type_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_GuidanceView_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kJunction;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kSapa;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kTollbranch;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kAftertoll;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kEnt;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kExit;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kCityreal;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kDirectionboard;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kSignboard;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::Type_MIN;
constexpr DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::Type_MAX;
constexpr int DirectionsLeg_GuidanceView::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DirectionsLeg_Maneuver_CardinalDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_Maneuver_CardinalDirection_strings[8] = {};

static const char DirectionsLeg_Maneuver_CardinalDirection_names[] =
  "kEast"
  "kNorth"
  "kNorthEast"
  "kNorthWest"
  "kSouth"
  "kSouthEast"
  "kSouthWest"
  "kWest";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_Maneuver_CardinalDirection_entries[] = {
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 0, 5}, 2 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 5, 6}, 0 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 11, 10}, 1 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 21, 10}, 7 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 31, 6}, 4 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 37, 10}, 3 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 47, 10}, 5 },
  { {DirectionsLeg_Maneuver_CardinalDirection_names + 57, 5}, 6 },
};

static const int DirectionsLeg_Maneuver_CardinalDirection_entries_by_number[] = {
  1, // 0 -> kNorth
  2, // 1 -> kNorthEast
  0, // 2 -> kEast
  5, // 3 -> kSouthEast
  4, // 4 -> kSouth
  6, // 5 -> kSouthWest
  7, // 6 -> kWest
  3, // 7 -> kNorthWest
};

const std::string& DirectionsLeg_Maneuver_CardinalDirection_Name(
    DirectionsLeg_Maneuver_CardinalDirection value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_Maneuver_CardinalDirection_entries,
          DirectionsLeg_Maneuver_CardinalDirection_entries_by_number,
          8, DirectionsLeg_Maneuver_CardinalDirection_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_Maneuver_CardinalDirection_entries,
      DirectionsLeg_Maneuver_CardinalDirection_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_Maneuver_CardinalDirection_strings[idx].get();
}
bool DirectionsLeg_Maneuver_CardinalDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_Maneuver_CardinalDirection* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_Maneuver_CardinalDirection_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_Maneuver_CardinalDirection>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kNorth;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kNorthEast;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kEast;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kSouthEast;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kSouth;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kSouthWest;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kWest;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kNorthWest;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::CardinalDirection_MIN;
constexpr DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::CardinalDirection_MAX;
constexpr int DirectionsLeg_Maneuver::CardinalDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DirectionsLeg_Maneuver_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_Maneuver_Type_strings[39] = {};

static const char DirectionsLeg_Maneuver_Type_names[] =
  "kBecomes"
  "kContinue"
  "kDestination"
  "kDestinationLeft"
  "kDestinationRight"
  "kExitLeft"
  "kExitRight"
  "kFerryEnter"
  "kFerryExit"
  "kLeft"
  "kMerge"
  "kMergeLeft"
  "kMergeRight"
  "kNone"
  "kPostTransitConnectionDestination"
  "kRampLeft"
  "kRampRight"
  "kRampStraight"
  "kRight"
  "kRoundaboutEnter"
  "kRoundaboutExit"
  "kSharpLeft"
  "kSharpRight"
  "kSlightLeft"
  "kSlightRight"
  "kStart"
  "kStartLeft"
  "kStartRight"
  "kStayLeft"
  "kStayRight"
  "kStayStraight"
  "kTransit"
  "kTransitConnectionDestination"
  "kTransitConnectionStart"
  "kTransitConnectionTransfer"
  "kTransitRemainOn"
  "kTransitTransfer"
  "kUturnLeft"
  "kUturnRight";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_Maneuver_Type_entries[] = {
  { {DirectionsLeg_Maneuver_Type_names + 0, 8}, 7 },
  { {DirectionsLeg_Maneuver_Type_names + 8, 9}, 8 },
  { {DirectionsLeg_Maneuver_Type_names + 17, 12}, 4 },
  { {DirectionsLeg_Maneuver_Type_names + 29, 16}, 6 },
  { {DirectionsLeg_Maneuver_Type_names + 45, 17}, 5 },
  { {DirectionsLeg_Maneuver_Type_names + 62, 9}, 21 },
  { {DirectionsLeg_Maneuver_Type_names + 71, 10}, 20 },
  { {DirectionsLeg_Maneuver_Type_names + 81, 11}, 28 },
  { {DirectionsLeg_Maneuver_Type_names + 92, 10}, 29 },
  { {DirectionsLeg_Maneuver_Type_names + 102, 5}, 15 },
  { {DirectionsLeg_Maneuver_Type_names + 107, 6}, 25 },
  { {DirectionsLeg_Maneuver_Type_names + 113, 10}, 38 },
  { {DirectionsLeg_Maneuver_Type_names + 123, 11}, 37 },
  { {DirectionsLeg_Maneuver_Type_names + 134, 5}, 0 },
  { {DirectionsLeg_Maneuver_Type_names + 139, 33}, 36 },
  { {DirectionsLeg_Maneuver_Type_names + 172, 9}, 19 },
  { {DirectionsLeg_Maneuver_Type_names + 181, 10}, 18 },
  { {DirectionsLeg_Maneuver_Type_names + 191, 13}, 17 },
  { {DirectionsLeg_Maneuver_Type_names + 204, 6}, 10 },
  { {DirectionsLeg_Maneuver_Type_names + 210, 16}, 26 },
  { {DirectionsLeg_Maneuver_Type_names + 226, 15}, 27 },
  { {DirectionsLeg_Maneuver_Type_names + 241, 10}, 14 },
  { {DirectionsLeg_Maneuver_Type_names + 251, 11}, 11 },
  { {DirectionsLeg_Maneuver_Type_names + 262, 11}, 16 },
  { {DirectionsLeg_Maneuver_Type_names + 273, 12}, 9 },
  { {DirectionsLeg_Maneuver_Type_names + 285, 6}, 1 },
  { {DirectionsLeg_Maneuver_Type_names + 291, 10}, 3 },
  { {DirectionsLeg_Maneuver_Type_names + 301, 11}, 2 },
  { {DirectionsLeg_Maneuver_Type_names + 312, 9}, 24 },
  { {DirectionsLeg_Maneuver_Type_names + 321, 10}, 23 },
  { {DirectionsLeg_Maneuver_Type_names + 331, 13}, 22 },
  { {DirectionsLeg_Maneuver_Type_names + 344, 8}, 30 },
  { {DirectionsLeg_Maneuver_Type_names + 352, 29}, 35 },
  { {DirectionsLeg_Maneuver_Type_names + 381, 23}, 33 },
  { {DirectionsLeg_Maneuver_Type_names + 404, 26}, 34 },
  { {DirectionsLeg_Maneuver_Type_names + 430, 16}, 32 },
  { {DirectionsLeg_Maneuver_Type_names + 446, 16}, 31 },
  { {DirectionsLeg_Maneuver_Type_names + 462, 10}, 13 },
  { {DirectionsLeg_Maneuver_Type_names + 472, 11}, 12 },
};

static const int DirectionsLeg_Maneuver_Type_entries_by_number[] = {
  13, // 0 -> kNone
  25, // 1 -> kStart
  27, // 2 -> kStartRight
  26, // 3 -> kStartLeft
  2, // 4 -> kDestination
  4, // 5 -> kDestinationRight
  3, // 6 -> kDestinationLeft
  0, // 7 -> kBecomes
  1, // 8 -> kContinue
  24, // 9 -> kSlightRight
  18, // 10 -> kRight
  22, // 11 -> kSharpRight
  38, // 12 -> kUturnRight
  37, // 13 -> kUturnLeft
  21, // 14 -> kSharpLeft
  9, // 15 -> kLeft
  23, // 16 -> kSlightLeft
  17, // 17 -> kRampStraight
  16, // 18 -> kRampRight
  15, // 19 -> kRampLeft
  6, // 20 -> kExitRight
  5, // 21 -> kExitLeft
  30, // 22 -> kStayStraight
  29, // 23 -> kStayRight
  28, // 24 -> kStayLeft
  10, // 25 -> kMerge
  19, // 26 -> kRoundaboutEnter
  20, // 27 -> kRoundaboutExit
  7, // 28 -> kFerryEnter
  8, // 29 -> kFerryExit
  31, // 30 -> kTransit
  36, // 31 -> kTransitTransfer
  35, // 32 -> kTransitRemainOn
  33, // 33 -> kTransitConnectionStart
  34, // 34 -> kTransitConnectionTransfer
  32, // 35 -> kTransitConnectionDestination
  14, // 36 -> kPostTransitConnectionDestination
  12, // 37 -> kMergeRight
  11, // 38 -> kMergeLeft
};

const std::string& DirectionsLeg_Maneuver_Type_Name(
    DirectionsLeg_Maneuver_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_Maneuver_Type_entries,
          DirectionsLeg_Maneuver_Type_entries_by_number,
          39, DirectionsLeg_Maneuver_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_Maneuver_Type_entries,
      DirectionsLeg_Maneuver_Type_entries_by_number,
      39, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_Maneuver_Type_strings[idx].get();
}
bool DirectionsLeg_Maneuver_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_Maneuver_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_Maneuver_Type_entries, 39, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_Maneuver_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kNone;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStart;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStartRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStartLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kDestination;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kDestinationRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kDestinationLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kBecomes;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kContinue;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSlightRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSharpRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kUturnRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kUturnLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSharpLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSlightLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRampStraight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRampRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRampLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kExitRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kExitLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStayStraight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStayRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStayLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kMerge;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRoundaboutEnter;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRoundaboutExit;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kFerryEnter;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kFerryExit;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransit;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitTransfer;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitRemainOn;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitConnectionStart;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitConnectionTransfer;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitConnectionDestination;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kPostTransitConnectionDestination;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kMergeRight;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kMergeLeft;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::Type_MIN;
constexpr DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::Type_MAX;
constexpr int DirectionsLeg_Maneuver::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DirectionsLeg_Maneuver_BssManeuverType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_Maneuver_BssManeuverType_strings[3] = {};

static const char DirectionsLeg_Maneuver_BssManeuverType_names[] =
  "kNoneAction"
  "kRentBikeAtBikeShare"
  "kReturnBikeAtBikeShare";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_Maneuver_BssManeuverType_entries[] = {
  { {DirectionsLeg_Maneuver_BssManeuverType_names + 0, 11}, 1 },
  { {DirectionsLeg_Maneuver_BssManeuverType_names + 11, 20}, 2 },
  { {DirectionsLeg_Maneuver_BssManeuverType_names + 31, 22}, 3 },
};

static const int DirectionsLeg_Maneuver_BssManeuverType_entries_by_number[] = {
  0, // 1 -> kNoneAction
  1, // 2 -> kRentBikeAtBikeShare
  2, // 3 -> kReturnBikeAtBikeShare
};

const std::string& DirectionsLeg_Maneuver_BssManeuverType_Name(
    DirectionsLeg_Maneuver_BssManeuverType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_Maneuver_BssManeuverType_entries,
          DirectionsLeg_Maneuver_BssManeuverType_entries_by_number,
          3, DirectionsLeg_Maneuver_BssManeuverType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_Maneuver_BssManeuverType_entries,
      DirectionsLeg_Maneuver_BssManeuverType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_Maneuver_BssManeuverType_strings[idx].get();
}
bool DirectionsLeg_Maneuver_BssManeuverType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_Maneuver_BssManeuverType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_Maneuver_BssManeuverType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_Maneuver_BssManeuverType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::kNoneAction;
constexpr DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::kRentBikeAtBikeShare;
constexpr DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::kReturnBikeAtBikeShare;
constexpr DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::BssManeuverType_MIN;
constexpr DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::BssManeuverType_MAX;
constexpr int DirectionsLeg_Maneuver::BssManeuverType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DirectionsLeg_TravelMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_TravelMode_strings[4] = {};

static const char DirectionsLeg_TravelMode_names[] =
  "kBicycle"
  "kDrive"
  "kPedestrian"
  "kTransit";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_TravelMode_entries[] = {
  { {DirectionsLeg_TravelMode_names + 0, 8}, 2 },
  { {DirectionsLeg_TravelMode_names + 8, 6}, 0 },
  { {DirectionsLeg_TravelMode_names + 14, 11}, 1 },
  { {DirectionsLeg_TravelMode_names + 25, 8}, 3 },
};

static const int DirectionsLeg_TravelMode_entries_by_number[] = {
  1, // 0 -> kDrive
  2, // 1 -> kPedestrian
  0, // 2 -> kBicycle
  3, // 3 -> kTransit
};

const std::string& DirectionsLeg_TravelMode_Name(
    DirectionsLeg_TravelMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_TravelMode_entries,
          DirectionsLeg_TravelMode_entries_by_number,
          4, DirectionsLeg_TravelMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_TravelMode_entries,
      DirectionsLeg_TravelMode_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_TravelMode_strings[idx].get();
}
bool DirectionsLeg_TravelMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_TravelMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_TravelMode_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_TravelMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DirectionsLeg_TravelMode DirectionsLeg::kDrive;
constexpr DirectionsLeg_TravelMode DirectionsLeg::kPedestrian;
constexpr DirectionsLeg_TravelMode DirectionsLeg::kBicycle;
constexpr DirectionsLeg_TravelMode DirectionsLeg::kTransit;
constexpr DirectionsLeg_TravelMode DirectionsLeg::TravelMode_MIN;
constexpr DirectionsLeg_TravelMode DirectionsLeg::TravelMode_MAX;
constexpr int DirectionsLeg::TravelMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DirectionsLeg_VehicleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_VehicleType_strings[5] = {};

static const char DirectionsLeg_VehicleType_names[] =
  "kAutoBus"
  "kCar"
  "kMotorScooter"
  "kMotorcycle"
  "kTractorTrailer";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_VehicleType_entries[] = {
  { {DirectionsLeg_VehicleType_names + 0, 8}, 2 },
  { {DirectionsLeg_VehicleType_names + 8, 4}, 0 },
  { {DirectionsLeg_VehicleType_names + 12, 13}, 4 },
  { {DirectionsLeg_VehicleType_names + 25, 11}, 1 },
  { {DirectionsLeg_VehicleType_names + 36, 15}, 3 },
};

static const int DirectionsLeg_VehicleType_entries_by_number[] = {
  1, // 0 -> kCar
  3, // 1 -> kMotorcycle
  0, // 2 -> kAutoBus
  4, // 3 -> kTractorTrailer
  2, // 4 -> kMotorScooter
};

const std::string& DirectionsLeg_VehicleType_Name(
    DirectionsLeg_VehicleType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_VehicleType_entries,
          DirectionsLeg_VehicleType_entries_by_number,
          5, DirectionsLeg_VehicleType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_VehicleType_entries,
      DirectionsLeg_VehicleType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_VehicleType_strings[idx].get();
}
bool DirectionsLeg_VehicleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_VehicleType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_VehicleType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_VehicleType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DirectionsLeg_VehicleType DirectionsLeg::kCar;
constexpr DirectionsLeg_VehicleType DirectionsLeg::kMotorcycle;
constexpr DirectionsLeg_VehicleType DirectionsLeg::kAutoBus;
constexpr DirectionsLeg_VehicleType DirectionsLeg::kTractorTrailer;
constexpr DirectionsLeg_VehicleType DirectionsLeg::kMotorScooter;
constexpr DirectionsLeg_VehicleType DirectionsLeg::VehicleType_MIN;
constexpr DirectionsLeg_VehicleType DirectionsLeg::VehicleType_MAX;
constexpr int DirectionsLeg::VehicleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DirectionsLeg_PedestrianType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_PedestrianType_strings[3] = {};

static const char DirectionsLeg_PedestrianType_names[] =
  "kFoot"
  "kSegway"
  "kWheelchair";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_PedestrianType_entries[] = {
  { {DirectionsLeg_PedestrianType_names + 0, 5}, 0 },
  { {DirectionsLeg_PedestrianType_names + 5, 7}, 2 },
  { {DirectionsLeg_PedestrianType_names + 12, 11}, 1 },
};

static const int DirectionsLeg_PedestrianType_entries_by_number[] = {
  0, // 0 -> kFoot
  2, // 1 -> kWheelchair
  1, // 2 -> kSegway
};

const std::string& DirectionsLeg_PedestrianType_Name(
    DirectionsLeg_PedestrianType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_PedestrianType_entries,
          DirectionsLeg_PedestrianType_entries_by_number,
          3, DirectionsLeg_PedestrianType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_PedestrianType_entries,
      DirectionsLeg_PedestrianType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_PedestrianType_strings[idx].get();
}
bool DirectionsLeg_PedestrianType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_PedestrianType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_PedestrianType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_PedestrianType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DirectionsLeg_PedestrianType DirectionsLeg::kFoot;
constexpr DirectionsLeg_PedestrianType DirectionsLeg::kWheelchair;
constexpr DirectionsLeg_PedestrianType DirectionsLeg::kSegway;
constexpr DirectionsLeg_PedestrianType DirectionsLeg::PedestrianType_MIN;
constexpr DirectionsLeg_PedestrianType DirectionsLeg::PedestrianType_MAX;
constexpr int DirectionsLeg::PedestrianType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DirectionsLeg_BicycleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_BicycleType_strings[4] = {};

static const char DirectionsLeg_BicycleType_names[] =
  "kCross"
  "kHybrid"
  "kMountain"
  "kRoad";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_BicycleType_entries[] = {
  { {DirectionsLeg_BicycleType_names + 0, 6}, 1 },
  { {DirectionsLeg_BicycleType_names + 6, 7}, 2 },
  { {DirectionsLeg_BicycleType_names + 13, 9}, 3 },
  { {DirectionsLeg_BicycleType_names + 22, 5}, 0 },
};

static const int DirectionsLeg_BicycleType_entries_by_number[] = {
  3, // 0 -> kRoad
  0, // 1 -> kCross
  1, // 2 -> kHybrid
  2, // 3 -> kMountain
};

const std::string& DirectionsLeg_BicycleType_Name(
    DirectionsLeg_BicycleType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_BicycleType_entries,
          DirectionsLeg_BicycleType_entries_by_number,
          4, DirectionsLeg_BicycleType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_BicycleType_entries,
      DirectionsLeg_BicycleType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_BicycleType_strings[idx].get();
}
bool DirectionsLeg_BicycleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_BicycleType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_BicycleType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_BicycleType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DirectionsLeg_BicycleType DirectionsLeg::kRoad;
constexpr DirectionsLeg_BicycleType DirectionsLeg::kCross;
constexpr DirectionsLeg_BicycleType DirectionsLeg::kHybrid;
constexpr DirectionsLeg_BicycleType DirectionsLeg::kMountain;
constexpr DirectionsLeg_BicycleType DirectionsLeg::BicycleType_MIN;
constexpr DirectionsLeg_BicycleType DirectionsLeg::BicycleType_MAX;
constexpr int DirectionsLeg::BicycleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DirectionsLeg_TransitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DirectionsLeg_TransitType_strings[8] = {};

static const char DirectionsLeg_TransitType_names[] =
  "kBus"
  "kCableCar"
  "kFerry"
  "kFunicular"
  "kGondola"
  "kMetro"
  "kRail"
  "kTram";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DirectionsLeg_TransitType_entries[] = {
  { {DirectionsLeg_TransitType_names + 0, 4}, 3 },
  { {DirectionsLeg_TransitType_names + 4, 9}, 5 },
  { {DirectionsLeg_TransitType_names + 13, 6}, 4 },
  { {DirectionsLeg_TransitType_names + 19, 10}, 7 },
  { {DirectionsLeg_TransitType_names + 29, 8}, 6 },
  { {DirectionsLeg_TransitType_names + 37, 6}, 1 },
  { {DirectionsLeg_TransitType_names + 43, 5}, 2 },
  { {DirectionsLeg_TransitType_names + 48, 5}, 0 },
};

static const int DirectionsLeg_TransitType_entries_by_number[] = {
  7, // 0 -> kTram
  5, // 1 -> kMetro
  6, // 2 -> kRail
  0, // 3 -> kBus
  2, // 4 -> kFerry
  1, // 5 -> kCableCar
  4, // 6 -> kGondola
  3, // 7 -> kFunicular
};

const std::string& DirectionsLeg_TransitType_Name(
    DirectionsLeg_TransitType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DirectionsLeg_TransitType_entries,
          DirectionsLeg_TransitType_entries_by_number,
          8, DirectionsLeg_TransitType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DirectionsLeg_TransitType_entries,
      DirectionsLeg_TransitType_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DirectionsLeg_TransitType_strings[idx].get();
}
bool DirectionsLeg_TransitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DirectionsLeg_TransitType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DirectionsLeg_TransitType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<DirectionsLeg_TransitType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DirectionsLeg_TransitType DirectionsLeg::kTram;
constexpr DirectionsLeg_TransitType DirectionsLeg::kMetro;
constexpr DirectionsLeg_TransitType DirectionsLeg::kRail;
constexpr DirectionsLeg_TransitType DirectionsLeg::kBus;
constexpr DirectionsLeg_TransitType DirectionsLeg::kFerry;
constexpr DirectionsLeg_TransitType DirectionsLeg::kCableCar;
constexpr DirectionsLeg_TransitType DirectionsLeg::kGondola;
constexpr DirectionsLeg_TransitType DirectionsLeg::kFunicular;
constexpr DirectionsLeg_TransitType DirectionsLeg::TransitType_MIN;
constexpr DirectionsLeg_TransitType DirectionsLeg::TransitType_MAX;
constexpr int DirectionsLeg::TransitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class DirectionsLeg_Summary::_Internal {
 public:
  using HasBits = decltype(std::declval<DirectionsLeg_Summary>()._has_bits_);
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::valhalla::BoundingBox& bbox(const DirectionsLeg_Summary* msg);
  static void set_has_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_time_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::valhalla::BoundingBox&
DirectionsLeg_Summary::_Internal::bbox(const DirectionsLeg_Summary* msg) {
  return *msg->bbox_;
}
void DirectionsLeg_Summary::clear_bbox() {
  if (bbox_ != nullptr) bbox_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DirectionsLeg_Summary::DirectionsLeg_Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsLeg.Summary)
}
DirectionsLeg_Summary::DirectionsLeg_Summary(const DirectionsLeg_Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_bbox()) {
    bbox_ = new ::valhalla::BoundingBox(*from.bbox_);
  } else {
    bbox_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_time_restrictions_) -
    reinterpret_cast<char*>(&time_)) + sizeof(has_time_restrictions_));
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.Summary)
}

void DirectionsLeg_Summary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bbox_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_time_restrictions_) -
    reinterpret_cast<char*>(&bbox_)) + sizeof(has_time_restrictions_));
}

DirectionsLeg_Summary::~DirectionsLeg_Summary() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.Summary)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DirectionsLeg_Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bbox_;
}

void DirectionsLeg_Summary::ArenaDtor(void* object) {
  DirectionsLeg_Summary* _this = reinterpret_cast< DirectionsLeg_Summary* >(object);
  (void)_this;
}
void DirectionsLeg_Summary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsLeg_Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsLeg_Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(bbox_ != nullptr);
    bbox_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_time_restrictions_) -
        reinterpret_cast<char*>(&time_)) + sizeof(has_time_restrictions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsLeg_Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .valhalla.BoundingBox bbox = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_time_restrictions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_has_time_restrictions(&has_bits);
          has_time_restrictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionsLeg_Summary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsLeg.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float length = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_length(), target);
  }

  // optional double time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_time(), target);
  }

  // optional .valhalla.BoundingBox bbox = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bbox(this), target, stream);
  }

  // optional bool has_time_restrictions = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_time_restrictions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsLeg.Summary)
  return target;
}

size_t DirectionsLeg_Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.Summary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .valhalla.BoundingBox bbox = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bbox_);
    }

    // optional double time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional float length = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool has_time_restrictions = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsLeg_Summary::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsLeg_Summary*>(
      &from));
}

void DirectionsLeg_Summary::MergeFrom(const DirectionsLeg_Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bbox()->::valhalla::BoundingBox::MergeFrom(from._internal_bbox());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_time_restrictions_ = from.has_time_restrictions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DirectionsLeg_Summary::CopyFrom(const DirectionsLeg_Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_Summary::IsInitialized() const {
  return true;
}

void DirectionsLeg_Summary::InternalSwap(DirectionsLeg_Summary* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionsLeg_Summary, has_time_restrictions_)
      + sizeof(DirectionsLeg_Summary::has_time_restrictions_)
      - PROTOBUF_FIELD_OFFSET(DirectionsLeg_Summary, bbox_)>(
          reinterpret_cast<char*>(&bbox_),
          reinterpret_cast<char*>(&other->bbox_));
}

std::string DirectionsLeg_Summary::GetTypeName() const {
  return "valhalla.DirectionsLeg.Summary";
}


// ===================================================================

class DirectionsLeg_TransitInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DirectionsLeg_TransitInfo>()._has_bits_);
  static void set_has_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_short_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_long_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_headsign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_operator_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_operator_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_operator_url(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

void DirectionsLeg_TransitInfo::clear_transit_stops() {
  transit_stops_.Clear();
}
DirectionsLeg_TransitInfo::DirectionsLeg_TransitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  transit_stops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsLeg.TransitInfo)
}
DirectionsLeg_TransitInfo::DirectionsLeg_TransitInfo(const DirectionsLeg_TransitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      transit_stops_(from.transit_stops_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_onestop_id()) {
    onestop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_onestop_id(), 
      GetArena());
  }
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_short_name()) {
    short_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_short_name(), 
      GetArena());
  }
  long_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_long_name()) {
    long_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_long_name(), 
      GetArena());
  }
  headsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_headsign()) {
    headsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headsign(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  operator_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_operator_onestop_id()) {
    operator_onestop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operator_onestop_id(), 
      GetArena());
  }
  operator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_operator_name()) {
    operator_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operator_name(), 
      GetArena());
  }
  operator_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_operator_url()) {
    operator_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operator_url(), 
      GetArena());
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&text_color_) -
    reinterpret_cast<char*>(&color_)) + sizeof(text_color_));
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.TransitInfo)
}

void DirectionsLeg_TransitInfo::SharedCtor() {
onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
long_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
headsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operator_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operator_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_color_) -
    reinterpret_cast<char*>(&color_)) + sizeof(text_color_));
}

DirectionsLeg_TransitInfo::~DirectionsLeg_TransitInfo() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.TransitInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DirectionsLeg_TransitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectionsLeg_TransitInfo::ArenaDtor(void* object) {
  DirectionsLeg_TransitInfo* _this = reinterpret_cast< DirectionsLeg_TransitInfo* >(object);
  (void)_this;
}
void DirectionsLeg_TransitInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsLeg_TransitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsLeg_TransitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.TransitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transit_stops_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      short_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      long_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      headsign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      operator_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      operator_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      operator_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&text_color_) -
        reinterpret_cast<char*>(&color_)) + sizeof(text_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsLeg_TransitInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string onestop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string short_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_short_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string long_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_long_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string headsign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_headsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 text_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_text_color(&has_bits);
          text_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string operator_onestop_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_operator_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string operator_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_operator_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string operator_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_operator_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.TransitPlatformInfo transit_stops = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transit_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionsLeg_TransitInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsLeg.TransitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string onestop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_onestop_id(), target);
  }

  // optional string short_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_short_name(), target);
  }

  // optional string long_name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_long_name(), target);
  }

  // optional string headsign = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_headsign(), target);
  }

  // optional uint32 color = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_color(), target);
  }

  // optional uint32 text_color = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_text_color(), target);
  }

  // optional string description = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_description(), target);
  }

  // optional string operator_onestop_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_operator_onestop_id(), target);
  }

  // optional string operator_name = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_operator_name(), target);
  }

  // optional string operator_url = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_operator_url(), target);
  }

  // repeated .valhalla.TransitPlatformInfo transit_stops = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transit_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_transit_stops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsLeg.TransitInfo)
  return target;
}

size_t DirectionsLeg_TransitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.TransitInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.TransitPlatformInfo transit_stops = 11;
  total_size += 1UL * this->_internal_transit_stops_size();
  for (const auto& msg : this->transit_stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string onestop_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_onestop_id());
    }

    // optional string short_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_name());
    }

    // optional string long_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_long_name());
    }

    // optional string headsign = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_headsign());
    }

    // optional string description = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string operator_onestop_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_operator_onestop_id());
    }

    // optional string operator_name = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_operator_name());
    }

    // optional string operator_url = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_operator_url());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 color = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_color());
    }

    // optional uint32 text_color = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_text_color());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsLeg_TransitInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsLeg_TransitInfo*>(
      &from));
}

void DirectionsLeg_TransitInfo::MergeFrom(const DirectionsLeg_TransitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.TransitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transit_stops_.MergeFrom(from.transit_stops_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_onestop_id(from._internal_onestop_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_short_name(from._internal_short_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_long_name(from._internal_long_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_headsign(from._internal_headsign());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_operator_onestop_id(from._internal_operator_onestop_id());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_operator_name(from._internal_operator_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_operator_url(from._internal_operator_url());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000200u) {
      text_color_ = from.text_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DirectionsLeg_TransitInfo::CopyFrom(const DirectionsLeg_TransitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.TransitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_TransitInfo::IsInitialized() const {
  return true;
}

void DirectionsLeg_TransitInfo::InternalSwap(DirectionsLeg_TransitInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transit_stops_.InternalSwap(&other->transit_stops_);
  onestop_id_.Swap(&other->onestop_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  short_name_.Swap(&other->short_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  long_name_.Swap(&other->long_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headsign_.Swap(&other->headsign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_onestop_id_.Swap(&other->operator_onestop_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_name_.Swap(&other->operator_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_url_.Swap(&other->operator_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionsLeg_TransitInfo, text_color_)
      + sizeof(DirectionsLeg_TransitInfo::text_color_)
      - PROTOBUF_FIELD_OFFSET(DirectionsLeg_TransitInfo, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

std::string DirectionsLeg_TransitInfo::GetTypeName() const {
  return "valhalla.DirectionsLeg.TransitInfo";
}


// ===================================================================

class DirectionsLeg_GuidanceView::_Internal {
 public:
  using HasBits = decltype(std::declval<DirectionsLeg_GuidanceView>()._has_bits_);
  static void set_has_data_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_base_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DirectionsLeg_GuidanceView::DirectionsLeg_GuidanceView(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  overlay_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsLeg.GuidanceView)
}
DirectionsLeg_GuidanceView::DirectionsLeg_GuidanceView(const DirectionsLeg_GuidanceView& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      overlay_ids_(from.overlay_ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  data_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data_id()) {
    data_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_id(), 
      GetArena());
  }
  base_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_base_id()) {
    base_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base_id(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.GuidanceView)
}

void DirectionsLeg_GuidanceView::SharedCtor() {
data_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
base_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

DirectionsLeg_GuidanceView::~DirectionsLeg_GuidanceView() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.GuidanceView)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DirectionsLeg_GuidanceView::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectionsLeg_GuidanceView::ArenaDtor(void* object) {
  DirectionsLeg_GuidanceView* _this = reinterpret_cast< DirectionsLeg_GuidanceView* >(object);
  (void)_this;
}
void DirectionsLeg_GuidanceView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsLeg_GuidanceView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsLeg_GuidanceView::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.GuidanceView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlay_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      base_id_.ClearNonDefaultToEmpty();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsLeg_GuidanceView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string data_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .valhalla.DirectionsLeg.GuidanceView.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::valhalla::DirectionsLeg_GuidanceView_Type_IsValid(val))) {
            _internal_set_type(static_cast<::valhalla::DirectionsLeg_GuidanceView_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string base_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_base_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string overlay_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_overlay_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionsLeg_GuidanceView::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsLeg.GuidanceView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string data_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data_id(), target);
  }

  // optional .valhalla.DirectionsLeg.GuidanceView.Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional string base_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_base_id(), target);
  }

  // repeated string overlay_ids = 4;
  for (int i = 0, n = this->_internal_overlay_ids_size(); i < n; i++) {
    const auto& s = this->_internal_overlay_ids(i);
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsLeg.GuidanceView)
  return target;
}

size_t DirectionsLeg_GuidanceView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.GuidanceView)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string overlay_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(overlay_ids_.size());
  for (int i = 0, n = overlay_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      overlay_ids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string data_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data_id());
    }

    // optional string base_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_base_id());
    }

    // optional .valhalla.DirectionsLeg.GuidanceView.Type type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsLeg_GuidanceView::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsLeg_GuidanceView*>(
      &from));
}

void DirectionsLeg_GuidanceView::MergeFrom(const DirectionsLeg_GuidanceView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.GuidanceView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlay_ids_.MergeFrom(from.overlay_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data_id(from._internal_data_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_base_id(from._internal_base_id());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DirectionsLeg_GuidanceView::CopyFrom(const DirectionsLeg_GuidanceView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.GuidanceView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_GuidanceView::IsInitialized() const {
  return true;
}

void DirectionsLeg_GuidanceView::InternalSwap(DirectionsLeg_GuidanceView* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  overlay_ids_.InternalSwap(&other->overlay_ids_);
  data_id_.Swap(&other->data_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_id_.Swap(&other->base_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

std::string DirectionsLeg_GuidanceView::GetTypeName() const {
  return "valhalla.DirectionsLeg.GuidanceView";
}


// ===================================================================

class DirectionsLeg_Maneuver_SignElement::_Internal {
 public:
  using HasBits = decltype(std::declval<DirectionsLeg_Maneuver_SignElement>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_route_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_consecutive_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DirectionsLeg_Maneuver_SignElement::DirectionsLeg_Maneuver_SignElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsLeg.Maneuver.SignElement)
}
DirectionsLeg_Maneuver_SignElement::DirectionsLeg_Maneuver_SignElement(const DirectionsLeg_Maneuver_SignElement& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  ::memcpy(&is_route_number_, &from.is_route_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&consecutive_count_) -
    reinterpret_cast<char*>(&is_route_number_)) + sizeof(consecutive_count_));
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.Maneuver.SignElement)
}

void DirectionsLeg_Maneuver_SignElement::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_route_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&consecutive_count_) -
    reinterpret_cast<char*>(&is_route_number_)) + sizeof(consecutive_count_));
}

DirectionsLeg_Maneuver_SignElement::~DirectionsLeg_Maneuver_SignElement() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.Maneuver.SignElement)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DirectionsLeg_Maneuver_SignElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectionsLeg_Maneuver_SignElement::ArenaDtor(void* object) {
  DirectionsLeg_Maneuver_SignElement* _this = reinterpret_cast< DirectionsLeg_Maneuver_SignElement* >(object);
  (void)_this;
}
void DirectionsLeg_Maneuver_SignElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsLeg_Maneuver_SignElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsLeg_Maneuver_SignElement::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.Maneuver.SignElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&is_route_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&consecutive_count_) -
        reinterpret_cast<char*>(&is_route_number_)) + sizeof(consecutive_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsLeg_Maneuver_SignElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_route_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_route_number(&has_bits);
          is_route_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 consecutive_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_consecutive_count(&has_bits);
          consecutive_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionsLeg_Maneuver_SignElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsLeg.Maneuver.SignElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional bool is_route_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_route_number(), target);
  }

  // optional uint32 consecutive_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_consecutive_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsLeg.Maneuver.SignElement)
  return target;
}

size_t DirectionsLeg_Maneuver_SignElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.Maneuver.SignElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional bool is_route_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 consecutive_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_consecutive_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsLeg_Maneuver_SignElement::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsLeg_Maneuver_SignElement*>(
      &from));
}

void DirectionsLeg_Maneuver_SignElement::MergeFrom(const DirectionsLeg_Maneuver_SignElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.Maneuver.SignElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      is_route_number_ = from.is_route_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      consecutive_count_ = from.consecutive_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DirectionsLeg_Maneuver_SignElement::CopyFrom(const DirectionsLeg_Maneuver_SignElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.Maneuver.SignElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_Maneuver_SignElement::IsInitialized() const {
  return true;
}

void DirectionsLeg_Maneuver_SignElement::InternalSwap(DirectionsLeg_Maneuver_SignElement* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionsLeg_Maneuver_SignElement, consecutive_count_)
      + sizeof(DirectionsLeg_Maneuver_SignElement::consecutive_count_)
      - PROTOBUF_FIELD_OFFSET(DirectionsLeg_Maneuver_SignElement, is_route_number_)>(
          reinterpret_cast<char*>(&is_route_number_),
          reinterpret_cast<char*>(&other->is_route_number_));
}

std::string DirectionsLeg_Maneuver_SignElement::GetTypeName() const {
  return "valhalla.DirectionsLeg.Maneuver.SignElement";
}


// ===================================================================

class DirectionsLeg_Maneuver_Sign::_Internal {
 public:
};

DirectionsLeg_Maneuver_Sign::DirectionsLeg_Maneuver_Sign(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  exit_numbers_(arena),
  exit_onto_streets_(arena),
  exit_toward_locations_(arena),
  exit_names_(arena),
  guide_onto_streets_(arena),
  guide_toward_locations_(arena),
  junction_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsLeg.Maneuver.Sign)
}
DirectionsLeg_Maneuver_Sign::DirectionsLeg_Maneuver_Sign(const DirectionsLeg_Maneuver_Sign& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      exit_numbers_(from.exit_numbers_),
      exit_onto_streets_(from.exit_onto_streets_),
      exit_toward_locations_(from.exit_toward_locations_),
      exit_names_(from.exit_names_),
      guide_onto_streets_(from.guide_onto_streets_),
      guide_toward_locations_(from.guide_toward_locations_),
      junction_names_(from.junction_names_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.Maneuver.Sign)
}

void DirectionsLeg_Maneuver_Sign::SharedCtor() {
}

DirectionsLeg_Maneuver_Sign::~DirectionsLeg_Maneuver_Sign() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.Maneuver.Sign)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DirectionsLeg_Maneuver_Sign::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DirectionsLeg_Maneuver_Sign::ArenaDtor(void* object) {
  DirectionsLeg_Maneuver_Sign* _this = reinterpret_cast< DirectionsLeg_Maneuver_Sign* >(object);
  (void)_this;
}
void DirectionsLeg_Maneuver_Sign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsLeg_Maneuver_Sign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsLeg_Maneuver_Sign::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.Maneuver.Sign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exit_numbers_.Clear();
  exit_onto_streets_.Clear();
  exit_toward_locations_.Clear();
  exit_names_.Clear();
  guide_onto_streets_.Clear();
  guide_toward_locations_.Clear();
  junction_names_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsLeg_Maneuver_Sign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_numbers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exit_numbers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_onto_streets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exit_onto_streets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_toward_locations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exit_toward_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exit_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.DirectionsLeg.Maneuver.SignElement guide_onto_streets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guide_onto_streets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.DirectionsLeg.Maneuver.SignElement guide_toward_locations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guide_toward_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.DirectionsLeg.Maneuver.SignElement junction_names = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_junction_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionsLeg_Maneuver_Sign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsLeg.Maneuver.Sign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_numbers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exit_numbers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_exit_numbers(i), target, stream);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_onto_streets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exit_onto_streets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_exit_onto_streets(i), target, stream);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_toward_locations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exit_toward_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_exit_toward_locations(i), target, stream);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_names = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exit_names_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_exit_names(i), target, stream);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement guide_onto_streets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_guide_onto_streets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_guide_onto_streets(i), target, stream);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement guide_toward_locations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_guide_toward_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_guide_toward_locations(i), target, stream);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement junction_names = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_junction_names_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_junction_names(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsLeg.Maneuver.Sign)
  return target;
}

size_t DirectionsLeg_Maneuver_Sign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.Maneuver.Sign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_numbers = 1;
  total_size += 1UL * this->_internal_exit_numbers_size();
  for (const auto& msg : this->exit_numbers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_onto_streets = 2;
  total_size += 1UL * this->_internal_exit_onto_streets_size();
  for (const auto& msg : this->exit_onto_streets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_toward_locations = 3;
  total_size += 1UL * this->_internal_exit_toward_locations_size();
  for (const auto& msg : this->exit_toward_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement exit_names = 4;
  total_size += 1UL * this->_internal_exit_names_size();
  for (const auto& msg : this->exit_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement guide_onto_streets = 5;
  total_size += 1UL * this->_internal_guide_onto_streets_size();
  for (const auto& msg : this->guide_onto_streets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement guide_toward_locations = 6;
  total_size += 1UL * this->_internal_guide_toward_locations_size();
  for (const auto& msg : this->guide_toward_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver.SignElement junction_names = 7;
  total_size += 1UL * this->_internal_junction_names_size();
  for (const auto& msg : this->junction_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsLeg_Maneuver_Sign::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsLeg_Maneuver_Sign*>(
      &from));
}

void DirectionsLeg_Maneuver_Sign::MergeFrom(const DirectionsLeg_Maneuver_Sign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.Maneuver.Sign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exit_numbers_.MergeFrom(from.exit_numbers_);
  exit_onto_streets_.MergeFrom(from.exit_onto_streets_);
  exit_toward_locations_.MergeFrom(from.exit_toward_locations_);
  exit_names_.MergeFrom(from.exit_names_);
  guide_onto_streets_.MergeFrom(from.guide_onto_streets_);
  guide_toward_locations_.MergeFrom(from.guide_toward_locations_);
  junction_names_.MergeFrom(from.junction_names_);
}

void DirectionsLeg_Maneuver_Sign::CopyFrom(const DirectionsLeg_Maneuver_Sign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.Maneuver.Sign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_Maneuver_Sign::IsInitialized() const {
  return true;
}

void DirectionsLeg_Maneuver_Sign::InternalSwap(DirectionsLeg_Maneuver_Sign* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  exit_numbers_.InternalSwap(&other->exit_numbers_);
  exit_onto_streets_.InternalSwap(&other->exit_onto_streets_);
  exit_toward_locations_.InternalSwap(&other->exit_toward_locations_);
  exit_names_.InternalSwap(&other->exit_names_);
  guide_onto_streets_.InternalSwap(&other->guide_onto_streets_);
  guide_toward_locations_.InternalSwap(&other->guide_toward_locations_);
  junction_names_.InternalSwap(&other->junction_names_);
}

std::string DirectionsLeg_Maneuver_Sign::GetTypeName() const {
  return "valhalla.DirectionsLeg.Maneuver.Sign";
}


// ===================================================================

class DirectionsLeg_Maneuver::_Internal {
 public:
  using HasBits = decltype(std::declval<DirectionsLeg_Maneuver>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_text_instruction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_begin_cardinal_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_begin_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_begin_shape_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_end_shape_index(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_portions_toll(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_portions_unpaved(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_verbal_transition_alert_instruction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_verbal_pre_transition_instruction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_verbal_post_transition_instruction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::valhalla::DirectionsLeg_Maneuver_Sign& sign(const DirectionsLeg_Maneuver* msg);
  static void set_has_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_roundabout_exit_count(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_depart_instruction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_verbal_depart_instruction(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_arrive_instruction(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_verbal_arrive_instruction(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::valhalla::DirectionsLeg_TransitInfo& transit_info(const DirectionsLeg_Maneuver* msg);
  static void set_has_transit_info(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_verbal_multi_cue(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_travel_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_vehicle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_pedestrian_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_bicycle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_transit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_begin_path_index(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_end_path_index(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_to_stay_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_turn_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_has_time_restrictions(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_bss_maneuver_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
};

const ::valhalla::DirectionsLeg_Maneuver_Sign&
DirectionsLeg_Maneuver::_Internal::sign(const DirectionsLeg_Maneuver* msg) {
  return *msg->sign_;
}
const ::valhalla::DirectionsLeg_TransitInfo&
DirectionsLeg_Maneuver::_Internal::transit_info(const DirectionsLeg_Maneuver* msg) {
  return *msg->transit_info_;
}
void DirectionsLeg_Maneuver::clear_street_name() {
  street_name_.Clear();
}
void DirectionsLeg_Maneuver::clear_begin_street_name() {
  begin_street_name_.Clear();
}
void DirectionsLeg_Maneuver::clear_roundabout_exit_street_names() {
  roundabout_exit_street_names_.Clear();
}
DirectionsLeg_Maneuver::DirectionsLeg_Maneuver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  street_name_(arena),
  begin_street_name_(arena),
  roundabout_exit_street_names_(arena),
  guidance_views_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsLeg.Maneuver)
}
DirectionsLeg_Maneuver::DirectionsLeg_Maneuver(const DirectionsLeg_Maneuver& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      street_name_(from.street_name_),
      begin_street_name_(from.begin_street_name_),
      roundabout_exit_street_names_(from.roundabout_exit_street_names_),
      guidance_views_(from.guidance_views_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  text_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text_instruction()) {
    text_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text_instruction(), 
      GetArena());
  }
  verbal_transition_alert_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_verbal_transition_alert_instruction()) {
    verbal_transition_alert_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbal_transition_alert_instruction(), 
      GetArena());
  }
  verbal_pre_transition_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_verbal_pre_transition_instruction()) {
    verbal_pre_transition_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbal_pre_transition_instruction(), 
      GetArena());
  }
  verbal_post_transition_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_verbal_post_transition_instruction()) {
    verbal_post_transition_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbal_post_transition_instruction(), 
      GetArena());
  }
  depart_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_depart_instruction()) {
    depart_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_depart_instruction(), 
      GetArena());
  }
  verbal_depart_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_verbal_depart_instruction()) {
    verbal_depart_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbal_depart_instruction(), 
      GetArena());
  }
  arrive_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_arrive_instruction()) {
    arrive_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_arrive_instruction(), 
      GetArena());
  }
  verbal_arrive_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_verbal_arrive_instruction()) {
    verbal_arrive_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbal_arrive_instruction(), 
      GetArena());
  }
  if (from._internal_has_sign()) {
    sign_ = new ::valhalla::DirectionsLeg_Maneuver_Sign(*from.sign_);
  } else {
    sign_ = nullptr;
  }
  if (from._internal_has_transit_info()) {
    transit_info_ = new ::valhalla::DirectionsLeg_TransitInfo(*from.transit_info_);
  } else {
    transit_info_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bss_maneuver_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bss_maneuver_type_));
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.Maneuver)
}

void DirectionsLeg_Maneuver::SharedCtor() {
text_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
verbal_transition_alert_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
verbal_pre_transition_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
verbal_post_transition_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
depart_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
verbal_depart_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
arrive_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
verbal_arrive_instruction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sign_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_time_restrictions_) -
    reinterpret_cast<char*>(&sign_)) + sizeof(has_time_restrictions_));
bss_maneuver_type_ = 1;
}

DirectionsLeg_Maneuver::~DirectionsLeg_Maneuver() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.Maneuver)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DirectionsLeg_Maneuver::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbal_transition_alert_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbal_pre_transition_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbal_post_transition_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  depart_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbal_depart_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arrive_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbal_arrive_instruction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sign_;
  if (this != internal_default_instance()) delete transit_info_;
}

void DirectionsLeg_Maneuver::ArenaDtor(void* object) {
  DirectionsLeg_Maneuver* _this = reinterpret_cast< DirectionsLeg_Maneuver* >(object);
  (void)_this;
}
void DirectionsLeg_Maneuver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsLeg_Maneuver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsLeg_Maneuver::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.Maneuver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  street_name_.Clear();
  begin_street_name_.Clear();
  roundabout_exit_street_names_.Clear();
  guidance_views_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      text_instruction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      verbal_transition_alert_instruction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      verbal_pre_transition_instruction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      verbal_post_transition_instruction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      depart_instruction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      verbal_depart_instruction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      arrive_instruction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      verbal_arrive_instruction_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(sign_ != nullptr);
      sign_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(transit_info_ != nullptr);
      transit_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&begin_shape_index_) -
        reinterpret_cast<char*>(&type_)) + sizeof(begin_shape_index_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&end_shape_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vehicle_type_) -
        reinterpret_cast<char*>(&end_shape_index_)) + sizeof(vehicle_type_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&pedestrian_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_time_restrictions_) -
        reinterpret_cast<char*>(&pedestrian_type_)) + sizeof(has_time_restrictions_));
    bss_maneuver_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsLeg_Maneuver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .valhalla.DirectionsLeg.Maneuver.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::valhalla::DirectionsLeg_Maneuver_Type_IsValid(val))) {
            _internal_set_type(static_cast<::valhalla::DirectionsLeg_Maneuver_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string text_instruction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.StreetName street_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_street_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .valhalla.DirectionsLeg.Maneuver.CardinalDirection begin_cardinal_direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::valhalla::DirectionsLeg_Maneuver_CardinalDirection_IsValid(val))) {
            _internal_set_begin_cardinal_direction(static_cast<::valhalla::DirectionsLeg_Maneuver_CardinalDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 begin_heading = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_begin_heading(&has_bits);
          begin_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 begin_shape_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_begin_shape_index(&has_bits);
          begin_shape_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_shape_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_end_shape_index(&has_bits);
          end_shape_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool portions_toll = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_portions_toll(&has_bits);
          portions_toll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool portions_unpaved = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_portions_unpaved(&has_bits);
          portions_unpaved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string verbal_transition_alert_instruction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_verbal_transition_alert_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string verbal_pre_transition_instruction = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_verbal_pre_transition_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string verbal_post_transition_instruction = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_verbal_post_transition_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.StreetName begin_street_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_begin_street_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .valhalla.DirectionsLeg.Maneuver.Sign sign = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 roundabout_exit_count = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_roundabout_exit_count(&has_bits);
          roundabout_exit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string depart_instruction = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_depart_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string verbal_depart_instruction = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_verbal_depart_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string arrive_instruction = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_arrive_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string verbal_arrive_instruction = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_verbal_arrive_instruction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .valhalla.DirectionsLeg.TransitInfo transit_info = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_transit_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool verbal_multi_cue = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_verbal_multi_cue(&has_bits);
          verbal_multi_cue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .valhalla.DirectionsLeg.TravelMode travel_mode = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::valhalla::DirectionsLeg_TravelMode_IsValid(val))) {
            _internal_set_travel_mode(static_cast<::valhalla::DirectionsLeg_TravelMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .valhalla.DirectionsLeg.VehicleType vehicle_type = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::valhalla::DirectionsLeg_VehicleType_IsValid(val))) {
            _internal_set_vehicle_type(static_cast<::valhalla::DirectionsLeg_VehicleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .valhalla.DirectionsLeg.PedestrianType pedestrian_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::valhalla::DirectionsLeg_PedestrianType_IsValid(val))) {
            _internal_set_pedestrian_type(static_cast<::valhalla::DirectionsLeg_PedestrianType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .valhalla.DirectionsLeg.BicycleType bicycle_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::valhalla::DirectionsLeg_BicycleType_IsValid(val))) {
            _internal_set_bicycle_type(static_cast<::valhalla::DirectionsLeg_BicycleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .valhalla.DirectionsLeg.TransitType transit_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::valhalla::DirectionsLeg_TransitType_IsValid(val))) {
            _internal_set_transit_type(static_cast<::valhalla::DirectionsLeg_TransitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 begin_path_index = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_begin_path_index(&has_bits);
          begin_path_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_path_index = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_end_path_index(&has_bits);
          end_path_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool to_stay_on = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_to_stay_on(&has_bits);
          to_stay_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.StreetName roundabout_exit_street_names = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_roundabout_exit_street_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 turn_degree = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_turn_degree(&has_bits);
          turn_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_time_restrictions = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_has_time_restrictions(&has_bits);
          has_time_restrictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.DirectionsLeg.GuidanceView guidance_views = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_guidance_views(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .valhalla.DirectionsLeg.Maneuver.BssManeuverType bss_maneuver_type = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::valhalla::DirectionsLeg_Maneuver_BssManeuverType_IsValid(val))) {
            _internal_set_bss_maneuver_type(static_cast<::valhalla::DirectionsLeg_Maneuver_BssManeuverType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(36, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionsLeg_Maneuver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsLeg.Maneuver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .valhalla.DirectionsLeg.Maneuver.Type type = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional string text_instruction = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text_instruction(), target);
  }

  // repeated .valhalla.StreetName street_name = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_street_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_street_name(i), target, stream);
  }

  // optional float length = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_length(), target);
  }

  // optional double time = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_time(), target);
  }

  // optional .valhalla.DirectionsLeg.Maneuver.CardinalDirection begin_cardinal_direction = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_begin_cardinal_direction(), target);
  }

  // optional uint32 begin_heading = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_begin_heading(), target);
  }

  // optional uint32 begin_shape_index = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_begin_shape_index(), target);
  }

  // optional uint32 end_shape_index = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_end_shape_index(), target);
  }

  // optional bool portions_toll = 10;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_portions_toll(), target);
  }

  // optional bool portions_unpaved = 11;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_portions_unpaved(), target);
  }

  // optional string verbal_transition_alert_instruction = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_verbal_transition_alert_instruction(), target);
  }

  // optional string verbal_pre_transition_instruction = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_verbal_pre_transition_instruction(), target);
  }

  // optional string verbal_post_transition_instruction = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_verbal_post_transition_instruction(), target);
  }

  // repeated .valhalla.StreetName begin_street_name = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_begin_street_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_begin_street_name(i), target, stream);
  }

  // optional .valhalla.DirectionsLeg.Maneuver.Sign sign = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::sign(this), target, stream);
  }

  // optional uint32 roundabout_exit_count = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_roundabout_exit_count(), target);
  }

  // optional string depart_instruction = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_depart_instruction(), target);
  }

  // optional string verbal_depart_instruction = 19;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_verbal_depart_instruction(), target);
  }

  // optional string arrive_instruction = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_arrive_instruction(), target);
  }

  // optional string verbal_arrive_instruction = 21;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_verbal_arrive_instruction(), target);
  }

  // optional .valhalla.DirectionsLeg.TransitInfo transit_info = 22;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::transit_info(this), target, stream);
  }

  // optional bool verbal_multi_cue = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_verbal_multi_cue(), target);
  }

  // optional .valhalla.DirectionsLeg.TravelMode travel_mode = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_travel_mode(), target);
  }

  // optional .valhalla.DirectionsLeg.VehicleType vehicle_type = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_vehicle_type(), target);
  }

  // optional .valhalla.DirectionsLeg.PedestrianType pedestrian_type = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_pedestrian_type(), target);
  }

  // optional .valhalla.DirectionsLeg.BicycleType bicycle_type = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_bicycle_type(), target);
  }

  // optional .valhalla.DirectionsLeg.TransitType transit_type = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->_internal_transit_type(), target);
  }

  // optional uint32 begin_path_index = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_begin_path_index(), target);
  }

  // optional uint32 end_path_index = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_end_path_index(), target);
  }

  // optional bool to_stay_on = 31;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_to_stay_on(), target);
  }

  // repeated .valhalla.StreetName roundabout_exit_street_names = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roundabout_exit_street_names_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_roundabout_exit_street_names(i), target, stream);
  }

  // optional uint32 turn_degree = 33;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_turn_degree(), target);
  }

  // optional bool has_time_restrictions = 34;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_has_time_restrictions(), target);
  }

  // repeated .valhalla.DirectionsLeg.GuidanceView guidance_views = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_guidance_views_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, this->_internal_guidance_views(i), target, stream);
  }

  // optional .valhalla.DirectionsLeg.Maneuver.BssManeuverType bss_maneuver_type = 36;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      36, this->_internal_bss_maneuver_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsLeg.Maneuver)
  return target;
}

size_t DirectionsLeg_Maneuver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.Maneuver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.StreetName street_name = 3;
  total_size += 1UL * this->_internal_street_name_size();
  for (const auto& msg : this->street_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.StreetName begin_street_name = 15;
  total_size += 1UL * this->_internal_begin_street_name_size();
  for (const auto& msg : this->begin_street_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.StreetName roundabout_exit_street_names = 32;
  total_size += 2UL * this->_internal_roundabout_exit_street_names_size();
  for (const auto& msg : this->roundabout_exit_street_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.DirectionsLeg.GuidanceView guidance_views = 35;
  total_size += 2UL * this->_internal_guidance_views_size();
  for (const auto& msg : this->guidance_views_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text_instruction = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_instruction());
    }

    // optional string verbal_transition_alert_instruction = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verbal_transition_alert_instruction());
    }

    // optional string verbal_pre_transition_instruction = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verbal_pre_transition_instruction());
    }

    // optional string verbal_post_transition_instruction = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verbal_post_transition_instruction());
    }

    // optional string depart_instruction = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_depart_instruction());
    }

    // optional string verbal_depart_instruction = 19;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verbal_depart_instruction());
    }

    // optional string arrive_instruction = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_arrive_instruction());
    }

    // optional string verbal_arrive_instruction = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verbal_arrive_instruction());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .valhalla.DirectionsLeg.Maneuver.Sign sign = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sign_);
    }

    // optional .valhalla.DirectionsLeg.TransitInfo transit_info = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transit_info_);
    }

    // optional .valhalla.DirectionsLeg.Maneuver.Type type = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional float length = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional double time = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional .valhalla.DirectionsLeg.Maneuver.CardinalDirection begin_cardinal_direction = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_begin_cardinal_direction());
    }

    // optional uint32 begin_heading = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_begin_heading());
    }

    // optional uint32 begin_shape_index = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_begin_shape_index());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 end_shape_index = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_shape_index());
    }

    // optional uint32 roundabout_exit_count = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_roundabout_exit_count());
    }

    // optional bool portions_toll = 10;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool portions_unpaved = 11;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool verbal_multi_cue = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool to_stay_on = 31;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional .valhalla.DirectionsLeg.TravelMode travel_mode = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_travel_mode());
    }

    // optional .valhalla.DirectionsLeg.VehicleType vehicle_type = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vehicle_type());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .valhalla.DirectionsLeg.PedestrianType pedestrian_type = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pedestrian_type());
    }

    // optional .valhalla.DirectionsLeg.BicycleType bicycle_type = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bicycle_type());
    }

    // optional .valhalla.DirectionsLeg.TransitType transit_type = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_transit_type());
    }

    // optional uint32 begin_path_index = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_begin_path_index());
    }

    // optional uint32 end_path_index = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_path_index());
    }

    // optional uint32 turn_degree = 33;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_turn_degree());
    }

    // optional bool has_time_restrictions = 34;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional .valhalla.DirectionsLeg.Maneuver.BssManeuverType bss_maneuver_type = 36;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bss_maneuver_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsLeg_Maneuver::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsLeg_Maneuver*>(
      &from));
}

void DirectionsLeg_Maneuver::MergeFrom(const DirectionsLeg_Maneuver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.Maneuver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  street_name_.MergeFrom(from.street_name_);
  begin_street_name_.MergeFrom(from.begin_street_name_);
  roundabout_exit_street_names_.MergeFrom(from.roundabout_exit_street_names_);
  guidance_views_.MergeFrom(from.guidance_views_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text_instruction(from._internal_text_instruction());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_verbal_transition_alert_instruction(from._internal_verbal_transition_alert_instruction());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_verbal_pre_transition_instruction(from._internal_verbal_pre_transition_instruction());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_verbal_post_transition_instruction(from._internal_verbal_post_transition_instruction());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_depart_instruction(from._internal_depart_instruction());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_verbal_depart_instruction(from._internal_verbal_depart_instruction());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_arrive_instruction(from._internal_arrive_instruction());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_verbal_arrive_instruction(from._internal_verbal_arrive_instruction());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_sign()->::valhalla::DirectionsLeg_Maneuver_Sign::MergeFrom(from._internal_sign());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_transit_info()->::valhalla::DirectionsLeg_TransitInfo::MergeFrom(from._internal_transit_info());
    }
    if (cached_has_bits & 0x00000400u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000800u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00001000u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00002000u) {
      begin_cardinal_direction_ = from.begin_cardinal_direction_;
    }
    if (cached_has_bits & 0x00004000u) {
      begin_heading_ = from.begin_heading_;
    }
    if (cached_has_bits & 0x00008000u) {
      begin_shape_index_ = from.begin_shape_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      end_shape_index_ = from.end_shape_index_;
    }
    if (cached_has_bits & 0x00020000u) {
      roundabout_exit_count_ = from.roundabout_exit_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      portions_toll_ = from.portions_toll_;
    }
    if (cached_has_bits & 0x00080000u) {
      portions_unpaved_ = from.portions_unpaved_;
    }
    if (cached_has_bits & 0x00100000u) {
      verbal_multi_cue_ = from.verbal_multi_cue_;
    }
    if (cached_has_bits & 0x00200000u) {
      to_stay_on_ = from.to_stay_on_;
    }
    if (cached_has_bits & 0x00400000u) {
      travel_mode_ = from.travel_mode_;
    }
    if (cached_has_bits & 0x00800000u) {
      vehicle_type_ = from.vehicle_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      pedestrian_type_ = from.pedestrian_type_;
    }
    if (cached_has_bits & 0x02000000u) {
      bicycle_type_ = from.bicycle_type_;
    }
    if (cached_has_bits & 0x04000000u) {
      transit_type_ = from.transit_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      begin_path_index_ = from.begin_path_index_;
    }
    if (cached_has_bits & 0x10000000u) {
      end_path_index_ = from.end_path_index_;
    }
    if (cached_has_bits & 0x20000000u) {
      turn_degree_ = from.turn_degree_;
    }
    if (cached_has_bits & 0x40000000u) {
      has_time_restrictions_ = from.has_time_restrictions_;
    }
    if (cached_has_bits & 0x80000000u) {
      bss_maneuver_type_ = from.bss_maneuver_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DirectionsLeg_Maneuver::CopyFrom(const DirectionsLeg_Maneuver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.Maneuver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_Maneuver::IsInitialized() const {
  return true;
}

void DirectionsLeg_Maneuver::InternalSwap(DirectionsLeg_Maneuver* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  street_name_.InternalSwap(&other->street_name_);
  begin_street_name_.InternalSwap(&other->begin_street_name_);
  roundabout_exit_street_names_.InternalSwap(&other->roundabout_exit_street_names_);
  guidance_views_.InternalSwap(&other->guidance_views_);
  text_instruction_.Swap(&other->text_instruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  verbal_transition_alert_instruction_.Swap(&other->verbal_transition_alert_instruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  verbal_pre_transition_instruction_.Swap(&other->verbal_pre_transition_instruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  verbal_post_transition_instruction_.Swap(&other->verbal_post_transition_instruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  depart_instruction_.Swap(&other->depart_instruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  verbal_depart_instruction_.Swap(&other->verbal_depart_instruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  arrive_instruction_.Swap(&other->arrive_instruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  verbal_arrive_instruction_.Swap(&other->verbal_arrive_instruction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionsLeg_Maneuver, has_time_restrictions_)
      + sizeof(DirectionsLeg_Maneuver::has_time_restrictions_)
      - PROTOBUF_FIELD_OFFSET(DirectionsLeg_Maneuver, sign_)>(
          reinterpret_cast<char*>(&sign_),
          reinterpret_cast<char*>(&other->sign_));
  swap(bss_maneuver_type_, other->bss_maneuver_type_);
}

std::string DirectionsLeg_Maneuver::GetTypeName() const {
  return "valhalla.DirectionsLeg.Maneuver";
}


// ===================================================================

class DirectionsLeg::_Internal {
 public:
  using HasBits = decltype(std::declval<DirectionsLeg>()._has_bits_);
  static void set_has_trip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leg_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_leg_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::valhalla::DirectionsLeg_Summary& summary(const DirectionsLeg* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::valhalla::DirectionsLeg_Summary&
DirectionsLeg::_Internal::summary(const DirectionsLeg* msg) {
  return *msg->summary_;
}
void DirectionsLeg::clear_location() {
  location_.Clear();
}
DirectionsLeg::DirectionsLeg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  location_(arena),
  maneuver_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsLeg)
}
DirectionsLeg::DirectionsLeg(const DirectionsLeg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      location_(from.location_),
      maneuver_(from.maneuver_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shape()) {
    shape_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shape(), 
      GetArena());
  }
  if (from._internal_has_summary()) {
    summary_ = new ::valhalla::DirectionsLeg_Summary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  ::memcpy(&trip_id_, &from.trip_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leg_count_) -
    reinterpret_cast<char*>(&trip_id_)) + sizeof(leg_count_));
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg)
}

void DirectionsLeg::SharedCtor() {
shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&summary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leg_count_) -
    reinterpret_cast<char*>(&summary_)) + sizeof(leg_count_));
}

DirectionsLeg::~DirectionsLeg() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DirectionsLeg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  shape_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete summary_;
}

void DirectionsLeg::ArenaDtor(void* object) {
  DirectionsLeg* _this = reinterpret_cast< DirectionsLeg* >(object);
  (void)_this;
}
void DirectionsLeg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsLeg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsLeg::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.Clear();
  maneuver_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shape_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(summary_ != nullptr);
      summary_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&trip_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leg_count_) -
        reinterpret_cast<char*>(&trip_id_)) + sizeof(leg_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsLeg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 trip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trip_id(&has_bits);
          trip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_leg_id(&has_bits);
          leg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leg_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_leg_count(&has_bits);
          leg_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.Location location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .valhalla.DirectionsLeg.Summary summary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.DirectionsLeg.Maneuver maneuver = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maneuver(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string shape = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_shape();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionsLeg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsLeg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 trip_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trip_id(), target);
  }

  // optional uint32 leg_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leg_id(), target);
  }

  // optional uint32 leg_count = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_leg_count(), target);
  }

  // repeated .valhalla.Location location = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_location_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_location(i), target, stream);
  }

  // optional .valhalla.DirectionsLeg.Summary summary = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::summary(this), target, stream);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver maneuver = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_maneuver_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_maneuver(i), target, stream);
  }

  // optional string shape = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_shape(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsLeg)
  return target;
}

size_t DirectionsLeg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.Location location = 4;
  total_size += 1UL * this->_internal_location_size();
  for (const auto& msg : this->location_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver maneuver = 6;
  total_size += 1UL * this->_internal_maneuver_size();
  for (const auto& msg : this->maneuver_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string shape = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shape());
    }

    // optional .valhalla.DirectionsLeg.Summary summary = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *summary_);
    }

    // optional uint64 trip_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_trip_id());
    }

    // optional uint32 leg_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leg_id());
    }

    // optional uint32 leg_count = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leg_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsLeg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsLeg*>(
      &from));
}

void DirectionsLeg::MergeFrom(const DirectionsLeg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  location_.MergeFrom(from.location_);
  maneuver_.MergeFrom(from.maneuver_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_shape(from._internal_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_summary()->::valhalla::DirectionsLeg_Summary::MergeFrom(from._internal_summary());
    }
    if (cached_has_bits & 0x00000004u) {
      trip_id_ = from.trip_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      leg_id_ = from.leg_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      leg_count_ = from.leg_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DirectionsLeg::CopyFrom(const DirectionsLeg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg::IsInitialized() const {
  return true;
}

void DirectionsLeg::InternalSwap(DirectionsLeg* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  location_.InternalSwap(&other->location_);
  maneuver_.InternalSwap(&other->maneuver_);
  shape_.Swap(&other->shape_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionsLeg, leg_count_)
      + sizeof(DirectionsLeg::leg_count_)
      - PROTOBUF_FIELD_OFFSET(DirectionsLeg, summary_)>(
          reinterpret_cast<char*>(&summary_),
          reinterpret_cast<char*>(&other->summary_));
}

std::string DirectionsLeg::GetTypeName() const {
  return "valhalla.DirectionsLeg";
}


// ===================================================================

class DirectionsRoute::_Internal {
 public:
};

DirectionsRoute::DirectionsRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  legs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.DirectionsRoute)
}
DirectionsRoute::DirectionsRoute(const DirectionsRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      legs_(from.legs_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsRoute)
}

void DirectionsRoute::SharedCtor() {
}

DirectionsRoute::~DirectionsRoute() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsRoute)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DirectionsRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DirectionsRoute::ArenaDtor(void* object) {
  DirectionsRoute* _this = reinterpret_cast< DirectionsRoute* >(object);
  (void)_this;
}
void DirectionsRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionsRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionsRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  legs_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DirectionsRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .valhalla.DirectionsLeg legs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_legs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionsRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.DirectionsRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .valhalla.DirectionsLeg legs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_legs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_legs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.DirectionsRoute)
  return target;
}

size_t DirectionsRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.DirectionsLeg legs = 1;
  total_size += 1UL * this->_internal_legs_size();
  for (const auto& msg : this->legs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionsRoute::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DirectionsRoute*>(
      &from));
}

void DirectionsRoute::MergeFrom(const DirectionsRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  legs_.MergeFrom(from.legs_);
}

void DirectionsRoute::CopyFrom(const DirectionsRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsRoute::IsInitialized() const {
  return true;
}

void DirectionsRoute::InternalSwap(DirectionsRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  legs_.InternalSwap(&other->legs_);
}

std::string DirectionsRoute::GetTypeName() const {
  return "valhalla.DirectionsRoute";
}


// ===================================================================

class Directions::_Internal {
 public:
};

Directions::Directions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  routes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Directions)
}
Directions::Directions(const Directions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:valhalla.Directions)
}

void Directions::SharedCtor() {
}

Directions::~Directions() {
  // @@protoc_insertion_point(destructor:valhalla.Directions)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Directions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Directions::ArenaDtor(void* object) {
  Directions* _this = reinterpret_cast< Directions* >(object);
  (void)_this;
}
void Directions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Directions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Directions::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Directions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Directions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .valhalla.DirectionsRoute routes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Directions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Directions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .valhalla.DirectionsRoute routes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_routes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Directions)
  return target;
}

size_t Directions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Directions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.DirectionsRoute routes = 1;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Directions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Directions*>(
      &from));
}

void Directions::MergeFrom(const Directions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Directions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
}

void Directions::CopyFrom(const Directions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Directions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Directions::IsInitialized() const {
  return true;
}

void Directions::InternalSwap(Directions* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  routes_.InternalSwap(&other->routes_);
}

std::string Directions::GetTypeName() const {
  return "valhalla.Directions";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsLeg_Summary* Arena::CreateMaybeMessage< ::valhalla::DirectionsLeg_Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsLeg_Summary >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsLeg_TransitInfo* Arena::CreateMaybeMessage< ::valhalla::DirectionsLeg_TransitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsLeg_TransitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsLeg_GuidanceView* Arena::CreateMaybeMessage< ::valhalla::DirectionsLeg_GuidanceView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsLeg_GuidanceView >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsLeg_Maneuver_SignElement* Arena::CreateMaybeMessage< ::valhalla::DirectionsLeg_Maneuver_SignElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsLeg_Maneuver_SignElement >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsLeg_Maneuver_Sign* Arena::CreateMaybeMessage< ::valhalla::DirectionsLeg_Maneuver_Sign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsLeg_Maneuver_Sign >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsLeg_Maneuver* Arena::CreateMaybeMessage< ::valhalla::DirectionsLeg_Maneuver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsLeg_Maneuver >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsLeg* Arena::CreateMaybeMessage< ::valhalla::DirectionsLeg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsLeg >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::DirectionsRoute* Arena::CreateMaybeMessage< ::valhalla::DirectionsRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::DirectionsRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::Directions* Arena::CreateMaybeMessage< ::valhalla::Directions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::Directions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
