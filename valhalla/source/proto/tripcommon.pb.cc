// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tripcommon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tripcommon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace valhalla {

void protobuf_ShutdownFile_tripcommon_2eproto() {
  delete LatLng::default_instance_;
  delete BoundingBox::default_instance_;
  delete Location::default_instance_;
  delete Location_PathEdge::default_instance_;
  delete TransitEgressInfo::default_instance_;
  delete TransitStationInfo::default_instance_;
  delete TransitPlatformInfo::default_instance_;
  delete StreetName::default_instance_;
  delete TurnLane::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_tripcommon_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_tripcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  LatLng::default_instance_ = new LatLng();
  BoundingBox::default_instance_ = new BoundingBox();
  Location::default_instance_ = new Location();
  Location_PathEdge::default_instance_ = new Location_PathEdge();
  TransitEgressInfo::default_instance_ = new TransitEgressInfo();
  TransitStationInfo::default_instance_ = new TransitStationInfo();
  TransitPlatformInfo::default_instance_ = new TransitPlatformInfo();
  StreetName::default_instance_ = new StreetName();
  TurnLane::default_instance_ = new TurnLane();
  LatLng::default_instance_->InitAsDefaultInstance();
  BoundingBox::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  Location_PathEdge::default_instance_->InitAsDefaultInstance();
  TransitEgressInfo::default_instance_->InitAsDefaultInstance();
  TransitStationInfo::default_instance_->InitAsDefaultInstance();
  TransitPlatformInfo::default_instance_->InitAsDefaultInstance();
  StreetName::default_instance_->InitAsDefaultInstance();
  TurnLane::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tripcommon_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tripcommon_2eproto_once_);
void protobuf_AddDesc_tripcommon_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tripcommon_2eproto_once_,
                 &protobuf_AddDesc_tripcommon_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tripcommon_2eproto {
  StaticDescriptorInitializer_tripcommon_2eproto() {
    protobuf_AddDesc_tripcommon_2eproto();
  }
} static_descriptor_initializer_tripcommon_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int LatLng::kLatFieldNumber;
const int LatLng::kLngFieldNumber;
#endif  // !_MSC_VER

LatLng::LatLng()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LatLng::InitAsDefaultInstance() {
}

LatLng::LatLng(const LatLng& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LatLng::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lng_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatLng::~LatLng() {
  SharedDtor();
}

void LatLng::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LatLng::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LatLng& LatLng::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

LatLng* LatLng::default_instance_ = NULL;

LatLng* LatLng::New() const {
  return new LatLng;
}

void LatLng::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lat_ = 0;
    lng_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LatLng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_lng;
        break;
      }

      // optional float lng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LatLng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lat(), output);
  }

  // optional float lng = 2;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lng(), output);
  }

}

int LatLng::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float lat = 1;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lng = 2;
    if (has_lng()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatLng::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LatLng*>(&from));
}

void LatLng::MergeFrom(const LatLng& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
  }
}

void LatLng::CopyFrom(const LatLng& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatLng::IsInitialized() const {

  return true;
}

void LatLng::Swap(LatLng* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LatLng::GetTypeName() const {
  return "valhalla.LatLng";
}


// ===================================================================

#ifndef _MSC_VER
const int BoundingBox::kMinLlFieldNumber;
const int BoundingBox::kMaxLlFieldNumber;
#endif  // !_MSC_VER

BoundingBox::BoundingBox()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BoundingBox::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  min_ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  min_ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  max_ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  max_ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
}

BoundingBox::BoundingBox(const BoundingBox& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BoundingBox::SharedCtor() {
  _cached_size_ = 0;
  min_ll_ = NULL;
  max_ll_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundingBox::~BoundingBox() {
  SharedDtor();
}

void BoundingBox::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete min_ll_;
    delete max_ll_;
  }
}

void BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BoundingBox& BoundingBox::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

BoundingBox* BoundingBox::default_instance_ = NULL;

BoundingBox* BoundingBox::New() const {
  return new BoundingBox;
}

void BoundingBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_min_ll()) {
      if (min_ll_ != NULL) min_ll_->::valhalla::LatLng::Clear();
    }
    if (has_max_ll()) {
      if (max_ll_ != NULL) max_ll_->::valhalla::LatLng::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.LatLng min_ll = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_max_ll;
        break;
      }

      // optional .valhalla.LatLng max_ll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_max_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.LatLng min_ll = 1;
  if (has_min_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->min_ll(), output);
  }

  // optional .valhalla.LatLng max_ll = 2;
  if (has_max_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->max_ll(), output);
  }

}

int BoundingBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.LatLng min_ll = 1;
    if (has_min_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_ll());
    }

    // optional .valhalla.LatLng max_ll = 2;
    if (has_max_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_ll());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BoundingBox*>(&from));
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_ll()) {
      mutable_min_ll()->::valhalla::LatLng::MergeFrom(from.min_ll());
    }
    if (from.has_max_ll()) {
      mutable_max_ll()->::valhalla::LatLng::MergeFrom(from.max_ll());
    }
  }
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {

  return true;
}

void BoundingBox::Swap(BoundingBox* other) {
  if (other != this) {
    std::swap(min_ll_, other->min_ll_);
    std::swap(max_ll_, other->max_ll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BoundingBox::GetTypeName() const {
  return "valhalla.BoundingBox";
}


// ===================================================================

bool Location_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Location_Type Location::kBreak;
const Location_Type Location::kThrough;
const Location_Type Location::kVia;
const Location_Type Location::kBreakThrough;
const Location_Type Location::Type_MIN;
const Location_Type Location::Type_MAX;
const int Location::Type_ARRAYSIZE;
#endif  // _MSC_VER
bool Location_SideOfStreet_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Location_SideOfStreet Location::kNone;
const Location_SideOfStreet Location::kLeft;
const Location_SideOfStreet Location::kRight;
const Location_SideOfStreet Location::SideOfStreet_MIN;
const Location_SideOfStreet Location::SideOfStreet_MAX;
const int Location::SideOfStreet_ARRAYSIZE;
#endif  // _MSC_VER
bool Location_PreferredSide_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Location_PreferredSide Location::either;
const Location_PreferredSide Location::same;
const Location_PreferredSide Location::opposite;
const Location_PreferredSide Location::PreferredSide_MIN;
const Location_PreferredSide Location::PreferredSide_MAX;
const int Location::PreferredSide_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Location_PathEdge::kGraphIdFieldNumber;
const int Location_PathEdge::kPercentAlongFieldNumber;
const int Location_PathEdge::kLlFieldNumber;
const int Location_PathEdge::kSideOfStreetFieldNumber;
const int Location_PathEdge::kDistanceFieldNumber;
const int Location_PathEdge::kMinimumReachabilityFieldNumber;
const int Location_PathEdge::kBeginNodeFieldNumber;
const int Location_PathEdge::kEndNodeFieldNumber;
const int Location_PathEdge::kNamesFieldNumber;
const int Location_PathEdge::kOutboundReachFieldNumber;
const int Location_PathEdge::kInboundReachFieldNumber;
#endif  // !_MSC_VER

Location_PathEdge::Location_PathEdge()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Location_PathEdge::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
}

Location_PathEdge::Location_PathEdge(const Location_PathEdge& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Location_PathEdge::SharedCtor() {
  _cached_size_ = 0;
  graph_id_ = GOOGLE_ULONGLONG(0);
  percent_along_ = 0;
  ll_ = NULL;
  side_of_street_ = 0;
  distance_ = 0;
  minimum_reachability_ = 0;
  begin_node_ = false;
  end_node_ = false;
  outbound_reach_ = 0;
  inbound_reach_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location_PathEdge::~Location_PathEdge() {
  SharedDtor();
}

void Location_PathEdge::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ll_;
  }
}

void Location_PathEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Location_PathEdge& Location_PathEdge::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

Location_PathEdge* Location_PathEdge::default_instance_ = NULL;

Location_PathEdge* Location_PathEdge::New() const {
  return new Location_PathEdge;
}

void Location_PathEdge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    graph_id_ = GOOGLE_ULONGLONG(0);
    percent_along_ = 0;
    if (has_ll()) {
      if (ll_ != NULL) ll_->::valhalla::LatLng::Clear();
    }
    side_of_street_ = 0;
    distance_ = 0;
    minimum_reachability_ = 0;
    begin_node_ = false;
    end_node_ = false;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    outbound_reach_ = 0;
    inbound_reach_ = 0;
  }
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Location_PathEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 graph_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &graph_id_)));
          set_has_graph_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_percent_along;
        break;
      }

      // optional float percent_along = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_percent_along:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_along_)));
          set_has_percent_along();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ll;
        break;
      }

      // optional .valhalla.LatLng ll = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_side_of_street;
        break;
      }

      // optional .valhalla.Location.SideOfStreet side_of_street = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side_of_street:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::Location_SideOfStreet_IsValid(value)) {
            set_side_of_street(static_cast< ::valhalla::Location_SideOfStreet >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_distance;
        break;
      }

      // optional float distance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minimum_reachability;
        break;
      }

      // optional int32 minimum_reachability = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minimum_reachability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minimum_reachability_)));
          set_has_minimum_reachability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_begin_node;
        break;
      }

      // optional bool begin_node = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &begin_node_)));
          set_has_begin_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_end_node;
        break;
      }

      // optional bool end_node = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_node_)));
          set_has_end_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_names;
        break;
      }

      // repeated string names = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_names;
        if (input->ExpectTag(88)) goto parse_outbound_reach;
        break;
      }

      // optional int32 outbound_reach = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outbound_reach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outbound_reach_)));
          set_has_outbound_reach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_inbound_reach;
        break;
      }

      // optional int32 inbound_reach = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inbound_reach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inbound_reach_)));
          set_has_inbound_reach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Location_PathEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 graph_id = 1;
  if (has_graph_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->graph_id(), output);
  }

  // optional float percent_along = 2;
  if (has_percent_along()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->percent_along(), output);
  }

  // optional .valhalla.LatLng ll = 3;
  if (has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ll(), output);
  }

  // optional .valhalla.Location.SideOfStreet side_of_street = 4;
  if (has_side_of_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->side_of_street(), output);
  }

  // optional float distance = 5;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->distance(), output);
  }

  // optional int32 minimum_reachability = 6;
  if (has_minimum_reachability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minimum_reachability(), output);
  }

  // optional bool begin_node = 7;
  if (has_begin_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->begin_node(), output);
  }

  // optional bool end_node = 8;
  if (has_end_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->end_node(), output);
  }

  // repeated string names = 10;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->names(i), output);
  }

  // optional int32 outbound_reach = 11;
  if (has_outbound_reach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->outbound_reach(), output);
  }

  // optional int32 inbound_reach = 12;
  if (has_inbound_reach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->inbound_reach(), output);
  }

}

int Location_PathEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 graph_id = 1;
    if (has_graph_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->graph_id());
    }

    // optional float percent_along = 2;
    if (has_percent_along()) {
      total_size += 1 + 4;
    }

    // optional .valhalla.LatLng ll = 3;
    if (has_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ll());
    }

    // optional .valhalla.Location.SideOfStreet side_of_street = 4;
    if (has_side_of_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side_of_street());
    }

    // optional float distance = 5;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // optional int32 minimum_reachability = 6;
    if (has_minimum_reachability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minimum_reachability());
    }

    // optional bool begin_node = 7;
    if (has_begin_node()) {
      total_size += 1 + 1;
    }

    // optional bool end_node = 8;
    if (has_end_node()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 outbound_reach = 11;
    if (has_outbound_reach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outbound_reach());
    }

    // optional int32 inbound_reach = 12;
    if (has_inbound_reach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inbound_reach());
    }

  }
  // repeated string names = 10;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location_PathEdge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Location_PathEdge*>(&from));
}

void Location_PathEdge::MergeFrom(const Location_PathEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_graph_id()) {
      set_graph_id(from.graph_id());
    }
    if (from.has_percent_along()) {
      set_percent_along(from.percent_along());
    }
    if (from.has_ll()) {
      mutable_ll()->::valhalla::LatLng::MergeFrom(from.ll());
    }
    if (from.has_side_of_street()) {
      set_side_of_street(from.side_of_street());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_minimum_reachability()) {
      set_minimum_reachability(from.minimum_reachability());
    }
    if (from.has_begin_node()) {
      set_begin_node(from.begin_node());
    }
    if (from.has_end_node()) {
      set_end_node(from.end_node());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_outbound_reach()) {
      set_outbound_reach(from.outbound_reach());
    }
    if (from.has_inbound_reach()) {
      set_inbound_reach(from.inbound_reach());
    }
  }
}

void Location_PathEdge::CopyFrom(const Location_PathEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location_PathEdge::IsInitialized() const {

  return true;
}

void Location_PathEdge::Swap(Location_PathEdge* other) {
  if (other != this) {
    std::swap(graph_id_, other->graph_id_);
    std::swap(percent_along_, other->percent_along_);
    std::swap(ll_, other->ll_);
    std::swap(side_of_street_, other->side_of_street_);
    std::swap(distance_, other->distance_);
    std::swap(minimum_reachability_, other->minimum_reachability_);
    std::swap(begin_node_, other->begin_node_);
    std::swap(end_node_, other->end_node_);
    names_.Swap(&other->names_);
    std::swap(outbound_reach_, other->outbound_reach_);
    std::swap(inbound_reach_, other->inbound_reach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Location_PathEdge::GetTypeName() const {
  return "valhalla.Location.PathEdge";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Location::kLlFieldNumber;
const int Location::kTypeFieldNumber;
const int Location::kHeadingFieldNumber;
const int Location::kNameFieldNumber;
const int Location::kStreetFieldNumber;
const int Location::kCityFieldNumber;
const int Location::kStateFieldNumber;
const int Location::kPostalCodeFieldNumber;
const int Location::kCountryFieldNumber;
const int Location::kPhoneFieldNumber;
const int Location::kUrlFieldNumber;
const int Location::kDateTimeFieldNumber;
const int Location::kSideOfStreetFieldNumber;
const int Location::kHeadingToleranceFieldNumber;
const int Location::kNodeSnapToleranceFieldNumber;
const int Location::kWayIdFieldNumber;
const int Location::kMinimumReachabilityFieldNumber;
const int Location::kRadiusFieldNumber;
const int Location::kAccuracyFieldNumber;
const int Location::kTimeFieldNumber;
const int Location::kRankCandidatesFieldNumber;
const int Location::kPathEdgesFieldNumber;
const int Location::kFilteredEdgesFieldNumber;
const int Location::kOriginalIndexFieldNumber;
const int Location::kProjectedLlFieldNumber;
const int Location::kPreferredSideFieldNumber;
const int Location::kSearchCutoffFieldNumber;
const int Location::kStreetSideToleranceFieldNumber;
#endif  // !_MSC_VER

Location::Location()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Location::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  projected_ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  projected_ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
}

Location::Location(const Location& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Location::SharedCtor() {
  _cached_size_ = 0;
  ll_ = NULL;
  type_ = 0;
  heading_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  postal_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_of_street_ = 0;
  heading_tolerance_ = 0u;
  node_snap_tolerance_ = 0u;
  way_id_ = GOOGLE_ULONGLONG(0);
  minimum_reachability_ = 0u;
  radius_ = 0u;
  accuracy_ = 0u;
  time_ = -1;
  rank_candidates_ = true;
  original_index_ = 0u;
  projected_ll_ = NULL;
  preferred_side_ = 0;
  search_cutoff_ = 0u;
  street_side_tolerance_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location::~Location() {
  SharedDtor();
}

void Location::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
    delete postal_code_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (date_time_ != &::google::protobuf::internal::kEmptyString) {
    delete date_time_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ll_;
    delete projected_ll_;
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Location& Location::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New() const {
  return new Location;
}

void Location::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ll()) {
      if (ll_ != NULL) ll_->::valhalla::LatLng::Clear();
    }
    type_ = 0;
    heading_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::kEmptyString) {
        street_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
    if (has_postal_code()) {
      if (postal_code_ != &::google::protobuf::internal::kEmptyString) {
        postal_code_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_date_time()) {
      if (date_time_ != &::google::protobuf::internal::kEmptyString) {
        date_time_->clear();
      }
    }
    side_of_street_ = 0;
    heading_tolerance_ = 0u;
    node_snap_tolerance_ = 0u;
    way_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    minimum_reachability_ = 0u;
    radius_ = 0u;
    accuracy_ = 0u;
    time_ = -1;
    rank_candidates_ = true;
    original_index_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_projected_ll()) {
      if (projected_ll_ != NULL) projected_ll_->::valhalla::LatLng::Clear();
    }
    preferred_side_ = 0;
    search_cutoff_ = 0u;
    street_side_tolerance_ = 0u;
  }
  path_edges_.Clear();
  filtered_edges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.LatLng ll = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .valhalla.Location.Type type = 2 [default = kBreak];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::Location_Type_IsValid(value)) {
            set_type(static_cast< ::valhalla::Location_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heading;
        break;
      }

      // optional uint32 heading = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_street;
        break;
      }

      // optional string street = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // optional string city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_state;
        break;
      }

      // optional string state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_postal_code;
        break;
      }

      // optional string postal_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postal_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_country;
        break;
      }

      // optional string country = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_phone;
        break;
      }

      // optional string phone = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_url;
        break;
      }

      // optional string url = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_date_time;
        break;
      }

      // optional string date_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_side_of_street;
        break;
      }

      // optional .valhalla.Location.SideOfStreet side_of_street = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side_of_street:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::Location_SideOfStreet_IsValid(value)) {
            set_side_of_street(static_cast< ::valhalla::Location_SideOfStreet >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_heading_tolerance;
        break;
      }

      // optional uint32 heading_tolerance = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heading_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heading_tolerance_)));
          set_has_heading_tolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_node_snap_tolerance;
        break;
      }

      // optional uint32 node_snap_tolerance = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_snap_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_snap_tolerance_)));
          set_has_node_snap_tolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_way_id;
        break;
      }

      // optional uint64 way_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_way_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &way_id_)));
          set_has_way_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_minimum_reachability;
        break;
      }

      // optional uint32 minimum_reachability = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minimum_reachability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minimum_reachability_)));
          set_has_minimum_reachability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_radius;
        break;
      }

      // optional uint32 radius = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_accuracy;
        break;
      }

      // optional uint32 accuracy = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_time;
        break;
      }

      // optional double time = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_rank_candidates;
        break;
      }

      // optional bool rank_candidates = 21 [default = true];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_candidates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rank_candidates_)));
          set_has_rank_candidates();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_path_edges;
        break;
      }

      // repeated .valhalla.Location.PathEdge path_edges = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_edges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_path_edges;
        if (input->ExpectTag(186)) goto parse_filtered_edges;
        break;
      }

      // repeated .valhalla.Location.PathEdge filtered_edges = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filtered_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filtered_edges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_filtered_edges;
        if (input->ExpectTag(192)) goto parse_original_index;
        break;
      }

      // optional uint32 original_index = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &original_index_)));
          set_has_original_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_projected_ll;
        break;
      }

      // optional .valhalla.LatLng projected_ll = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_projected_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_projected_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_preferred_side;
        break;
      }

      // optional .valhalla.Location.PreferredSide preferred_side = 26 [default = either];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preferred_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::Location_PreferredSide_IsValid(value)) {
            set_preferred_side(static_cast< ::valhalla::Location_PreferredSide >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_search_cutoff;
        break;
      }

      // optional uint32 search_cutoff = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_cutoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_cutoff_)));
          set_has_search_cutoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_street_side_tolerance;
        break;
      }

      // optional uint32 street_side_tolerance = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_street_side_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &street_side_tolerance_)));
          set_has_street_side_tolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.LatLng ll = 1;
  if (has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->ll(), output);
  }

  // optional .valhalla.Location.Type type = 2 [default = kBreak];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->heading(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string street = 5;
  if (has_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->street(), output);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->city(), output);
  }

  // optional string state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->state(), output);
  }

  // optional string postal_code = 8;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->postal_code(), output);
  }

  // optional string country = 9;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->country(), output);
  }

  // optional string phone = 10;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->phone(), output);
  }

  // optional string url = 11;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->url(), output);
  }

  // optional string date_time = 12;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->date_time(), output);
  }

  // optional .valhalla.Location.SideOfStreet side_of_street = 13;
  if (has_side_of_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->side_of_street(), output);
  }

  // optional uint32 heading_tolerance = 14;
  if (has_heading_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->heading_tolerance(), output);
  }

  // optional uint32 node_snap_tolerance = 15;
  if (has_node_snap_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->node_snap_tolerance(), output);
  }

  // optional uint64 way_id = 16;
  if (has_way_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->way_id(), output);
  }

  // optional uint32 minimum_reachability = 17;
  if (has_minimum_reachability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->minimum_reachability(), output);
  }

  // optional uint32 radius = 18;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->radius(), output);
  }

  // optional uint32 accuracy = 19;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->accuracy(), output);
  }

  // optional double time = 20 [default = -1];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->time(), output);
  }

  // optional bool rank_candidates = 21 [default = true];
  if (has_rank_candidates()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->rank_candidates(), output);
  }

  // repeated .valhalla.Location.PathEdge path_edges = 22;
  for (int i = 0; i < this->path_edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->path_edges(i), output);
  }

  // repeated .valhalla.Location.PathEdge filtered_edges = 23;
  for (int i = 0; i < this->filtered_edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->filtered_edges(i), output);
  }

  // optional uint32 original_index = 24;
  if (has_original_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->original_index(), output);
  }

  // optional .valhalla.LatLng projected_ll = 25;
  if (has_projected_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->projected_ll(), output);
  }

  // optional .valhalla.Location.PreferredSide preferred_side = 26 [default = either];
  if (has_preferred_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->preferred_side(), output);
  }

  // optional uint32 search_cutoff = 28;
  if (has_search_cutoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->search_cutoff(), output);
  }

  // optional uint32 street_side_tolerance = 29;
  if (has_street_side_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->street_side_tolerance(), output);
  }

}

int Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.LatLng ll = 1;
    if (has_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ll());
    }

    // optional .valhalla.Location.Type type = 2 [default = kBreak];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 heading = 3;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heading());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string street = 5;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string postal_code = 8;
    if (has_postal_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string country = 9;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string phone = 10;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string url = 11;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string date_time = 12;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_time());
    }

    // optional .valhalla.Location.SideOfStreet side_of_street = 13;
    if (has_side_of_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side_of_street());
    }

    // optional uint32 heading_tolerance = 14;
    if (has_heading_tolerance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heading_tolerance());
    }

    // optional uint32 node_snap_tolerance = 15;
    if (has_node_snap_tolerance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_snap_tolerance());
    }

    // optional uint64 way_id = 16;
    if (has_way_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->way_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 minimum_reachability = 17;
    if (has_minimum_reachability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minimum_reachability());
    }

    // optional uint32 radius = 18;
    if (has_radius()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radius());
    }

    // optional uint32 accuracy = 19;
    if (has_accuracy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accuracy());
    }

    // optional double time = 20 [default = -1];
    if (has_time()) {
      total_size += 2 + 8;
    }

    // optional bool rank_candidates = 21 [default = true];
    if (has_rank_candidates()) {
      total_size += 2 + 1;
    }

    // optional uint32 original_index = 24;
    if (has_original_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->original_index());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .valhalla.LatLng projected_ll = 25;
    if (has_projected_ll()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->projected_ll());
    }

    // optional .valhalla.Location.PreferredSide preferred_side = 26 [default = either];
    if (has_preferred_side()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preferred_side());
    }

    // optional uint32 search_cutoff = 28;
    if (has_search_cutoff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_cutoff());
    }

    // optional uint32 street_side_tolerance = 29;
    if (has_street_side_tolerance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->street_side_tolerance());
    }

  }
  // repeated .valhalla.Location.PathEdge path_edges = 22;
  total_size += 2 * this->path_edges_size();
  for (int i = 0; i < this->path_edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_edges(i));
  }

  // repeated .valhalla.Location.PathEdge filtered_edges = 23;
  total_size += 2 * this->filtered_edges_size();
  for (int i = 0; i < this->filtered_edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filtered_edges(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Location*>(&from));
}

void Location::MergeFrom(const Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_edges_.MergeFrom(from.path_edges_);
  filtered_edges_.MergeFrom(from.filtered_edges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ll()) {
      mutable_ll()->::valhalla::LatLng::MergeFrom(from.ll());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_postal_code()) {
      set_postal_code(from.postal_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_date_time()) {
      set_date_time(from.date_time());
    }
    if (from.has_side_of_street()) {
      set_side_of_street(from.side_of_street());
    }
    if (from.has_heading_tolerance()) {
      set_heading_tolerance(from.heading_tolerance());
    }
    if (from.has_node_snap_tolerance()) {
      set_node_snap_tolerance(from.node_snap_tolerance());
    }
    if (from.has_way_id()) {
      set_way_id(from.way_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_minimum_reachability()) {
      set_minimum_reachability(from.minimum_reachability());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_rank_candidates()) {
      set_rank_candidates(from.rank_candidates());
    }
    if (from.has_original_index()) {
      set_original_index(from.original_index());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_projected_ll()) {
      mutable_projected_ll()->::valhalla::LatLng::MergeFrom(from.projected_ll());
    }
    if (from.has_preferred_side()) {
      set_preferred_side(from.preferred_side());
    }
    if (from.has_search_cutoff()) {
      set_search_cutoff(from.search_cutoff());
    }
    if (from.has_street_side_tolerance()) {
      set_street_side_tolerance(from.street_side_tolerance());
    }
  }
}

void Location::CopyFrom(const Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {

  return true;
}

void Location::Swap(Location* other) {
  if (other != this) {
    std::swap(ll_, other->ll_);
    std::swap(type_, other->type_);
    std::swap(heading_, other->heading_);
    std::swap(name_, other->name_);
    std::swap(street_, other->street_);
    std::swap(city_, other->city_);
    std::swap(state_, other->state_);
    std::swap(postal_code_, other->postal_code_);
    std::swap(country_, other->country_);
    std::swap(phone_, other->phone_);
    std::swap(url_, other->url_);
    std::swap(date_time_, other->date_time_);
    std::swap(side_of_street_, other->side_of_street_);
    std::swap(heading_tolerance_, other->heading_tolerance_);
    std::swap(node_snap_tolerance_, other->node_snap_tolerance_);
    std::swap(way_id_, other->way_id_);
    std::swap(minimum_reachability_, other->minimum_reachability_);
    std::swap(radius_, other->radius_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(time_, other->time_);
    std::swap(rank_candidates_, other->rank_candidates_);
    path_edges_.Swap(&other->path_edges_);
    filtered_edges_.Swap(&other->filtered_edges_);
    std::swap(original_index_, other->original_index_);
    std::swap(projected_ll_, other->projected_ll_);
    std::swap(preferred_side_, other->preferred_side_);
    std::swap(search_cutoff_, other->search_cutoff_);
    std::swap(street_side_tolerance_, other->street_side_tolerance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Location::GetTypeName() const {
  return "valhalla.Location";
}


// ===================================================================

#ifndef _MSC_VER
const int TransitEgressInfo::kOnestopIdFieldNumber;
const int TransitEgressInfo::kNameFieldNumber;
const int TransitEgressInfo::kLlFieldNumber;
#endif  // !_MSC_VER

TransitEgressInfo::TransitEgressInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TransitEgressInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
}

TransitEgressInfo::TransitEgressInfo(const TransitEgressInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TransitEgressInfo::SharedCtor() {
  _cached_size_ = 0;
  onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ll_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransitEgressInfo::~TransitEgressInfo() {
  SharedDtor();
}

void TransitEgressInfo::SharedDtor() {
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete onestop_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ll_;
  }
}

void TransitEgressInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransitEgressInfo& TransitEgressInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

TransitEgressInfo* TransitEgressInfo::default_instance_ = NULL;

TransitEgressInfo* TransitEgressInfo::New() const {
  return new TransitEgressInfo;
}

void TransitEgressInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_onestop_id()) {
      if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        onestop_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ll()) {
      if (ll_ != NULL) ll_->::valhalla::LatLng::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TransitEgressInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string onestop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ll;
        break;
      }

      // optional .valhalla.LatLng ll = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransitEgressInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string onestop_id = 1;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->onestop_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .valhalla.LatLng ll = 3;
  if (has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ll(), output);
  }

}

int TransitEgressInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string onestop_id = 1;
    if (has_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .valhalla.LatLng ll = 3;
    if (has_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ll());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitEgressInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransitEgressInfo*>(&from));
}

void TransitEgressInfo::MergeFrom(const TransitEgressInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onestop_id()) {
      set_onestop_id(from.onestop_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ll()) {
      mutable_ll()->::valhalla::LatLng::MergeFrom(from.ll());
    }
  }
}

void TransitEgressInfo::CopyFrom(const TransitEgressInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitEgressInfo::IsInitialized() const {

  return true;
}

void TransitEgressInfo::Swap(TransitEgressInfo* other) {
  if (other != this) {
    std::swap(onestop_id_, other->onestop_id_);
    std::swap(name_, other->name_);
    std::swap(ll_, other->ll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TransitEgressInfo::GetTypeName() const {
  return "valhalla.TransitEgressInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int TransitStationInfo::kOnestopIdFieldNumber;
const int TransitStationInfo::kNameFieldNumber;
const int TransitStationInfo::kLlFieldNumber;
#endif  // !_MSC_VER

TransitStationInfo::TransitStationInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TransitStationInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
}

TransitStationInfo::TransitStationInfo(const TransitStationInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TransitStationInfo::SharedCtor() {
  _cached_size_ = 0;
  onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ll_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransitStationInfo::~TransitStationInfo() {
  SharedDtor();
}

void TransitStationInfo::SharedDtor() {
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete onestop_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ll_;
  }
}

void TransitStationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransitStationInfo& TransitStationInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

TransitStationInfo* TransitStationInfo::default_instance_ = NULL;

TransitStationInfo* TransitStationInfo::New() const {
  return new TransitStationInfo;
}

void TransitStationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_onestop_id()) {
      if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        onestop_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ll()) {
      if (ll_ != NULL) ll_->::valhalla::LatLng::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TransitStationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string onestop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ll;
        break;
      }

      // optional .valhalla.LatLng ll = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransitStationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string onestop_id = 1;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->onestop_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .valhalla.LatLng ll = 3;
  if (has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ll(), output);
  }

}

int TransitStationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string onestop_id = 1;
    if (has_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .valhalla.LatLng ll = 3;
    if (has_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ll());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitStationInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransitStationInfo*>(&from));
}

void TransitStationInfo::MergeFrom(const TransitStationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onestop_id()) {
      set_onestop_id(from.onestop_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ll()) {
      mutable_ll()->::valhalla::LatLng::MergeFrom(from.ll());
    }
  }
}

void TransitStationInfo::CopyFrom(const TransitStationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitStationInfo::IsInitialized() const {

  return true;
}

void TransitStationInfo::Swap(TransitStationInfo* other) {
  if (other != this) {
    std::swap(onestop_id_, other->onestop_id_);
    std::swap(name_, other->name_);
    std::swap(ll_, other->ll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TransitStationInfo::GetTypeName() const {
  return "valhalla.TransitStationInfo";
}


// ===================================================================

bool TransitPlatformInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransitPlatformInfo_Type TransitPlatformInfo::kStop;
const TransitPlatformInfo_Type TransitPlatformInfo::kStation;
const TransitPlatformInfo_Type TransitPlatformInfo::Type_MIN;
const TransitPlatformInfo_Type TransitPlatformInfo::Type_MAX;
const int TransitPlatformInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TransitPlatformInfo::kTypeFieldNumber;
const int TransitPlatformInfo::kOnestopIdFieldNumber;
const int TransitPlatformInfo::kNameFieldNumber;
const int TransitPlatformInfo::kArrivalDateTimeFieldNumber;
const int TransitPlatformInfo::kDepartureDateTimeFieldNumber;
const int TransitPlatformInfo::kAssumedScheduleFieldNumber;
const int TransitPlatformInfo::kLlFieldNumber;
const int TransitPlatformInfo::kStationOnestopIdFieldNumber;
const int TransitPlatformInfo::kStationNameFieldNumber;
#endif  // !_MSC_VER

TransitPlatformInfo::TransitPlatformInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TransitPlatformInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
}

TransitPlatformInfo::TransitPlatformInfo(const TransitPlatformInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TransitPlatformInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arrival_date_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  departure_date_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assumed_schedule_ = false;
  ll_ = NULL;
  station_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  station_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransitPlatformInfo::~TransitPlatformInfo() {
  SharedDtor();
}

void TransitPlatformInfo::SharedDtor() {
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete onestop_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (arrival_date_time_ != &::google::protobuf::internal::kEmptyString) {
    delete arrival_date_time_;
  }
  if (departure_date_time_ != &::google::protobuf::internal::kEmptyString) {
    delete departure_date_time_;
  }
  if (station_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete station_onestop_id_;
  }
  if (station_name_ != &::google::protobuf::internal::kEmptyString) {
    delete station_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ll_;
  }
}

void TransitPlatformInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransitPlatformInfo& TransitPlatformInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

TransitPlatformInfo* TransitPlatformInfo::default_instance_ = NULL;

TransitPlatformInfo* TransitPlatformInfo::New() const {
  return new TransitPlatformInfo;
}

void TransitPlatformInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_onestop_id()) {
      if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        onestop_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_arrival_date_time()) {
      if (arrival_date_time_ != &::google::protobuf::internal::kEmptyString) {
        arrival_date_time_->clear();
      }
    }
    if (has_departure_date_time()) {
      if (departure_date_time_ != &::google::protobuf::internal::kEmptyString) {
        departure_date_time_->clear();
      }
    }
    assumed_schedule_ = false;
    if (has_ll()) {
      if (ll_ != NULL) ll_->::valhalla::LatLng::Clear();
    }
    if (has_station_onestop_id()) {
      if (station_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
        station_onestop_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_station_name()) {
      if (station_name_ != &::google::protobuf::internal::kEmptyString) {
        station_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TransitPlatformInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.TransitPlatformInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::TransitPlatformInfo_Type_IsValid(value)) {
            set_type(static_cast< ::valhalla::TransitPlatformInfo_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_onestop_id;
        break;
      }

      // optional string onestop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arrival_date_time;
        break;
      }

      // optional string arrival_date_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arrival_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arrival_date_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_departure_date_time;
        break;
      }

      // optional string departure_date_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_departure_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departure_date_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_assumed_schedule;
        break;
      }

      // optional bool assumed_schedule = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assumed_schedule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assumed_schedule_)));
          set_has_assumed_schedule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ll;
        break;
      }

      // optional .valhalla.LatLng ll = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_station_onestop_id;
        break;
      }

      // optional string station_onestop_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_station_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_station_onestop_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_station_name;
        break;
      }

      // optional string station_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_station_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_station_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransitPlatformInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.TransitPlatformInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string onestop_id = 2;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->onestop_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string arrival_date_time = 4;
  if (has_arrival_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->arrival_date_time(), output);
  }

  // optional string departure_date_time = 5;
  if (has_departure_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->departure_date_time(), output);
  }

  // optional bool assumed_schedule = 6;
  if (has_assumed_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->assumed_schedule(), output);
  }

  // optional .valhalla.LatLng ll = 7;
  if (has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->ll(), output);
  }

  // optional string station_onestop_id = 8;
  if (has_station_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->station_onestop_id(), output);
  }

  // optional string station_name = 9;
  if (has_station_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->station_name(), output);
  }

}

int TransitPlatformInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.TransitPlatformInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string onestop_id = 2;
    if (has_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string arrival_date_time = 4;
    if (has_arrival_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arrival_date_time());
    }

    // optional string departure_date_time = 5;
    if (has_departure_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->departure_date_time());
    }

    // optional bool assumed_schedule = 6;
    if (has_assumed_schedule()) {
      total_size += 1 + 1;
    }

    // optional .valhalla.LatLng ll = 7;
    if (has_ll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ll());
    }

    // optional string station_onestop_id = 8;
    if (has_station_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->station_onestop_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string station_name = 9;
    if (has_station_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->station_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitPlatformInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransitPlatformInfo*>(&from));
}

void TransitPlatformInfo::MergeFrom(const TransitPlatformInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_onestop_id()) {
      set_onestop_id(from.onestop_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_arrival_date_time()) {
      set_arrival_date_time(from.arrival_date_time());
    }
    if (from.has_departure_date_time()) {
      set_departure_date_time(from.departure_date_time());
    }
    if (from.has_assumed_schedule()) {
      set_assumed_schedule(from.assumed_schedule());
    }
    if (from.has_ll()) {
      mutable_ll()->::valhalla::LatLng::MergeFrom(from.ll());
    }
    if (from.has_station_onestop_id()) {
      set_station_onestop_id(from.station_onestop_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_station_name()) {
      set_station_name(from.station_name());
    }
  }
}

void TransitPlatformInfo::CopyFrom(const TransitPlatformInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitPlatformInfo::IsInitialized() const {

  return true;
}

void TransitPlatformInfo::Swap(TransitPlatformInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(onestop_id_, other->onestop_id_);
    std::swap(name_, other->name_);
    std::swap(arrival_date_time_, other->arrival_date_time_);
    std::swap(departure_date_time_, other->departure_date_time_);
    std::swap(assumed_schedule_, other->assumed_schedule_);
    std::swap(ll_, other->ll_);
    std::swap(station_onestop_id_, other->station_onestop_id_);
    std::swap(station_name_, other->station_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TransitPlatformInfo::GetTypeName() const {
  return "valhalla.TransitPlatformInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int StreetName::kValueFieldNumber;
const int StreetName::kIsRouteNumberFieldNumber;
#endif  // !_MSC_VER

StreetName::StreetName()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StreetName::InitAsDefaultInstance() {
}

StreetName::StreetName(const StreetName& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StreetName::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_route_number_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreetName::~StreetName() {
  SharedDtor();
}

void StreetName::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StreetName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StreetName& StreetName::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

StreetName* StreetName::default_instance_ = NULL;

StreetName* StreetName::New() const {
  return new StreetName;
}

void StreetName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    is_route_number_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StreetName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_route_number;
        break;
      }

      // optional bool is_route_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_route_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_route_number_)));
          set_has_is_route_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreetName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  // optional bool is_route_number = 2;
  if (has_is_route_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_route_number(), output);
  }

}

int StreetName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional bool is_route_number = 2;
    if (has_is_route_number()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetName::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StreetName*>(&from));
}

void StreetName::MergeFrom(const StreetName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_is_route_number()) {
      set_is_route_number(from.is_route_number());
    }
  }
}

void StreetName::CopyFrom(const StreetName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetName::IsInitialized() const {

  return true;
}

void StreetName::Swap(StreetName* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(is_route_number_, other->is_route_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StreetName::GetTypeName() const {
  return "valhalla.StreetName";
}


// ===================================================================

#ifndef _MSC_VER
const int TurnLane::kDirectionsMaskFieldNumber;
const int TurnLane::kIsActiveFieldNumber;
#endif  // !_MSC_VER

TurnLane::TurnLane()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TurnLane::InitAsDefaultInstance() {
}

TurnLane::TurnLane(const TurnLane& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TurnLane::SharedCtor() {
  _cached_size_ = 0;
  directions_mask_ = 0u;
  is_active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnLane::~TurnLane() {
  SharedDtor();
}

void TurnLane::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TurnLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TurnLane& TurnLane::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

TurnLane* TurnLane::default_instance_ = NULL;

TurnLane* TurnLane::New() const {
  return new TurnLane;
}

void TurnLane::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    directions_mask_ = 0u;
    is_active_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TurnLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 directions_mask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &directions_mask_)));
          set_has_directions_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_active;
        break;
      }

      // optional bool is_active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 directions_mask = 1;
  if (has_directions_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->directions_mask(), output);
  }

  // optional bool is_active = 2;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_active(), output);
  }

}

int TurnLane::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 directions_mask = 1;
    if (has_directions_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->directions_mask());
    }

    // optional bool is_active = 2;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnLane::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TurnLane*>(&from));
}

void TurnLane::MergeFrom(const TurnLane& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_directions_mask()) {
      set_directions_mask(from.directions_mask());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
  }
}

void TurnLane::CopyFrom(const TurnLane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnLane::IsInitialized() const {

  return true;
}

void TurnLane::Swap(TurnLane* other) {
  if (other != this) {
    std::swap(directions_mask_, other->directions_mask_);
    std::swap(is_active_, other->is_active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TurnLane::GetTypeName() const {
  return "valhalla.TurnLane";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)
