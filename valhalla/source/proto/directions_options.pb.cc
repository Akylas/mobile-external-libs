// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directions_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "directions_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace valhalla {
namespace odin {

namespace {

const ::google::protobuf::Descriptor* DirectionsOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectionsOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DirectionsOptions_Units_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_directions_5foptions_2eproto() {
  protobuf_AddDesc_directions_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "directions_options.proto");
  GOOGLE_CHECK(file != NULL);
  DirectionsOptions_descriptor_ = file->message_type(0);
  static const int DirectionsOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionsOptions, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionsOptions, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionsOptions, narrative_),
  };
  DirectionsOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirectionsOptions_descriptor_,
      DirectionsOptions::default_instance_,
      DirectionsOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionsOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectionsOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirectionsOptions));
  DirectionsOptions_Units_descriptor_ = DirectionsOptions_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_directions_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirectionsOptions_descriptor_, &DirectionsOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_directions_5foptions_2eproto() {
  delete DirectionsOptions::default_instance_;
  delete DirectionsOptions_reflection_;
  delete DirectionsOptions::_default_language_;
}

void protobuf_AddDesc_directions_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030directions_options.proto\022\rvalhalla.odi"
    "n\"\242\001\n\021DirectionsOptions\0225\n\005units\030\001 \001(\0162&"
    ".valhalla.odin.DirectionsOptions.Units\022\027"
    "\n\010language\030\002 \001(\t:\005en-US\022\027\n\tnarrative\030\003 \001"
    "(\010:\004true\"$\n\005Units\022\017\n\013kKilometers\020\000\022\n\n\006kM"
    "iles\020\001", 206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "directions_options.proto", &protobuf_RegisterTypes);
  DirectionsOptions::_default_language_ =
      new ::std::string("en-US", 5);
  DirectionsOptions::default_instance_ = new DirectionsOptions();
  DirectionsOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_directions_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_directions_5foptions_2eproto {
  StaticDescriptorInitializer_directions_5foptions_2eproto() {
    protobuf_AddDesc_directions_5foptions_2eproto();
  }
} static_descriptor_initializer_directions_5foptions_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DirectionsOptions_Units_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectionsOptions_Units_descriptor_;
}
bool DirectionsOptions_Units_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DirectionsOptions_Units DirectionsOptions::kKilometers;
const DirectionsOptions_Units DirectionsOptions::kMiles;
const DirectionsOptions_Units DirectionsOptions::Units_MIN;
const DirectionsOptions_Units DirectionsOptions::Units_MAX;
const int DirectionsOptions::Units_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* DirectionsOptions::_default_language_ = NULL;
#ifndef _MSC_VER
const int DirectionsOptions::kUnitsFieldNumber;
const int DirectionsOptions::kLanguageFieldNumber;
const int DirectionsOptions::kNarrativeFieldNumber;
#endif  // !_MSC_VER

DirectionsOptions::DirectionsOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirectionsOptions::InitAsDefaultInstance() {
}

DirectionsOptions::DirectionsOptions(const DirectionsOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirectionsOptions::SharedCtor() {
  _cached_size_ = 0;
  units_ = 0;
  language_ = const_cast< ::std::string*>(_default_language_);
  narrative_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectionsOptions::~DirectionsOptions() {
  SharedDtor();
}

void DirectionsOptions::SharedDtor() {
  if (language_ != _default_language_) {
    delete language_;
  }
  if (this != default_instance_) {
  }
}

void DirectionsOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectionsOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectionsOptions_descriptor_;
}

const DirectionsOptions& DirectionsOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_directions_5foptions_2eproto();
  return *default_instance_;
}

DirectionsOptions* DirectionsOptions::default_instance_ = NULL;

DirectionsOptions* DirectionsOptions::New() const {
  return new DirectionsOptions;
}

void DirectionsOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    units_ = 0;
    if (has_language()) {
      if (language_ != _default_language_) {
        language_->assign(*_default_language_);
      }
    }
    narrative_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirectionsOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.odin.DirectionsOptions.Units units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::odin::DirectionsOptions_Units_IsValid(value)) {
            set_units(static_cast< ::valhalla::odin::DirectionsOptions_Units >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_language;
        break;
      }

      // optional string language = 2 [default = "en-US"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_narrative;
        break;
      }

      // optional bool narrative = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_narrative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &narrative_)));
          set_has_narrative();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirectionsOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.odin.DirectionsOptions.Units units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->units(), output);
  }

  // optional string language = 2 [default = "en-US"];
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->language(), output);
  }

  // optional bool narrative = 3 [default = true];
  if (has_narrative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->narrative(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirectionsOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .valhalla.odin.DirectionsOptions.Units units = 1;
  if (has_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->units(), target);
  }

  // optional string language = 2 [default = "en-US"];
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  // optional bool narrative = 3 [default = true];
  if (has_narrative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->narrative(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirectionsOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.odin.DirectionsOptions.Units units = 1;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->units());
    }

    // optional string language = 2 [default = "en-US"];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional bool narrative = 3 [default = true];
    if (has_narrative()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectionsOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirectionsOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirectionsOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirectionsOptions::MergeFrom(const DirectionsOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_narrative()) {
      set_narrative(from.narrative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirectionsOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionsOptions::CopyFrom(const DirectionsOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsOptions::IsInitialized() const {

  return true;
}

void DirectionsOptions::Swap(DirectionsOptions* other) {
  if (other != this) {
    std::swap(units_, other->units_);
    std::swap(language_, other->language_);
    std::swap(narrative_, other->narrative_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirectionsOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectionsOptions_descriptor_;
  metadata.reflection = DirectionsOptions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace odin
}  // namespace valhalla

// @@protoc_insertion_point(global_scope)
