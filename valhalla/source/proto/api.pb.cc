// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace valhalla {

void protobuf_ShutdownFile_api_2eproto() {
  delete Api::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_api_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_api_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::valhalla::protobuf_AddDesc_options_2eproto();
  ::valhalla::protobuf_AddDesc_trip_2eproto();
  ::valhalla::protobuf_AddDesc_directions_2eproto();
  Api::default_instance_ = new Api();
  Api::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_api_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_api_2eproto_once_);
void protobuf_AddDesc_api_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_api_2eproto_once_,
                 &protobuf_AddDesc_api_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_api_2eproto {
  StaticDescriptorInitializer_api_2eproto() {
    protobuf_AddDesc_api_2eproto();
  }
} static_descriptor_initializer_api_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Api::kOptionsFieldNumber;
const int Api::kTripFieldNumber;
const int Api::kDirectionsFieldNumber;
#endif  // !_MSC_VER

Api::Api()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Api::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  options_ = const_cast< ::valhalla::Options*>(
      ::valhalla::Options::internal_default_instance());
#else
  options_ = const_cast< ::valhalla::Options*>(&::valhalla::Options::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  trip_ = const_cast< ::valhalla::Trip*>(
      ::valhalla::Trip::internal_default_instance());
#else
  trip_ = const_cast< ::valhalla::Trip*>(&::valhalla::Trip::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  directions_ = const_cast< ::valhalla::Directions*>(
      ::valhalla::Directions::internal_default_instance());
#else
  directions_ = const_cast< ::valhalla::Directions*>(&::valhalla::Directions::default_instance());
#endif
}

Api::Api(const Api& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Api::SharedCtor() {
  _cached_size_ = 0;
  options_ = NULL;
  trip_ = NULL;
  directions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Api::~Api() {
  SharedDtor();
}

void Api::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete options_;
    delete trip_;
    delete directions_;
  }
}

void Api::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Api& Api::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_api_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
#endif
  return *default_instance_;
}

Api* Api::default_instance_ = NULL;

Api* Api::New() const {
  return new Api;
}

void Api::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_options()) {
      if (options_ != NULL) options_->::valhalla::Options::Clear();
    }
    if (has_trip()) {
      if (trip_ != NULL) trip_->::valhalla::Trip::Clear();
    }
    if (has_directions()) {
      if (directions_ != NULL) directions_->::valhalla::Directions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Api::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.Options options = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trip;
        break;
      }

      // optional .valhalla.Trip trip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_directions;
        break;
      }

      // optional .valhalla.Directions directions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Api::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .valhalla.Options options = 1;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->options(), output);
  }

  // optional .valhalla.Trip trip = 2;
  if (has_trip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->trip(), output);
  }

  // optional .valhalla.Directions directions = 3;
  if (has_directions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->directions(), output);
  }

}

int Api::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .valhalla.Options options = 1;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

    // optional .valhalla.Trip trip = 2;
    if (has_trip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trip());
    }

    // optional .valhalla.Directions directions = 3;
    if (has_directions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->directions());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Api::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Api*>(&from));
}

void Api::MergeFrom(const Api& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_options()) {
      mutable_options()->::valhalla::Options::MergeFrom(from.options());
    }
    if (from.has_trip()) {
      mutable_trip()->::valhalla::Trip::MergeFrom(from.trip());
    }
    if (from.has_directions()) {
      mutable_directions()->::valhalla::Directions::MergeFrom(from.directions());
    }
  }
}

void Api::CopyFrom(const Api& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Api::IsInitialized() const {

  return true;
}

void Api::Swap(Api* other) {
  if (other != this) {
    std::swap(options_, other->options_);
    std::swap(trip_, other->trip_);
    std::swap(directions_, other->directions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Api::GetTypeName() const {
  return "valhalla.Api";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)
