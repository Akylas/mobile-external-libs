// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transit.proto

#ifndef PROTOBUF_transit_2eproto__INCLUDED
#define PROTOBUF_transit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace valhalla {
namespace mjolnir {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_transit_2eproto();
void protobuf_AssignDesc_transit_2eproto();
void protobuf_ShutdownFile_transit_2eproto();

class Transit;
class Transit_Stop;
class Transit_StopPair;
class Transit_Route;
class Transit_Shape;

enum Transit_VehicleType {
  Transit_VehicleType_kTram = 0,
  Transit_VehicleType_kMetro = 1,
  Transit_VehicleType_kRail = 2,
  Transit_VehicleType_kBus = 3,
  Transit_VehicleType_kFerry = 4,
  Transit_VehicleType_kCableCar = 5,
  Transit_VehicleType_kGondola = 6,
  Transit_VehicleType_kFunicular = 7
};
bool Transit_VehicleType_IsValid(int value);
const Transit_VehicleType Transit_VehicleType_VehicleType_MIN = Transit_VehicleType_kTram;
const Transit_VehicleType Transit_VehicleType_VehicleType_MAX = Transit_VehicleType_kFunicular;
const int Transit_VehicleType_VehicleType_ARRAYSIZE = Transit_VehicleType_VehicleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Transit_VehicleType_descriptor();
inline const ::std::string& Transit_VehicleType_Name(Transit_VehicleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Transit_VehicleType_descriptor(), value);
}
inline bool Transit_VehicleType_Parse(
    const ::std::string& name, Transit_VehicleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Transit_VehicleType>(
    Transit_VehicleType_descriptor(), name, value);
}
// ===================================================================

class Transit_Stop : public ::google::protobuf::Message {
 public:
  Transit_Stop();
  virtual ~Transit_Stop();

  Transit_Stop(const Transit_Stop& from);

  inline Transit_Stop& operator=(const Transit_Stop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transit_Stop& default_instance();

  void Swap(Transit_Stop* other);

  // implements Message ----------------------------------------------

  Transit_Stop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transit_Stop& from);
  void MergeFrom(const Transit_Stop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float lon = 1;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 1;
  inline float lon() const;
  inline void set_lon(float value);

  // optional float lat = 2;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 2;
  inline float lat() const;
  inline void set_lat(float value);

  // optional uint64 graphid = 3;
  inline bool has_graphid() const;
  inline void clear_graphid();
  static const int kGraphidFieldNumber = 3;
  inline ::google::protobuf::uint64 graphid() const;
  inline void set_graphid(::google::protobuf::uint64 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string onestop_id = 5;
  inline bool has_onestop_id() const;
  inline void clear_onestop_id();
  static const int kOnestopIdFieldNumber = 5;
  inline const ::std::string& onestop_id() const;
  inline void set_onestop_id(const ::std::string& value);
  inline void set_onestop_id(const char* value);
  inline void set_onestop_id(const char* value, size_t size);
  inline ::std::string* mutable_onestop_id();
  inline ::std::string* release_onestop_id();
  inline void set_allocated_onestop_id(::std::string* onestop_id);

  // optional uint64 osm_way_id = 6;
  inline bool has_osm_way_id() const;
  inline void clear_osm_way_id();
  static const int kOsmWayIdFieldNumber = 6;
  inline ::google::protobuf::uint64 osm_way_id() const;
  inline void set_osm_way_id(::google::protobuf::uint64 value);

  // optional uint32 timezone = 8;
  inline bool has_timezone() const;
  inline void clear_timezone();
  static const int kTimezoneFieldNumber = 8;
  inline ::google::protobuf::uint32 timezone() const;
  inline void set_timezone(::google::protobuf::uint32 value);

  // optional bool wheelchair_boarding = 9;
  inline bool has_wheelchair_boarding() const;
  inline void clear_wheelchair_boarding();
  static const int kWheelchairBoardingFieldNumber = 9;
  inline bool wheelchair_boarding() const;
  inline void set_wheelchair_boarding(bool value);

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit.Stop)
 private:
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_graphid();
  inline void clear_has_graphid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_onestop_id();
  inline void clear_has_onestop_id();
  inline void set_has_osm_way_id();
  inline void clear_has_osm_way_id();
  inline void set_has_timezone();
  inline void clear_has_timezone();
  inline void set_has_wheelchair_boarding();
  inline void clear_has_wheelchair_boarding();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float lon_;
  float lat_;
  ::google::protobuf::uint64 graphid_;
  ::std::string* name_;
  ::std::string* onestop_id_;
  ::google::protobuf::uint64 osm_way_id_;
  ::google::protobuf::uint32 timezone_;
  bool wheelchair_boarding_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_transit_2eproto();
  friend void protobuf_AssignDesc_transit_2eproto();
  friend void protobuf_ShutdownFile_transit_2eproto();

  void InitAsDefaultInstance();
  static Transit_Stop* default_instance_;
};
// -------------------------------------------------------------------

class Transit_StopPair : public ::google::protobuf::Message {
 public:
  Transit_StopPair();
  virtual ~Transit_StopPair();

  Transit_StopPair(const Transit_StopPair& from);

  inline Transit_StopPair& operator=(const Transit_StopPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transit_StopPair& default_instance();

  void Swap(Transit_StopPair* other);

  // implements Message ----------------------------------------------

  Transit_StopPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transit_StopPair& from);
  void MergeFrom(const Transit_StopPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool bikes_allowed = 1;
  inline bool has_bikes_allowed() const;
  inline void clear_bikes_allowed();
  static const int kBikesAllowedFieldNumber = 1;
  inline bool bikes_allowed() const;
  inline void set_bikes_allowed(bool value);

  // optional uint32 block_id = 2;
  inline bool has_block_id() const;
  inline void clear_block_id();
  static const int kBlockIdFieldNumber = 2;
  inline ::google::protobuf::uint32 block_id() const;
  inline void set_block_id(::google::protobuf::uint32 value);

  // optional uint32 destination_arrival_time = 3;
  inline bool has_destination_arrival_time() const;
  inline void clear_destination_arrival_time();
  static const int kDestinationArrivalTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 destination_arrival_time() const;
  inline void set_destination_arrival_time(::google::protobuf::uint32 value);

  // optional uint64 destination_graphid = 4;
  inline bool has_destination_graphid() const;
  inline void clear_destination_graphid();
  static const int kDestinationGraphidFieldNumber = 4;
  inline ::google::protobuf::uint64 destination_graphid() const;
  inline void set_destination_graphid(::google::protobuf::uint64 value);

  // optional string destination_onestop_id = 5;
  inline bool has_destination_onestop_id() const;
  inline void clear_destination_onestop_id();
  static const int kDestinationOnestopIdFieldNumber = 5;
  inline const ::std::string& destination_onestop_id() const;
  inline void set_destination_onestop_id(const ::std::string& value);
  inline void set_destination_onestop_id(const char* value);
  inline void set_destination_onestop_id(const char* value, size_t size);
  inline ::std::string* mutable_destination_onestop_id();
  inline ::std::string* release_destination_onestop_id();
  inline void set_allocated_destination_onestop_id(::std::string* destination_onestop_id);

  // optional string operated_by_onestop_id = 6;
  inline bool has_operated_by_onestop_id() const;
  inline void clear_operated_by_onestop_id();
  static const int kOperatedByOnestopIdFieldNumber = 6;
  inline const ::std::string& operated_by_onestop_id() const;
  inline void set_operated_by_onestop_id(const ::std::string& value);
  inline void set_operated_by_onestop_id(const char* value);
  inline void set_operated_by_onestop_id(const char* value, size_t size);
  inline ::std::string* mutable_operated_by_onestop_id();
  inline ::std::string* release_operated_by_onestop_id();
  inline void set_allocated_operated_by_onestop_id(::std::string* operated_by_onestop_id);

  // optional uint32 origin_departure_time = 7;
  inline bool has_origin_departure_time() const;
  inline void clear_origin_departure_time();
  static const int kOriginDepartureTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 origin_departure_time() const;
  inline void set_origin_departure_time(::google::protobuf::uint32 value);

  // optional uint64 origin_graphid = 8;
  inline bool has_origin_graphid() const;
  inline void clear_origin_graphid();
  static const int kOriginGraphidFieldNumber = 8;
  inline ::google::protobuf::uint64 origin_graphid() const;
  inline void set_origin_graphid(::google::protobuf::uint64 value);

  // optional string origin_onestop_id = 9;
  inline bool has_origin_onestop_id() const;
  inline void clear_origin_onestop_id();
  static const int kOriginOnestopIdFieldNumber = 9;
  inline const ::std::string& origin_onestop_id() const;
  inline void set_origin_onestop_id(const ::std::string& value);
  inline void set_origin_onestop_id(const char* value);
  inline void set_origin_onestop_id(const char* value, size_t size);
  inline ::std::string* mutable_origin_onestop_id();
  inline ::std::string* release_origin_onestop_id();
  inline void set_allocated_origin_onestop_id(::std::string* origin_onestop_id);

  // optional uint32 route_index = 10;
  inline bool has_route_index() const;
  inline void clear_route_index();
  static const int kRouteIndexFieldNumber = 10;
  inline ::google::protobuf::uint32 route_index() const;
  inline void set_route_index(::google::protobuf::uint32 value);

  // repeated uint32 service_added_dates = 11;
  inline int service_added_dates_size() const;
  inline void clear_service_added_dates();
  static const int kServiceAddedDatesFieldNumber = 11;
  inline ::google::protobuf::uint32 service_added_dates(int index) const;
  inline void set_service_added_dates(int index, ::google::protobuf::uint32 value);
  inline void add_service_added_dates(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      service_added_dates() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_service_added_dates();

  // repeated bool service_days_of_week = 12;
  inline int service_days_of_week_size() const;
  inline void clear_service_days_of_week();
  static const int kServiceDaysOfWeekFieldNumber = 12;
  inline bool service_days_of_week(int index) const;
  inline void set_service_days_of_week(int index, bool value);
  inline void add_service_days_of_week(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      service_days_of_week() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_service_days_of_week();

  // optional uint32 service_end_date = 13;
  inline bool has_service_end_date() const;
  inline void clear_service_end_date();
  static const int kServiceEndDateFieldNumber = 13;
  inline ::google::protobuf::uint32 service_end_date() const;
  inline void set_service_end_date(::google::protobuf::uint32 value);

  // repeated uint32 service_except_dates = 14;
  inline int service_except_dates_size() const;
  inline void clear_service_except_dates();
  static const int kServiceExceptDatesFieldNumber = 14;
  inline ::google::protobuf::uint32 service_except_dates(int index) const;
  inline void set_service_except_dates(int index, ::google::protobuf::uint32 value);
  inline void add_service_except_dates(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      service_except_dates() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_service_except_dates();

  // optional uint32 service_start_date = 15;
  inline bool has_service_start_date() const;
  inline void clear_service_start_date();
  static const int kServiceStartDateFieldNumber = 15;
  inline ::google::protobuf::uint32 service_start_date() const;
  inline void set_service_start_date(::google::protobuf::uint32 value);

  // optional string trip_headsign = 16;
  inline bool has_trip_headsign() const;
  inline void clear_trip_headsign();
  static const int kTripHeadsignFieldNumber = 16;
  inline const ::std::string& trip_headsign() const;
  inline void set_trip_headsign(const ::std::string& value);
  inline void set_trip_headsign(const char* value);
  inline void set_trip_headsign(const char* value, size_t size);
  inline ::std::string* mutable_trip_headsign();
  inline ::std::string* release_trip_headsign();
  inline void set_allocated_trip_headsign(::std::string* trip_headsign);

  // optional uint32 trip_id = 17;
  inline bool has_trip_id() const;
  inline void clear_trip_id();
  static const int kTripIdFieldNumber = 17;
  inline ::google::protobuf::uint32 trip_id() const;
  inline void set_trip_id(::google::protobuf::uint32 value);

  // optional bool wheelchair_accessible = 18;
  inline bool has_wheelchair_accessible() const;
  inline void clear_wheelchair_accessible();
  static const int kWheelchairAccessibleFieldNumber = 18;
  inline bool wheelchair_accessible() const;
  inline void set_wheelchair_accessible(bool value);

  // optional uint32 line_id = 19;
  inline bool has_line_id() const;
  inline void clear_line_id();
  static const int kLineIdFieldNumber = 19;
  inline ::google::protobuf::uint32 line_id() const;
  inline void set_line_id(::google::protobuf::uint32 value);

  // optional uint32 shape_id = 20;
  inline bool has_shape_id() const;
  inline void clear_shape_id();
  static const int kShapeIdFieldNumber = 20;
  inline ::google::protobuf::uint32 shape_id() const;
  inline void set_shape_id(::google::protobuf::uint32 value);

  // optional float origin_dist_traveled = 21;
  inline bool has_origin_dist_traveled() const;
  inline void clear_origin_dist_traveled();
  static const int kOriginDistTraveledFieldNumber = 21;
  inline float origin_dist_traveled() const;
  inline void set_origin_dist_traveled(float value);

  // optional float destination_dist_traveled = 22;
  inline bool has_destination_dist_traveled() const;
  inline void clear_destination_dist_traveled();
  static const int kDestinationDistTraveledFieldNumber = 22;
  inline float destination_dist_traveled() const;
  inline void set_destination_dist_traveled(float value);

  // optional uint32 frequency_end_time = 23;
  inline bool has_frequency_end_time() const;
  inline void clear_frequency_end_time();
  static const int kFrequencyEndTimeFieldNumber = 23;
  inline ::google::protobuf::uint32 frequency_end_time() const;
  inline void set_frequency_end_time(::google::protobuf::uint32 value);

  // optional uint32 frequency_headway_seconds = 24;
  inline bool has_frequency_headway_seconds() const;
  inline void clear_frequency_headway_seconds();
  static const int kFrequencyHeadwaySecondsFieldNumber = 24;
  inline ::google::protobuf::uint32 frequency_headway_seconds() const;
  inline void set_frequency_headway_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit.StopPair)
 private:
  inline void set_has_bikes_allowed();
  inline void clear_has_bikes_allowed();
  inline void set_has_block_id();
  inline void clear_has_block_id();
  inline void set_has_destination_arrival_time();
  inline void clear_has_destination_arrival_time();
  inline void set_has_destination_graphid();
  inline void clear_has_destination_graphid();
  inline void set_has_destination_onestop_id();
  inline void clear_has_destination_onestop_id();
  inline void set_has_operated_by_onestop_id();
  inline void clear_has_operated_by_onestop_id();
  inline void set_has_origin_departure_time();
  inline void clear_has_origin_departure_time();
  inline void set_has_origin_graphid();
  inline void clear_has_origin_graphid();
  inline void set_has_origin_onestop_id();
  inline void clear_has_origin_onestop_id();
  inline void set_has_route_index();
  inline void clear_has_route_index();
  inline void set_has_service_end_date();
  inline void clear_has_service_end_date();
  inline void set_has_service_start_date();
  inline void clear_has_service_start_date();
  inline void set_has_trip_headsign();
  inline void clear_has_trip_headsign();
  inline void set_has_trip_id();
  inline void clear_has_trip_id();
  inline void set_has_wheelchair_accessible();
  inline void clear_has_wheelchair_accessible();
  inline void set_has_line_id();
  inline void clear_has_line_id();
  inline void set_has_shape_id();
  inline void clear_has_shape_id();
  inline void set_has_origin_dist_traveled();
  inline void clear_has_origin_dist_traveled();
  inline void set_has_destination_dist_traveled();
  inline void clear_has_destination_dist_traveled();
  inline void set_has_frequency_end_time();
  inline void clear_has_frequency_end_time();
  inline void set_has_frequency_headway_seconds();
  inline void clear_has_frequency_headway_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 block_id_;
  ::google::protobuf::uint32 destination_arrival_time_;
  ::google::protobuf::uint64 destination_graphid_;
  ::std::string* destination_onestop_id_;
  ::std::string* operated_by_onestop_id_;
  ::google::protobuf::uint64 origin_graphid_;
  ::google::protobuf::uint32 origin_departure_time_;
  bool bikes_allowed_;
  bool wheelchair_accessible_;
  ::std::string* origin_onestop_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > service_added_dates_;
  ::google::protobuf::uint32 route_index_;
  ::google::protobuf::uint32 service_end_date_;
  ::google::protobuf::RepeatedField< bool > service_days_of_week_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > service_except_dates_;
  ::std::string* trip_headsign_;
  ::google::protobuf::uint32 service_start_date_;
  ::google::protobuf::uint32 trip_id_;
  ::google::protobuf::uint32 line_id_;
  ::google::protobuf::uint32 shape_id_;
  float origin_dist_traveled_;
  float destination_dist_traveled_;
  ::google::protobuf::uint32 frequency_end_time_;
  ::google::protobuf::uint32 frequency_headway_seconds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_transit_2eproto();
  friend void protobuf_AssignDesc_transit_2eproto();
  friend void protobuf_ShutdownFile_transit_2eproto();

  void InitAsDefaultInstance();
  static Transit_StopPair* default_instance_;
};
// -------------------------------------------------------------------

class Transit_Route : public ::google::protobuf::Message {
 public:
  Transit_Route();
  virtual ~Transit_Route();

  Transit_Route(const Transit_Route& from);

  inline Transit_Route& operator=(const Transit_Route& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transit_Route& default_instance();

  void Swap(Transit_Route* other);

  // implements Message ----------------------------------------------

  Transit_Route* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transit_Route& from);
  void MergeFrom(const Transit_Route& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string onestop_id = 2;
  inline bool has_onestop_id() const;
  inline void clear_onestop_id();
  static const int kOnestopIdFieldNumber = 2;
  inline const ::std::string& onestop_id() const;
  inline void set_onestop_id(const ::std::string& value);
  inline void set_onestop_id(const char* value);
  inline void set_onestop_id(const char* value, size_t size);
  inline ::std::string* mutable_onestop_id();
  inline ::std::string* release_onestop_id();
  inline void set_allocated_onestop_id(::std::string* onestop_id);

  // optional string operated_by_name = 3;
  inline bool has_operated_by_name() const;
  inline void clear_operated_by_name();
  static const int kOperatedByNameFieldNumber = 3;
  inline const ::std::string& operated_by_name() const;
  inline void set_operated_by_name(const ::std::string& value);
  inline void set_operated_by_name(const char* value);
  inline void set_operated_by_name(const char* value, size_t size);
  inline ::std::string* mutable_operated_by_name();
  inline ::std::string* release_operated_by_name();
  inline void set_allocated_operated_by_name(::std::string* operated_by_name);

  // optional string operated_by_onestop_id = 4;
  inline bool has_operated_by_onestop_id() const;
  inline void clear_operated_by_onestop_id();
  static const int kOperatedByOnestopIdFieldNumber = 4;
  inline const ::std::string& operated_by_onestop_id() const;
  inline void set_operated_by_onestop_id(const ::std::string& value);
  inline void set_operated_by_onestop_id(const char* value);
  inline void set_operated_by_onestop_id(const char* value, size_t size);
  inline ::std::string* mutable_operated_by_onestop_id();
  inline ::std::string* release_operated_by_onestop_id();
  inline void set_allocated_operated_by_onestop_id(::std::string* operated_by_onestop_id);

  // optional string operated_by_website = 5;
  inline bool has_operated_by_website() const;
  inline void clear_operated_by_website();
  static const int kOperatedByWebsiteFieldNumber = 5;
  inline const ::std::string& operated_by_website() const;
  inline void set_operated_by_website(const ::std::string& value);
  inline void set_operated_by_website(const char* value);
  inline void set_operated_by_website(const char* value, size_t size);
  inline ::std::string* mutable_operated_by_website();
  inline ::std::string* release_operated_by_website();
  inline void set_allocated_operated_by_website(::std::string* operated_by_website);

  // optional uint32 route_color = 6;
  inline bool has_route_color() const;
  inline void clear_route_color();
  static const int kRouteColorFieldNumber = 6;
  inline ::google::protobuf::uint32 route_color() const;
  inline void set_route_color(::google::protobuf::uint32 value);

  // optional string route_desc = 7;
  inline bool has_route_desc() const;
  inline void clear_route_desc();
  static const int kRouteDescFieldNumber = 7;
  inline const ::std::string& route_desc() const;
  inline void set_route_desc(const ::std::string& value);
  inline void set_route_desc(const char* value);
  inline void set_route_desc(const char* value, size_t size);
  inline ::std::string* mutable_route_desc();
  inline ::std::string* release_route_desc();
  inline void set_allocated_route_desc(::std::string* route_desc);

  // optional string route_long_name = 8;
  inline bool has_route_long_name() const;
  inline void clear_route_long_name();
  static const int kRouteLongNameFieldNumber = 8;
  inline const ::std::string& route_long_name() const;
  inline void set_route_long_name(const ::std::string& value);
  inline void set_route_long_name(const char* value);
  inline void set_route_long_name(const char* value, size_t size);
  inline ::std::string* mutable_route_long_name();
  inline ::std::string* release_route_long_name();
  inline void set_allocated_route_long_name(::std::string* route_long_name);

  // optional uint32 route_text_color = 9;
  inline bool has_route_text_color() const;
  inline void clear_route_text_color();
  static const int kRouteTextColorFieldNumber = 9;
  inline ::google::protobuf::uint32 route_text_color() const;
  inline void set_route_text_color(::google::protobuf::uint32 value);

  // optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
  inline bool has_vehicle_type() const;
  inline void clear_vehicle_type();
  static const int kVehicleTypeFieldNumber = 10;
  inline ::valhalla::mjolnir::Transit_VehicleType vehicle_type() const;
  inline void set_vehicle_type(::valhalla::mjolnir::Transit_VehicleType value);

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit.Route)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_onestop_id();
  inline void clear_has_onestop_id();
  inline void set_has_operated_by_name();
  inline void clear_has_operated_by_name();
  inline void set_has_operated_by_onestop_id();
  inline void clear_has_operated_by_onestop_id();
  inline void set_has_operated_by_website();
  inline void clear_has_operated_by_website();
  inline void set_has_route_color();
  inline void clear_has_route_color();
  inline void set_has_route_desc();
  inline void clear_has_route_desc();
  inline void set_has_route_long_name();
  inline void clear_has_route_long_name();
  inline void set_has_route_text_color();
  inline void clear_has_route_text_color();
  inline void set_has_vehicle_type();
  inline void clear_has_vehicle_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* onestop_id_;
  ::std::string* operated_by_name_;
  ::std::string* operated_by_onestop_id_;
  ::std::string* operated_by_website_;
  ::std::string* route_desc_;
  ::google::protobuf::uint32 route_color_;
  ::google::protobuf::uint32 route_text_color_;
  ::std::string* route_long_name_;
  int vehicle_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_transit_2eproto();
  friend void protobuf_AssignDesc_transit_2eproto();
  friend void protobuf_ShutdownFile_transit_2eproto();

  void InitAsDefaultInstance();
  static Transit_Route* default_instance_;
};
// -------------------------------------------------------------------

class Transit_Shape : public ::google::protobuf::Message {
 public:
  Transit_Shape();
  virtual ~Transit_Shape();

  Transit_Shape(const Transit_Shape& from);

  inline Transit_Shape& operator=(const Transit_Shape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transit_Shape& default_instance();

  void Swap(Transit_Shape* other);

  // implements Message ----------------------------------------------

  Transit_Shape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transit_Shape& from);
  void MergeFrom(const Transit_Shape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 shape_id = 1;
  inline bool has_shape_id() const;
  inline void clear_shape_id();
  static const int kShapeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 shape_id() const;
  inline void set_shape_id(::google::protobuf::uint32 value);

  // optional bytes encoded_shape = 2;
  inline bool has_encoded_shape() const;
  inline void clear_encoded_shape();
  static const int kEncodedShapeFieldNumber = 2;
  inline const ::std::string& encoded_shape() const;
  inline void set_encoded_shape(const ::std::string& value);
  inline void set_encoded_shape(const char* value);
  inline void set_encoded_shape(const void* value, size_t size);
  inline ::std::string* mutable_encoded_shape();
  inline ::std::string* release_encoded_shape();
  inline void set_allocated_encoded_shape(::std::string* encoded_shape);

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit.Shape)
 private:
  inline void set_has_shape_id();
  inline void clear_has_shape_id();
  inline void set_has_encoded_shape();
  inline void clear_has_encoded_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* encoded_shape_;
  ::google::protobuf::uint32 shape_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_transit_2eproto();
  friend void protobuf_AssignDesc_transit_2eproto();
  friend void protobuf_ShutdownFile_transit_2eproto();

  void InitAsDefaultInstance();
  static Transit_Shape* default_instance_;
};
// -------------------------------------------------------------------

class Transit : public ::google::protobuf::Message {
 public:
  Transit();
  virtual ~Transit();

  Transit(const Transit& from);

  inline Transit& operator=(const Transit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transit& default_instance();

  void Swap(Transit* other);

  // implements Message ----------------------------------------------

  Transit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transit& from);
  void MergeFrom(const Transit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Transit_Stop Stop;
  typedef Transit_StopPair StopPair;
  typedef Transit_Route Route;
  typedef Transit_Shape Shape;

  typedef Transit_VehicleType VehicleType;
  static const VehicleType kTram = Transit_VehicleType_kTram;
  static const VehicleType kMetro = Transit_VehicleType_kMetro;
  static const VehicleType kRail = Transit_VehicleType_kRail;
  static const VehicleType kBus = Transit_VehicleType_kBus;
  static const VehicleType kFerry = Transit_VehicleType_kFerry;
  static const VehicleType kCableCar = Transit_VehicleType_kCableCar;
  static const VehicleType kGondola = Transit_VehicleType_kGondola;
  static const VehicleType kFunicular = Transit_VehicleType_kFunicular;
  static inline bool VehicleType_IsValid(int value) {
    return Transit_VehicleType_IsValid(value);
  }
  static const VehicleType VehicleType_MIN =
    Transit_VehicleType_VehicleType_MIN;
  static const VehicleType VehicleType_MAX =
    Transit_VehicleType_VehicleType_MAX;
  static const int VehicleType_ARRAYSIZE =
    Transit_VehicleType_VehicleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VehicleType_descriptor() {
    return Transit_VehicleType_descriptor();
  }
  static inline const ::std::string& VehicleType_Name(VehicleType value) {
    return Transit_VehicleType_Name(value);
  }
  static inline bool VehicleType_Parse(const ::std::string& name,
      VehicleType* value) {
    return Transit_VehicleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .valhalla.mjolnir.Transit.Stop stops = 1;
  inline int stops_size() const;
  inline void clear_stops();
  static const int kStopsFieldNumber = 1;
  inline const ::valhalla::mjolnir::Transit_Stop& stops(int index) const;
  inline ::valhalla::mjolnir::Transit_Stop* mutable_stops(int index);
  inline ::valhalla::mjolnir::Transit_Stop* add_stops();
  inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Stop >&
      stops() const;
  inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Stop >*
      mutable_stops();

  // repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
  inline int stop_pairs_size() const;
  inline void clear_stop_pairs();
  static const int kStopPairsFieldNumber = 2;
  inline const ::valhalla::mjolnir::Transit_StopPair& stop_pairs(int index) const;
  inline ::valhalla::mjolnir::Transit_StopPair* mutable_stop_pairs(int index);
  inline ::valhalla::mjolnir::Transit_StopPair* add_stop_pairs();
  inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_StopPair >&
      stop_pairs() const;
  inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_StopPair >*
      mutable_stop_pairs();

  // repeated .valhalla.mjolnir.Transit.Route routes = 3;
  inline int routes_size() const;
  inline void clear_routes();
  static const int kRoutesFieldNumber = 3;
  inline const ::valhalla::mjolnir::Transit_Route& routes(int index) const;
  inline ::valhalla::mjolnir::Transit_Route* mutable_routes(int index);
  inline ::valhalla::mjolnir::Transit_Route* add_routes();
  inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Route >&
      routes() const;
  inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Route >*
      mutable_routes();

  // repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
  inline int shapes_size() const;
  inline void clear_shapes();
  static const int kShapesFieldNumber = 4;
  inline const ::valhalla::mjolnir::Transit_Shape& shapes(int index) const;
  inline ::valhalla::mjolnir::Transit_Shape* mutable_shapes(int index);
  inline ::valhalla::mjolnir::Transit_Shape* add_shapes();
  inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Shape >&
      shapes() const;
  inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Shape >*
      mutable_shapes();

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Stop > stops_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_StopPair > stop_pairs_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Route > routes_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Shape > shapes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_transit_2eproto();
  friend void protobuf_AssignDesc_transit_2eproto();
  friend void protobuf_ShutdownFile_transit_2eproto();

  void InitAsDefaultInstance();
  static Transit* default_instance_;
};
// ===================================================================


// ===================================================================

// Transit_Stop

// optional float lon = 1;
inline bool Transit_Stop::has_lon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transit_Stop::set_has_lon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transit_Stop::clear_has_lon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transit_Stop::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline float Transit_Stop::lon() const {
  return lon_;
}
inline void Transit_Stop::set_lon(float value) {
  set_has_lon();
  lon_ = value;
}

// optional float lat = 2;
inline bool Transit_Stop::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transit_Stop::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transit_Stop::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transit_Stop::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline float Transit_Stop::lat() const {
  return lat_;
}
inline void Transit_Stop::set_lat(float value) {
  set_has_lat();
  lat_ = value;
}

// optional uint64 graphid = 3;
inline bool Transit_Stop::has_graphid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transit_Stop::set_has_graphid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transit_Stop::clear_has_graphid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transit_Stop::clear_graphid() {
  graphid_ = GOOGLE_ULONGLONG(0);
  clear_has_graphid();
}
inline ::google::protobuf::uint64 Transit_Stop::graphid() const {
  return graphid_;
}
inline void Transit_Stop::set_graphid(::google::protobuf::uint64 value) {
  set_has_graphid();
  graphid_ = value;
}

// optional string name = 4;
inline bool Transit_Stop::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transit_Stop::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transit_Stop::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transit_Stop::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Transit_Stop::name() const {
  return *name_;
}
inline void Transit_Stop::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Transit_Stop::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Transit_Stop::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_Stop::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Transit_Stop::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_Stop::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string onestop_id = 5;
inline bool Transit_Stop::has_onestop_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transit_Stop::set_has_onestop_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transit_Stop::clear_has_onestop_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transit_Stop::clear_onestop_id() {
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    onestop_id_->clear();
  }
  clear_has_onestop_id();
}
inline const ::std::string& Transit_Stop::onestop_id() const {
  return *onestop_id_;
}
inline void Transit_Stop::set_onestop_id(const ::std::string& value) {
  set_has_onestop_id();
  if (onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    onestop_id_ = new ::std::string;
  }
  onestop_id_->assign(value);
}
inline void Transit_Stop::set_onestop_id(const char* value) {
  set_has_onestop_id();
  if (onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    onestop_id_ = new ::std::string;
  }
  onestop_id_->assign(value);
}
inline void Transit_Stop::set_onestop_id(const char* value, size_t size) {
  set_has_onestop_id();
  if (onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    onestop_id_ = new ::std::string;
  }
  onestop_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_Stop::mutable_onestop_id() {
  set_has_onestop_id();
  if (onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    onestop_id_ = new ::std::string;
  }
  return onestop_id_;
}
inline ::std::string* Transit_Stop::release_onestop_id() {
  clear_has_onestop_id();
  if (onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = onestop_id_;
    onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_Stop::set_allocated_onestop_id(::std::string* onestop_id) {
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete onestop_id_;
  }
  if (onestop_id) {
    set_has_onestop_id();
    onestop_id_ = onestop_id;
  } else {
    clear_has_onestop_id();
    onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 osm_way_id = 6;
inline bool Transit_Stop::has_osm_way_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transit_Stop::set_has_osm_way_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transit_Stop::clear_has_osm_way_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transit_Stop::clear_osm_way_id() {
  osm_way_id_ = GOOGLE_ULONGLONG(0);
  clear_has_osm_way_id();
}
inline ::google::protobuf::uint64 Transit_Stop::osm_way_id() const {
  return osm_way_id_;
}
inline void Transit_Stop::set_osm_way_id(::google::protobuf::uint64 value) {
  set_has_osm_way_id();
  osm_way_id_ = value;
}

// optional uint32 timezone = 8;
inline bool Transit_Stop::has_timezone() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transit_Stop::set_has_timezone() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transit_Stop::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transit_Stop::clear_timezone() {
  timezone_ = 0u;
  clear_has_timezone();
}
inline ::google::protobuf::uint32 Transit_Stop::timezone() const {
  return timezone_;
}
inline void Transit_Stop::set_timezone(::google::protobuf::uint32 value) {
  set_has_timezone();
  timezone_ = value;
}

// optional bool wheelchair_boarding = 9;
inline bool Transit_Stop::has_wheelchair_boarding() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transit_Stop::set_has_wheelchair_boarding() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transit_Stop::clear_has_wheelchair_boarding() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transit_Stop::clear_wheelchair_boarding() {
  wheelchair_boarding_ = false;
  clear_has_wheelchair_boarding();
}
inline bool Transit_Stop::wheelchair_boarding() const {
  return wheelchair_boarding_;
}
inline void Transit_Stop::set_wheelchair_boarding(bool value) {
  set_has_wheelchair_boarding();
  wheelchair_boarding_ = value;
}

// -------------------------------------------------------------------

// Transit_StopPair

// optional bool bikes_allowed = 1;
inline bool Transit_StopPair::has_bikes_allowed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transit_StopPair::set_has_bikes_allowed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transit_StopPair::clear_has_bikes_allowed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transit_StopPair::clear_bikes_allowed() {
  bikes_allowed_ = false;
  clear_has_bikes_allowed();
}
inline bool Transit_StopPair::bikes_allowed() const {
  return bikes_allowed_;
}
inline void Transit_StopPair::set_bikes_allowed(bool value) {
  set_has_bikes_allowed();
  bikes_allowed_ = value;
}

// optional uint32 block_id = 2;
inline bool Transit_StopPair::has_block_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transit_StopPair::set_has_block_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transit_StopPair::clear_has_block_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transit_StopPair::clear_block_id() {
  block_id_ = 0u;
  clear_has_block_id();
}
inline ::google::protobuf::uint32 Transit_StopPair::block_id() const {
  return block_id_;
}
inline void Transit_StopPair::set_block_id(::google::protobuf::uint32 value) {
  set_has_block_id();
  block_id_ = value;
}

// optional uint32 destination_arrival_time = 3;
inline bool Transit_StopPair::has_destination_arrival_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transit_StopPair::set_has_destination_arrival_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transit_StopPair::clear_has_destination_arrival_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transit_StopPair::clear_destination_arrival_time() {
  destination_arrival_time_ = 0u;
  clear_has_destination_arrival_time();
}
inline ::google::protobuf::uint32 Transit_StopPair::destination_arrival_time() const {
  return destination_arrival_time_;
}
inline void Transit_StopPair::set_destination_arrival_time(::google::protobuf::uint32 value) {
  set_has_destination_arrival_time();
  destination_arrival_time_ = value;
}

// optional uint64 destination_graphid = 4;
inline bool Transit_StopPair::has_destination_graphid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transit_StopPair::set_has_destination_graphid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transit_StopPair::clear_has_destination_graphid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transit_StopPair::clear_destination_graphid() {
  destination_graphid_ = GOOGLE_ULONGLONG(0);
  clear_has_destination_graphid();
}
inline ::google::protobuf::uint64 Transit_StopPair::destination_graphid() const {
  return destination_graphid_;
}
inline void Transit_StopPair::set_destination_graphid(::google::protobuf::uint64 value) {
  set_has_destination_graphid();
  destination_graphid_ = value;
}

// optional string destination_onestop_id = 5;
inline bool Transit_StopPair::has_destination_onestop_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transit_StopPair::set_has_destination_onestop_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transit_StopPair::clear_has_destination_onestop_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transit_StopPair::clear_destination_onestop_id() {
  if (destination_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    destination_onestop_id_->clear();
  }
  clear_has_destination_onestop_id();
}
inline const ::std::string& Transit_StopPair::destination_onestop_id() const {
  return *destination_onestop_id_;
}
inline void Transit_StopPair::set_destination_onestop_id(const ::std::string& value) {
  set_has_destination_onestop_id();
  if (destination_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    destination_onestop_id_ = new ::std::string;
  }
  destination_onestop_id_->assign(value);
}
inline void Transit_StopPair::set_destination_onestop_id(const char* value) {
  set_has_destination_onestop_id();
  if (destination_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    destination_onestop_id_ = new ::std::string;
  }
  destination_onestop_id_->assign(value);
}
inline void Transit_StopPair::set_destination_onestop_id(const char* value, size_t size) {
  set_has_destination_onestop_id();
  if (destination_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    destination_onestop_id_ = new ::std::string;
  }
  destination_onestop_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_StopPair::mutable_destination_onestop_id() {
  set_has_destination_onestop_id();
  if (destination_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    destination_onestop_id_ = new ::std::string;
  }
  return destination_onestop_id_;
}
inline ::std::string* Transit_StopPair::release_destination_onestop_id() {
  clear_has_destination_onestop_id();
  if (destination_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_onestop_id_;
    destination_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_StopPair::set_allocated_destination_onestop_id(::std::string* destination_onestop_id) {
  if (destination_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete destination_onestop_id_;
  }
  if (destination_onestop_id) {
    set_has_destination_onestop_id();
    destination_onestop_id_ = destination_onestop_id;
  } else {
    clear_has_destination_onestop_id();
    destination_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string operated_by_onestop_id = 6;
inline bool Transit_StopPair::has_operated_by_onestop_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transit_StopPair::set_has_operated_by_onestop_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transit_StopPair::clear_has_operated_by_onestop_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transit_StopPair::clear_operated_by_onestop_id() {
  if (operated_by_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    operated_by_onestop_id_->clear();
  }
  clear_has_operated_by_onestop_id();
}
inline const ::std::string& Transit_StopPair::operated_by_onestop_id() const {
  return *operated_by_onestop_id_;
}
inline void Transit_StopPair::set_operated_by_onestop_id(const ::std::string& value) {
  set_has_operated_by_onestop_id();
  if (operated_by_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_onestop_id_ = new ::std::string;
  }
  operated_by_onestop_id_->assign(value);
}
inline void Transit_StopPair::set_operated_by_onestop_id(const char* value) {
  set_has_operated_by_onestop_id();
  if (operated_by_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_onestop_id_ = new ::std::string;
  }
  operated_by_onestop_id_->assign(value);
}
inline void Transit_StopPair::set_operated_by_onestop_id(const char* value, size_t size) {
  set_has_operated_by_onestop_id();
  if (operated_by_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_onestop_id_ = new ::std::string;
  }
  operated_by_onestop_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_StopPair::mutable_operated_by_onestop_id() {
  set_has_operated_by_onestop_id();
  if (operated_by_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_onestop_id_ = new ::std::string;
  }
  return operated_by_onestop_id_;
}
inline ::std::string* Transit_StopPair::release_operated_by_onestop_id() {
  clear_has_operated_by_onestop_id();
  if (operated_by_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = operated_by_onestop_id_;
    operated_by_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_StopPair::set_allocated_operated_by_onestop_id(::std::string* operated_by_onestop_id) {
  if (operated_by_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete operated_by_onestop_id_;
  }
  if (operated_by_onestop_id) {
    set_has_operated_by_onestop_id();
    operated_by_onestop_id_ = operated_by_onestop_id;
  } else {
    clear_has_operated_by_onestop_id();
    operated_by_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 origin_departure_time = 7;
inline bool Transit_StopPair::has_origin_departure_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transit_StopPair::set_has_origin_departure_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transit_StopPair::clear_has_origin_departure_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transit_StopPair::clear_origin_departure_time() {
  origin_departure_time_ = 0u;
  clear_has_origin_departure_time();
}
inline ::google::protobuf::uint32 Transit_StopPair::origin_departure_time() const {
  return origin_departure_time_;
}
inline void Transit_StopPair::set_origin_departure_time(::google::protobuf::uint32 value) {
  set_has_origin_departure_time();
  origin_departure_time_ = value;
}

// optional uint64 origin_graphid = 8;
inline bool Transit_StopPair::has_origin_graphid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transit_StopPair::set_has_origin_graphid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transit_StopPair::clear_has_origin_graphid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transit_StopPair::clear_origin_graphid() {
  origin_graphid_ = GOOGLE_ULONGLONG(0);
  clear_has_origin_graphid();
}
inline ::google::protobuf::uint64 Transit_StopPair::origin_graphid() const {
  return origin_graphid_;
}
inline void Transit_StopPair::set_origin_graphid(::google::protobuf::uint64 value) {
  set_has_origin_graphid();
  origin_graphid_ = value;
}

// optional string origin_onestop_id = 9;
inline bool Transit_StopPair::has_origin_onestop_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Transit_StopPair::set_has_origin_onestop_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Transit_StopPair::clear_has_origin_onestop_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Transit_StopPair::clear_origin_onestop_id() {
  if (origin_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    origin_onestop_id_->clear();
  }
  clear_has_origin_onestop_id();
}
inline const ::std::string& Transit_StopPair::origin_onestop_id() const {
  return *origin_onestop_id_;
}
inline void Transit_StopPair::set_origin_onestop_id(const ::std::string& value) {
  set_has_origin_onestop_id();
  if (origin_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    origin_onestop_id_ = new ::std::string;
  }
  origin_onestop_id_->assign(value);
}
inline void Transit_StopPair::set_origin_onestop_id(const char* value) {
  set_has_origin_onestop_id();
  if (origin_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    origin_onestop_id_ = new ::std::string;
  }
  origin_onestop_id_->assign(value);
}
inline void Transit_StopPair::set_origin_onestop_id(const char* value, size_t size) {
  set_has_origin_onestop_id();
  if (origin_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    origin_onestop_id_ = new ::std::string;
  }
  origin_onestop_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_StopPair::mutable_origin_onestop_id() {
  set_has_origin_onestop_id();
  if (origin_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    origin_onestop_id_ = new ::std::string;
  }
  return origin_onestop_id_;
}
inline ::std::string* Transit_StopPair::release_origin_onestop_id() {
  clear_has_origin_onestop_id();
  if (origin_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = origin_onestop_id_;
    origin_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_StopPair::set_allocated_origin_onestop_id(::std::string* origin_onestop_id) {
  if (origin_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete origin_onestop_id_;
  }
  if (origin_onestop_id) {
    set_has_origin_onestop_id();
    origin_onestop_id_ = origin_onestop_id;
  } else {
    clear_has_origin_onestop_id();
    origin_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 route_index = 10;
inline bool Transit_StopPair::has_route_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Transit_StopPair::set_has_route_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Transit_StopPair::clear_has_route_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Transit_StopPair::clear_route_index() {
  route_index_ = 0u;
  clear_has_route_index();
}
inline ::google::protobuf::uint32 Transit_StopPair::route_index() const {
  return route_index_;
}
inline void Transit_StopPair::set_route_index(::google::protobuf::uint32 value) {
  set_has_route_index();
  route_index_ = value;
}

// repeated uint32 service_added_dates = 11;
inline int Transit_StopPair::service_added_dates_size() const {
  return service_added_dates_.size();
}
inline void Transit_StopPair::clear_service_added_dates() {
  service_added_dates_.Clear();
}
inline ::google::protobuf::uint32 Transit_StopPair::service_added_dates(int index) const {
  return service_added_dates_.Get(index);
}
inline void Transit_StopPair::set_service_added_dates(int index, ::google::protobuf::uint32 value) {
  service_added_dates_.Set(index, value);
}
inline void Transit_StopPair::add_service_added_dates(::google::protobuf::uint32 value) {
  service_added_dates_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Transit_StopPair::service_added_dates() const {
  return service_added_dates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Transit_StopPair::mutable_service_added_dates() {
  return &service_added_dates_;
}

// repeated bool service_days_of_week = 12;
inline int Transit_StopPair::service_days_of_week_size() const {
  return service_days_of_week_.size();
}
inline void Transit_StopPair::clear_service_days_of_week() {
  service_days_of_week_.Clear();
}
inline bool Transit_StopPair::service_days_of_week(int index) const {
  return service_days_of_week_.Get(index);
}
inline void Transit_StopPair::set_service_days_of_week(int index, bool value) {
  service_days_of_week_.Set(index, value);
}
inline void Transit_StopPair::add_service_days_of_week(bool value) {
  service_days_of_week_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
Transit_StopPair::service_days_of_week() const {
  return service_days_of_week_;
}
inline ::google::protobuf::RepeatedField< bool >*
Transit_StopPair::mutable_service_days_of_week() {
  return &service_days_of_week_;
}

// optional uint32 service_end_date = 13;
inline bool Transit_StopPair::has_service_end_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Transit_StopPair::set_has_service_end_date() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Transit_StopPair::clear_has_service_end_date() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Transit_StopPair::clear_service_end_date() {
  service_end_date_ = 0u;
  clear_has_service_end_date();
}
inline ::google::protobuf::uint32 Transit_StopPair::service_end_date() const {
  return service_end_date_;
}
inline void Transit_StopPair::set_service_end_date(::google::protobuf::uint32 value) {
  set_has_service_end_date();
  service_end_date_ = value;
}

// repeated uint32 service_except_dates = 14;
inline int Transit_StopPair::service_except_dates_size() const {
  return service_except_dates_.size();
}
inline void Transit_StopPair::clear_service_except_dates() {
  service_except_dates_.Clear();
}
inline ::google::protobuf::uint32 Transit_StopPair::service_except_dates(int index) const {
  return service_except_dates_.Get(index);
}
inline void Transit_StopPair::set_service_except_dates(int index, ::google::protobuf::uint32 value) {
  service_except_dates_.Set(index, value);
}
inline void Transit_StopPair::add_service_except_dates(::google::protobuf::uint32 value) {
  service_except_dates_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Transit_StopPair::service_except_dates() const {
  return service_except_dates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Transit_StopPair::mutable_service_except_dates() {
  return &service_except_dates_;
}

// optional uint32 service_start_date = 15;
inline bool Transit_StopPair::has_service_start_date() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Transit_StopPair::set_has_service_start_date() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Transit_StopPair::clear_has_service_start_date() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Transit_StopPair::clear_service_start_date() {
  service_start_date_ = 0u;
  clear_has_service_start_date();
}
inline ::google::protobuf::uint32 Transit_StopPair::service_start_date() const {
  return service_start_date_;
}
inline void Transit_StopPair::set_service_start_date(::google::protobuf::uint32 value) {
  set_has_service_start_date();
  service_start_date_ = value;
}

// optional string trip_headsign = 16;
inline bool Transit_StopPair::has_trip_headsign() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Transit_StopPair::set_has_trip_headsign() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Transit_StopPair::clear_has_trip_headsign() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Transit_StopPair::clear_trip_headsign() {
  if (trip_headsign_ != &::google::protobuf::internal::kEmptyString) {
    trip_headsign_->clear();
  }
  clear_has_trip_headsign();
}
inline const ::std::string& Transit_StopPair::trip_headsign() const {
  return *trip_headsign_;
}
inline void Transit_StopPair::set_trip_headsign(const ::std::string& value) {
  set_has_trip_headsign();
  if (trip_headsign_ == &::google::protobuf::internal::kEmptyString) {
    trip_headsign_ = new ::std::string;
  }
  trip_headsign_->assign(value);
}
inline void Transit_StopPair::set_trip_headsign(const char* value) {
  set_has_trip_headsign();
  if (trip_headsign_ == &::google::protobuf::internal::kEmptyString) {
    trip_headsign_ = new ::std::string;
  }
  trip_headsign_->assign(value);
}
inline void Transit_StopPair::set_trip_headsign(const char* value, size_t size) {
  set_has_trip_headsign();
  if (trip_headsign_ == &::google::protobuf::internal::kEmptyString) {
    trip_headsign_ = new ::std::string;
  }
  trip_headsign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_StopPair::mutable_trip_headsign() {
  set_has_trip_headsign();
  if (trip_headsign_ == &::google::protobuf::internal::kEmptyString) {
    trip_headsign_ = new ::std::string;
  }
  return trip_headsign_;
}
inline ::std::string* Transit_StopPair::release_trip_headsign() {
  clear_has_trip_headsign();
  if (trip_headsign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trip_headsign_;
    trip_headsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_StopPair::set_allocated_trip_headsign(::std::string* trip_headsign) {
  if (trip_headsign_ != &::google::protobuf::internal::kEmptyString) {
    delete trip_headsign_;
  }
  if (trip_headsign) {
    set_has_trip_headsign();
    trip_headsign_ = trip_headsign;
  } else {
    clear_has_trip_headsign();
    trip_headsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 trip_id = 17;
inline bool Transit_StopPair::has_trip_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Transit_StopPair::set_has_trip_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Transit_StopPair::clear_has_trip_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Transit_StopPair::clear_trip_id() {
  trip_id_ = 0u;
  clear_has_trip_id();
}
inline ::google::protobuf::uint32 Transit_StopPair::trip_id() const {
  return trip_id_;
}
inline void Transit_StopPair::set_trip_id(::google::protobuf::uint32 value) {
  set_has_trip_id();
  trip_id_ = value;
}

// optional bool wheelchair_accessible = 18;
inline bool Transit_StopPair::has_wheelchair_accessible() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Transit_StopPair::set_has_wheelchair_accessible() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Transit_StopPair::clear_has_wheelchair_accessible() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Transit_StopPair::clear_wheelchair_accessible() {
  wheelchair_accessible_ = false;
  clear_has_wheelchair_accessible();
}
inline bool Transit_StopPair::wheelchair_accessible() const {
  return wheelchair_accessible_;
}
inline void Transit_StopPair::set_wheelchair_accessible(bool value) {
  set_has_wheelchair_accessible();
  wheelchair_accessible_ = value;
}

// optional uint32 line_id = 19;
inline bool Transit_StopPair::has_line_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Transit_StopPair::set_has_line_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Transit_StopPair::clear_has_line_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Transit_StopPair::clear_line_id() {
  line_id_ = 0u;
  clear_has_line_id();
}
inline ::google::protobuf::uint32 Transit_StopPair::line_id() const {
  return line_id_;
}
inline void Transit_StopPair::set_line_id(::google::protobuf::uint32 value) {
  set_has_line_id();
  line_id_ = value;
}

// optional uint32 shape_id = 20;
inline bool Transit_StopPair::has_shape_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Transit_StopPair::set_has_shape_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Transit_StopPair::clear_has_shape_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Transit_StopPair::clear_shape_id() {
  shape_id_ = 0u;
  clear_has_shape_id();
}
inline ::google::protobuf::uint32 Transit_StopPair::shape_id() const {
  return shape_id_;
}
inline void Transit_StopPair::set_shape_id(::google::protobuf::uint32 value) {
  set_has_shape_id();
  shape_id_ = value;
}

// optional float origin_dist_traveled = 21;
inline bool Transit_StopPair::has_origin_dist_traveled() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Transit_StopPair::set_has_origin_dist_traveled() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Transit_StopPair::clear_has_origin_dist_traveled() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Transit_StopPair::clear_origin_dist_traveled() {
  origin_dist_traveled_ = 0;
  clear_has_origin_dist_traveled();
}
inline float Transit_StopPair::origin_dist_traveled() const {
  return origin_dist_traveled_;
}
inline void Transit_StopPair::set_origin_dist_traveled(float value) {
  set_has_origin_dist_traveled();
  origin_dist_traveled_ = value;
}

// optional float destination_dist_traveled = 22;
inline bool Transit_StopPair::has_destination_dist_traveled() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Transit_StopPair::set_has_destination_dist_traveled() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Transit_StopPair::clear_has_destination_dist_traveled() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Transit_StopPair::clear_destination_dist_traveled() {
  destination_dist_traveled_ = 0;
  clear_has_destination_dist_traveled();
}
inline float Transit_StopPair::destination_dist_traveled() const {
  return destination_dist_traveled_;
}
inline void Transit_StopPair::set_destination_dist_traveled(float value) {
  set_has_destination_dist_traveled();
  destination_dist_traveled_ = value;
}

// optional uint32 frequency_end_time = 23;
inline bool Transit_StopPair::has_frequency_end_time() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Transit_StopPair::set_has_frequency_end_time() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Transit_StopPair::clear_has_frequency_end_time() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Transit_StopPair::clear_frequency_end_time() {
  frequency_end_time_ = 0u;
  clear_has_frequency_end_time();
}
inline ::google::protobuf::uint32 Transit_StopPair::frequency_end_time() const {
  return frequency_end_time_;
}
inline void Transit_StopPair::set_frequency_end_time(::google::protobuf::uint32 value) {
  set_has_frequency_end_time();
  frequency_end_time_ = value;
}

// optional uint32 frequency_headway_seconds = 24;
inline bool Transit_StopPair::has_frequency_headway_seconds() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Transit_StopPair::set_has_frequency_headway_seconds() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Transit_StopPair::clear_has_frequency_headway_seconds() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Transit_StopPair::clear_frequency_headway_seconds() {
  frequency_headway_seconds_ = 0u;
  clear_has_frequency_headway_seconds();
}
inline ::google::protobuf::uint32 Transit_StopPair::frequency_headway_seconds() const {
  return frequency_headway_seconds_;
}
inline void Transit_StopPair::set_frequency_headway_seconds(::google::protobuf::uint32 value) {
  set_has_frequency_headway_seconds();
  frequency_headway_seconds_ = value;
}

// -------------------------------------------------------------------

// Transit_Route

// optional string name = 1;
inline bool Transit_Route::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transit_Route::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transit_Route::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transit_Route::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Transit_Route::name() const {
  return *name_;
}
inline void Transit_Route::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Transit_Route::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Transit_Route::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_Route::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Transit_Route::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_Route::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string onestop_id = 2;
inline bool Transit_Route::has_onestop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transit_Route::set_has_onestop_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transit_Route::clear_has_onestop_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transit_Route::clear_onestop_id() {
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    onestop_id_->clear();
  }
  clear_has_onestop_id();
}
inline const ::std::string& Transit_Route::onestop_id() const {
  return *onestop_id_;
}
inline void Transit_Route::set_onestop_id(const ::std::string& value) {
  set_has_onestop_id();
  if (onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    onestop_id_ = new ::std::string;
  }
  onestop_id_->assign(value);
}
inline void Transit_Route::set_onestop_id(const char* value) {
  set_has_onestop_id();
  if (onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    onestop_id_ = new ::std::string;
  }
  onestop_id_->assign(value);
}
inline void Transit_Route::set_onestop_id(const char* value, size_t size) {
  set_has_onestop_id();
  if (onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    onestop_id_ = new ::std::string;
  }
  onestop_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_Route::mutable_onestop_id() {
  set_has_onestop_id();
  if (onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    onestop_id_ = new ::std::string;
  }
  return onestop_id_;
}
inline ::std::string* Transit_Route::release_onestop_id() {
  clear_has_onestop_id();
  if (onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = onestop_id_;
    onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_Route::set_allocated_onestop_id(::std::string* onestop_id) {
  if (onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete onestop_id_;
  }
  if (onestop_id) {
    set_has_onestop_id();
    onestop_id_ = onestop_id;
  } else {
    clear_has_onestop_id();
    onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string operated_by_name = 3;
inline bool Transit_Route::has_operated_by_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transit_Route::set_has_operated_by_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transit_Route::clear_has_operated_by_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transit_Route::clear_operated_by_name() {
  if (operated_by_name_ != &::google::protobuf::internal::kEmptyString) {
    operated_by_name_->clear();
  }
  clear_has_operated_by_name();
}
inline const ::std::string& Transit_Route::operated_by_name() const {
  return *operated_by_name_;
}
inline void Transit_Route::set_operated_by_name(const ::std::string& value) {
  set_has_operated_by_name();
  if (operated_by_name_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_name_ = new ::std::string;
  }
  operated_by_name_->assign(value);
}
inline void Transit_Route::set_operated_by_name(const char* value) {
  set_has_operated_by_name();
  if (operated_by_name_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_name_ = new ::std::string;
  }
  operated_by_name_->assign(value);
}
inline void Transit_Route::set_operated_by_name(const char* value, size_t size) {
  set_has_operated_by_name();
  if (operated_by_name_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_name_ = new ::std::string;
  }
  operated_by_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_Route::mutable_operated_by_name() {
  set_has_operated_by_name();
  if (operated_by_name_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_name_ = new ::std::string;
  }
  return operated_by_name_;
}
inline ::std::string* Transit_Route::release_operated_by_name() {
  clear_has_operated_by_name();
  if (operated_by_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = operated_by_name_;
    operated_by_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_Route::set_allocated_operated_by_name(::std::string* operated_by_name) {
  if (operated_by_name_ != &::google::protobuf::internal::kEmptyString) {
    delete operated_by_name_;
  }
  if (operated_by_name) {
    set_has_operated_by_name();
    operated_by_name_ = operated_by_name;
  } else {
    clear_has_operated_by_name();
    operated_by_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string operated_by_onestop_id = 4;
inline bool Transit_Route::has_operated_by_onestop_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transit_Route::set_has_operated_by_onestop_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transit_Route::clear_has_operated_by_onestop_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transit_Route::clear_operated_by_onestop_id() {
  if (operated_by_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    operated_by_onestop_id_->clear();
  }
  clear_has_operated_by_onestop_id();
}
inline const ::std::string& Transit_Route::operated_by_onestop_id() const {
  return *operated_by_onestop_id_;
}
inline void Transit_Route::set_operated_by_onestop_id(const ::std::string& value) {
  set_has_operated_by_onestop_id();
  if (operated_by_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_onestop_id_ = new ::std::string;
  }
  operated_by_onestop_id_->assign(value);
}
inline void Transit_Route::set_operated_by_onestop_id(const char* value) {
  set_has_operated_by_onestop_id();
  if (operated_by_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_onestop_id_ = new ::std::string;
  }
  operated_by_onestop_id_->assign(value);
}
inline void Transit_Route::set_operated_by_onestop_id(const char* value, size_t size) {
  set_has_operated_by_onestop_id();
  if (operated_by_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_onestop_id_ = new ::std::string;
  }
  operated_by_onestop_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_Route::mutable_operated_by_onestop_id() {
  set_has_operated_by_onestop_id();
  if (operated_by_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_onestop_id_ = new ::std::string;
  }
  return operated_by_onestop_id_;
}
inline ::std::string* Transit_Route::release_operated_by_onestop_id() {
  clear_has_operated_by_onestop_id();
  if (operated_by_onestop_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = operated_by_onestop_id_;
    operated_by_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_Route::set_allocated_operated_by_onestop_id(::std::string* operated_by_onestop_id) {
  if (operated_by_onestop_id_ != &::google::protobuf::internal::kEmptyString) {
    delete operated_by_onestop_id_;
  }
  if (operated_by_onestop_id) {
    set_has_operated_by_onestop_id();
    operated_by_onestop_id_ = operated_by_onestop_id;
  } else {
    clear_has_operated_by_onestop_id();
    operated_by_onestop_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string operated_by_website = 5;
inline bool Transit_Route::has_operated_by_website() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transit_Route::set_has_operated_by_website() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transit_Route::clear_has_operated_by_website() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transit_Route::clear_operated_by_website() {
  if (operated_by_website_ != &::google::protobuf::internal::kEmptyString) {
    operated_by_website_->clear();
  }
  clear_has_operated_by_website();
}
inline const ::std::string& Transit_Route::operated_by_website() const {
  return *operated_by_website_;
}
inline void Transit_Route::set_operated_by_website(const ::std::string& value) {
  set_has_operated_by_website();
  if (operated_by_website_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_website_ = new ::std::string;
  }
  operated_by_website_->assign(value);
}
inline void Transit_Route::set_operated_by_website(const char* value) {
  set_has_operated_by_website();
  if (operated_by_website_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_website_ = new ::std::string;
  }
  operated_by_website_->assign(value);
}
inline void Transit_Route::set_operated_by_website(const char* value, size_t size) {
  set_has_operated_by_website();
  if (operated_by_website_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_website_ = new ::std::string;
  }
  operated_by_website_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_Route::mutable_operated_by_website() {
  set_has_operated_by_website();
  if (operated_by_website_ == &::google::protobuf::internal::kEmptyString) {
    operated_by_website_ = new ::std::string;
  }
  return operated_by_website_;
}
inline ::std::string* Transit_Route::release_operated_by_website() {
  clear_has_operated_by_website();
  if (operated_by_website_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = operated_by_website_;
    operated_by_website_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_Route::set_allocated_operated_by_website(::std::string* operated_by_website) {
  if (operated_by_website_ != &::google::protobuf::internal::kEmptyString) {
    delete operated_by_website_;
  }
  if (operated_by_website) {
    set_has_operated_by_website();
    operated_by_website_ = operated_by_website;
  } else {
    clear_has_operated_by_website();
    operated_by_website_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 route_color = 6;
inline bool Transit_Route::has_route_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transit_Route::set_has_route_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transit_Route::clear_has_route_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transit_Route::clear_route_color() {
  route_color_ = 0u;
  clear_has_route_color();
}
inline ::google::protobuf::uint32 Transit_Route::route_color() const {
  return route_color_;
}
inline void Transit_Route::set_route_color(::google::protobuf::uint32 value) {
  set_has_route_color();
  route_color_ = value;
}

// optional string route_desc = 7;
inline bool Transit_Route::has_route_desc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transit_Route::set_has_route_desc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transit_Route::clear_has_route_desc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transit_Route::clear_route_desc() {
  if (route_desc_ != &::google::protobuf::internal::kEmptyString) {
    route_desc_->clear();
  }
  clear_has_route_desc();
}
inline const ::std::string& Transit_Route::route_desc() const {
  return *route_desc_;
}
inline void Transit_Route::set_route_desc(const ::std::string& value) {
  set_has_route_desc();
  if (route_desc_ == &::google::protobuf::internal::kEmptyString) {
    route_desc_ = new ::std::string;
  }
  route_desc_->assign(value);
}
inline void Transit_Route::set_route_desc(const char* value) {
  set_has_route_desc();
  if (route_desc_ == &::google::protobuf::internal::kEmptyString) {
    route_desc_ = new ::std::string;
  }
  route_desc_->assign(value);
}
inline void Transit_Route::set_route_desc(const char* value, size_t size) {
  set_has_route_desc();
  if (route_desc_ == &::google::protobuf::internal::kEmptyString) {
    route_desc_ = new ::std::string;
  }
  route_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_Route::mutable_route_desc() {
  set_has_route_desc();
  if (route_desc_ == &::google::protobuf::internal::kEmptyString) {
    route_desc_ = new ::std::string;
  }
  return route_desc_;
}
inline ::std::string* Transit_Route::release_route_desc() {
  clear_has_route_desc();
  if (route_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = route_desc_;
    route_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_Route::set_allocated_route_desc(::std::string* route_desc) {
  if (route_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete route_desc_;
  }
  if (route_desc) {
    set_has_route_desc();
    route_desc_ = route_desc;
  } else {
    clear_has_route_desc();
    route_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string route_long_name = 8;
inline bool Transit_Route::has_route_long_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transit_Route::set_has_route_long_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transit_Route::clear_has_route_long_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transit_Route::clear_route_long_name() {
  if (route_long_name_ != &::google::protobuf::internal::kEmptyString) {
    route_long_name_->clear();
  }
  clear_has_route_long_name();
}
inline const ::std::string& Transit_Route::route_long_name() const {
  return *route_long_name_;
}
inline void Transit_Route::set_route_long_name(const ::std::string& value) {
  set_has_route_long_name();
  if (route_long_name_ == &::google::protobuf::internal::kEmptyString) {
    route_long_name_ = new ::std::string;
  }
  route_long_name_->assign(value);
}
inline void Transit_Route::set_route_long_name(const char* value) {
  set_has_route_long_name();
  if (route_long_name_ == &::google::protobuf::internal::kEmptyString) {
    route_long_name_ = new ::std::string;
  }
  route_long_name_->assign(value);
}
inline void Transit_Route::set_route_long_name(const char* value, size_t size) {
  set_has_route_long_name();
  if (route_long_name_ == &::google::protobuf::internal::kEmptyString) {
    route_long_name_ = new ::std::string;
  }
  route_long_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_Route::mutable_route_long_name() {
  set_has_route_long_name();
  if (route_long_name_ == &::google::protobuf::internal::kEmptyString) {
    route_long_name_ = new ::std::string;
  }
  return route_long_name_;
}
inline ::std::string* Transit_Route::release_route_long_name() {
  clear_has_route_long_name();
  if (route_long_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = route_long_name_;
    route_long_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_Route::set_allocated_route_long_name(::std::string* route_long_name) {
  if (route_long_name_ != &::google::protobuf::internal::kEmptyString) {
    delete route_long_name_;
  }
  if (route_long_name) {
    set_has_route_long_name();
    route_long_name_ = route_long_name;
  } else {
    clear_has_route_long_name();
    route_long_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 route_text_color = 9;
inline bool Transit_Route::has_route_text_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Transit_Route::set_has_route_text_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Transit_Route::clear_has_route_text_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Transit_Route::clear_route_text_color() {
  route_text_color_ = 0u;
  clear_has_route_text_color();
}
inline ::google::protobuf::uint32 Transit_Route::route_text_color() const {
  return route_text_color_;
}
inline void Transit_Route::set_route_text_color(::google::protobuf::uint32 value) {
  set_has_route_text_color();
  route_text_color_ = value;
}

// optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
inline bool Transit_Route::has_vehicle_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Transit_Route::set_has_vehicle_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Transit_Route::clear_has_vehicle_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Transit_Route::clear_vehicle_type() {
  vehicle_type_ = 0;
  clear_has_vehicle_type();
}
inline ::valhalla::mjolnir::Transit_VehicleType Transit_Route::vehicle_type() const {
  return static_cast< ::valhalla::mjolnir::Transit_VehicleType >(vehicle_type_);
}
inline void Transit_Route::set_vehicle_type(::valhalla::mjolnir::Transit_VehicleType value) {
  assert(::valhalla::mjolnir::Transit_VehicleType_IsValid(value));
  set_has_vehicle_type();
  vehicle_type_ = value;
}

// -------------------------------------------------------------------

// Transit_Shape

// optional uint32 shape_id = 1;
inline bool Transit_Shape::has_shape_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transit_Shape::set_has_shape_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transit_Shape::clear_has_shape_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transit_Shape::clear_shape_id() {
  shape_id_ = 0u;
  clear_has_shape_id();
}
inline ::google::protobuf::uint32 Transit_Shape::shape_id() const {
  return shape_id_;
}
inline void Transit_Shape::set_shape_id(::google::protobuf::uint32 value) {
  set_has_shape_id();
  shape_id_ = value;
}

// optional bytes encoded_shape = 2;
inline bool Transit_Shape::has_encoded_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transit_Shape::set_has_encoded_shape() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transit_Shape::clear_has_encoded_shape() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transit_Shape::clear_encoded_shape() {
  if (encoded_shape_ != &::google::protobuf::internal::kEmptyString) {
    encoded_shape_->clear();
  }
  clear_has_encoded_shape();
}
inline const ::std::string& Transit_Shape::encoded_shape() const {
  return *encoded_shape_;
}
inline void Transit_Shape::set_encoded_shape(const ::std::string& value) {
  set_has_encoded_shape();
  if (encoded_shape_ == &::google::protobuf::internal::kEmptyString) {
    encoded_shape_ = new ::std::string;
  }
  encoded_shape_->assign(value);
}
inline void Transit_Shape::set_encoded_shape(const char* value) {
  set_has_encoded_shape();
  if (encoded_shape_ == &::google::protobuf::internal::kEmptyString) {
    encoded_shape_ = new ::std::string;
  }
  encoded_shape_->assign(value);
}
inline void Transit_Shape::set_encoded_shape(const void* value, size_t size) {
  set_has_encoded_shape();
  if (encoded_shape_ == &::google::protobuf::internal::kEmptyString) {
    encoded_shape_ = new ::std::string;
  }
  encoded_shape_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Transit_Shape::mutable_encoded_shape() {
  set_has_encoded_shape();
  if (encoded_shape_ == &::google::protobuf::internal::kEmptyString) {
    encoded_shape_ = new ::std::string;
  }
  return encoded_shape_;
}
inline ::std::string* Transit_Shape::release_encoded_shape() {
  clear_has_encoded_shape();
  if (encoded_shape_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = encoded_shape_;
    encoded_shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Transit_Shape::set_allocated_encoded_shape(::std::string* encoded_shape) {
  if (encoded_shape_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_shape_;
  }
  if (encoded_shape) {
    set_has_encoded_shape();
    encoded_shape_ = encoded_shape;
  } else {
    clear_has_encoded_shape();
    encoded_shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Transit

// repeated .valhalla.mjolnir.Transit.Stop stops = 1;
inline int Transit::stops_size() const {
  return stops_.size();
}
inline void Transit::clear_stops() {
  stops_.Clear();
}
inline const ::valhalla::mjolnir::Transit_Stop& Transit::stops(int index) const {
  return stops_.Get(index);
}
inline ::valhalla::mjolnir::Transit_Stop* Transit::mutable_stops(int index) {
  return stops_.Mutable(index);
}
inline ::valhalla::mjolnir::Transit_Stop* Transit::add_stops() {
  return stops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Stop >&
Transit::stops() const {
  return stops_;
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Stop >*
Transit::mutable_stops() {
  return &stops_;
}

// repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
inline int Transit::stop_pairs_size() const {
  return stop_pairs_.size();
}
inline void Transit::clear_stop_pairs() {
  stop_pairs_.Clear();
}
inline const ::valhalla::mjolnir::Transit_StopPair& Transit::stop_pairs(int index) const {
  return stop_pairs_.Get(index);
}
inline ::valhalla::mjolnir::Transit_StopPair* Transit::mutable_stop_pairs(int index) {
  return stop_pairs_.Mutable(index);
}
inline ::valhalla::mjolnir::Transit_StopPair* Transit::add_stop_pairs() {
  return stop_pairs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_StopPair >&
Transit::stop_pairs() const {
  return stop_pairs_;
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_StopPair >*
Transit::mutable_stop_pairs() {
  return &stop_pairs_;
}

// repeated .valhalla.mjolnir.Transit.Route routes = 3;
inline int Transit::routes_size() const {
  return routes_.size();
}
inline void Transit::clear_routes() {
  routes_.Clear();
}
inline const ::valhalla::mjolnir::Transit_Route& Transit::routes(int index) const {
  return routes_.Get(index);
}
inline ::valhalla::mjolnir::Transit_Route* Transit::mutable_routes(int index) {
  return routes_.Mutable(index);
}
inline ::valhalla::mjolnir::Transit_Route* Transit::add_routes() {
  return routes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Route >&
Transit::routes() const {
  return routes_;
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Route >*
Transit::mutable_routes() {
  return &routes_;
}

// repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
inline int Transit::shapes_size() const {
  return shapes_.size();
}
inline void Transit::clear_shapes() {
  shapes_.Clear();
}
inline const ::valhalla::mjolnir::Transit_Shape& Transit::shapes(int index) const {
  return shapes_.Get(index);
}
inline ::valhalla::mjolnir::Transit_Shape* Transit::mutable_shapes(int index) {
  return shapes_.Mutable(index);
}
inline ::valhalla::mjolnir::Transit_Shape* Transit::add_shapes() {
  return shapes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Shape >&
Transit::shapes() const {
  return shapes_;
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Shape >*
Transit::mutable_shapes() {
  return &shapes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mjolnir
}  // namespace valhalla

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::valhalla::mjolnir::Transit_VehicleType>() {
  return ::valhalla::mjolnir::Transit_VehicleType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transit_2eproto__INCLUDED
