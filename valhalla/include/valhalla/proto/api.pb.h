// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_api_2eproto__INCLUDED
#define PROTOBUF_api_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "options.pb.h"
#include "trip.pb.h"
#include "directions.pb.h"
// @@protoc_insertion_point(includes)

namespace valhalla {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_api_2eproto();
void protobuf_AssignDesc_api_2eproto();
void protobuf_ShutdownFile_api_2eproto();

class Api;

// ===================================================================

class Api : public ::google::protobuf::MessageLite {
 public:
  Api();
  virtual ~Api();

  Api(const Api& from);

  inline Api& operator=(const Api& from) {
    CopyFrom(from);
    return *this;
  }

  static const Api& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Api* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Api* other);

  // implements Message ----------------------------------------------

  Api* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Api& from);
  void MergeFrom(const Api& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .valhalla.Options options = 1;
  inline bool has_options() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 1;
  inline const ::valhalla::Options& options() const;
  inline ::valhalla::Options* mutable_options();
  inline ::valhalla::Options* release_options();
  inline void set_allocated_options(::valhalla::Options* options);

  // optional .valhalla.Trip trip = 2;
  inline bool has_trip() const;
  inline void clear_trip();
  static const int kTripFieldNumber = 2;
  inline const ::valhalla::Trip& trip() const;
  inline ::valhalla::Trip* mutable_trip();
  inline ::valhalla::Trip* release_trip();
  inline void set_allocated_trip(::valhalla::Trip* trip);

  // optional .valhalla.Directions directions = 3;
  inline bool has_directions() const;
  inline void clear_directions();
  static const int kDirectionsFieldNumber = 3;
  inline const ::valhalla::Directions& directions() const;
  inline ::valhalla::Directions* mutable_directions();
  inline ::valhalla::Directions* release_directions();
  inline void set_allocated_directions(::valhalla::Directions* directions);

  // @@protoc_insertion_point(class_scope:valhalla.Api)
 private:
  inline void set_has_options();
  inline void clear_has_options();
  inline void set_has_trip();
  inline void clear_has_trip();
  inline void set_has_directions();
  inline void clear_has_directions();

  ::valhalla::Options* options_;
  ::valhalla::Trip* trip_;
  ::valhalla::Directions* directions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_api_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_api_2eproto();
  #endif
  friend void protobuf_AssignDesc_api_2eproto();
  friend void protobuf_ShutdownFile_api_2eproto();

  void InitAsDefaultInstance();
  static Api* default_instance_;
};
// ===================================================================


// ===================================================================

// Api

// optional .valhalla.Options options = 1;
inline bool Api::has_options() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Api::set_has_options() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Api::clear_has_options() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Api::clear_options() {
  if (options_ != NULL) options_->::valhalla::Options::Clear();
  clear_has_options();
}
inline const ::valhalla::Options& Api::options() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return options_ != NULL ? *options_ : *default_instance().options_;
#else
  return options_ != NULL ? *options_ : *default_instance_->options_;
#endif
}
inline ::valhalla::Options* Api::mutable_options() {
  set_has_options();
  if (options_ == NULL) options_ = new ::valhalla::Options;
  return options_;
}
inline ::valhalla::Options* Api::release_options() {
  clear_has_options();
  ::valhalla::Options* temp = options_;
  options_ = NULL;
  return temp;
}
inline void Api::set_allocated_options(::valhalla::Options* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
}

// optional .valhalla.Trip trip = 2;
inline bool Api::has_trip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Api::set_has_trip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Api::clear_has_trip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Api::clear_trip() {
  if (trip_ != NULL) trip_->::valhalla::Trip::Clear();
  clear_has_trip();
}
inline const ::valhalla::Trip& Api::trip() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return trip_ != NULL ? *trip_ : *default_instance().trip_;
#else
  return trip_ != NULL ? *trip_ : *default_instance_->trip_;
#endif
}
inline ::valhalla::Trip* Api::mutable_trip() {
  set_has_trip();
  if (trip_ == NULL) trip_ = new ::valhalla::Trip;
  return trip_;
}
inline ::valhalla::Trip* Api::release_trip() {
  clear_has_trip();
  ::valhalla::Trip* temp = trip_;
  trip_ = NULL;
  return temp;
}
inline void Api::set_allocated_trip(::valhalla::Trip* trip) {
  delete trip_;
  trip_ = trip;
  if (trip) {
    set_has_trip();
  } else {
    clear_has_trip();
  }
}

// optional .valhalla.Directions directions = 3;
inline bool Api::has_directions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Api::set_has_directions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Api::clear_has_directions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Api::clear_directions() {
  if (directions_ != NULL) directions_->::valhalla::Directions::Clear();
  clear_has_directions();
}
inline const ::valhalla::Directions& Api::directions() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return directions_ != NULL ? *directions_ : *default_instance().directions_;
#else
  return directions_ != NULL ? *directions_ : *default_instance_->directions_;
#endif
}
inline ::valhalla::Directions* Api::mutable_directions() {
  set_has_directions();
  if (directions_ == NULL) directions_ = new ::valhalla::Directions;
  return directions_;
}
inline ::valhalla::Directions* Api::release_directions() {
  clear_has_directions();
  ::valhalla::Directions* temp = directions_;
  directions_ = NULL;
  return temp;
}
inline void Api::set_allocated_directions(::valhalla::Directions* directions) {
  delete directions_;
  directions_ = directions;
  if (directions) {
    set_has_directions();
  } else {
    clear_has_directions();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2eproto__INCLUDED
